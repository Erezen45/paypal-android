# The merged Query root type
type Query {
  # Query of checkout
  checkout: checkoutQuery

  # Query of billing
  billing: billingQuery

  # GAAC - Google Address Auto Complete
  #
  # Make Google api call to get address auto suggestion based on line1 of address field
  #
  # count - number of results to return
  # countries - array of countries in which user typed partial address should be matched
  # input - whatever user typed in line1 of address field (partial line1 address field)
  # language - the returned address suggestions language
  # location - latitude,longitude (it is a scalar with validation)
  # offset - Integer which decides the number of letters to look for from first word of input
  # radius - radius around location provided, but not a strictBound to this region
  # sessionId - is a unique key generated by frontend to keep the billing for
  #   google API billing needs. Session ID makes sure google bills paypal per user basis and
  #   not per API call
  # strictBounds - bound the address returned to location + radius region, which is like drawing
  #   a circle around the location (lat,long) with radius length of X meters and return matching
  #   address only within the circle
  # types - look for a address or business establishment - refer google docs on places API
  #
  # Required Roles: None
  addressAutoComplete(
    count: Int
    countries: [CountryCodes]
    input: String!
    language: CheckoutContentLanguageCode
    location: GeoLocation
    offset: Int
    radius: Int
    sessionId: String!
    strictBounds: Boolean = false
    types: GooglePlacesType
  ): AddressAutoComplete

  # GAAC - Google Address Auto Complete
  #
  # Make Google api call to get normalized address using a place_id we get from addressAutoComplete api call
  #
  # language - the returned address suggestions language
  # placeId - placeId got from addressAutoComplete api call
  # region - The region code (us, ca), specified as a ccTLD (country code top-level domain)
  #   more details - https://developers.google.com/places/web-service/details
  # sessionId - is a unique key generated by frontend to keep the billing for
  #   google API billing needs. Session ID makes sure google bills paypal per user basis and
  #   not per API call
  # normalize - if this flag is true, the returned address will be normalized with AMS.
  #
  # Required Roles: None
  addressFromAutoCompletePlaceId(
    language: CheckoutContentLanguageCode
    placeId: ID!
    region: String
    sessionId: String!
    normalize: Boolean = false
  ): AddressForPlaceId

  # Allows you to query for card metadata
  cardMeta(cardNumber: String!, countryCode: CountryCodes): CardMeta!

  # Allows you to query for card definitions.
  #
  # cardNumber - a partial or full card number for which to retrieve definitions
  # countryCode - a country code that represents the user's country (e.g. 'US')
  #
  # If a countryCode is not provided, it will be detected based on the request.
  #
  # Required Roles: None
  cardDefinitions(
    cardNumber: String!
    countryCode: CountryCodes
  ): [CardDefinition]! @deprecated(reason: "Moved to cardMeta")

  # checkoutSession query returns a CheckoutSession type.
  # Requires a token param (EC, PAY, or BA token) as a String
  # Average SLA response time - 1750ms
  #
  # if enableCache is passed as true. Any successful plan will be cached for one time use only.
  #
  # flows, productName, and dcvv are optional and are used for the create checkout session payload
  #
  # Required Roles: See CheckoutSession
  checkoutSession(
    token: String!
    enableCache: Boolean = false
    flows: CheckoutFlow
    productName: String
    dcvv: String
  ): CheckoutSession

  # Whether or not a guest is eligible for upgrade to member.  A Boolean.
  isGuestUpgradeableToMember(
    #
    token: String!

    # The buyer's billing address. Required for AMEX card
    billingAddress: AddressInput!

    # The buyer's credit card
    card: CardInput!

    # The buyer's country code.
    country: CountryCodes!

    # The buyer's email address. Maximum length is 127 characters.
    email: String!

    # The buyer's first name.
    firstName: String!

    # The buyer's last name.
    lastName: String!
  ): Boolean

  # issuerBasedInstallments query returns installments options for a given card and buyer country.
  # Requires a token param (EC token) as a String
  # CC number is optional for BR flows, but required for MX flows.
  # Requires a buyer country as a String
  # card type is optional for MX flows, but required for BR flows.
  #
  # Required Roles: None.
  getInstallmentsForOnboardingFlows(
    cardNumber: String
    token: String!
    buyerCountry: CountryCodes!
    cardType: CardIssuerType
  ): [Installments]

  # getInstallmentsForVaultedToken query allows you to query installments based on Vaulted Token.
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a vaultedToken as a String. It is a tokenized credit card passed in from MX UCC flows.
  #
  # Required Roles: None.
  getInstallmentsForVaultedToken(
    vaultedToken: String!
    token: String!
  ): [Installments]

  # Allows you to query for currency conversion rates and metadata
  # between two currencies (Ex: "USD" and "SGD")
  #
  # Requires a sourceCurrency (Ex: "USD")
  # Requires a sourceValue (Ex: "1.00"
  # Requires a targetCurrency (Ex: "SGD")
  # Requires a countryCode that represents the user's country code(Ex: "US")
  #
  # Required Roles: None.
  currencyConversion(
    sourceCurrency: SupportedCountryCurrencies!
    sourceValue: String!
    targetCurrency: SupportedCountryCurrencies!
    countryCode: CountryCodes!
    language: String!
  ): CheckoutCurrencyConversion

  # Allows you to query for currency conversion rates and metadata
  # from a token and a credit card number
  #
  # Requires a PAY/EC token (Ex: "EC-5NY05678GP2575040")
  # Requires a credit card number (Ex: '4111111111111111')
  # Optional country code (Ex: "US")
  # Optional card brand (Ex: "VISA")
  #
  # If neither the card brand or country code are passed then they will
  # be derived from a card bin API call
  #
  # Required Roles: None.
  currencyConversionFromCreditCard(
    cardNumber: String!
    token: String!
    country: CountryCodes
    cardBrand: CardIssuerType
  ): CheckoutCurrencyConversion

  # Allows for evaluating a dynamic segment using dynsegmentationserv
  #
  # Requires a segment name (Ex: "ALL_20200101_Something")
  #
  # Required Roles: LOGGEDIN, REMEMBERED, or IDENTIFIED
  dynamicSegmentEvaluation(segmentName: String!): Boolean

  # Allows you to fetch eligible funding sources based on different criteria
  #
  # Optional clientID
  # Optional currency (Ex: "USD")
  # Optional country (Ex: "US")
  # Requires a language (Ex: "en")
  # Requires an intent (Ex: SALE)
  # Requires commit
  # Requires vault
  # Requires disableFunding (Ex: [EPS]
  # Optional merchantID
  # Optional cookies
  # Optional ip
  # Optional userAgent
  # Optional buttonSessionId
  fundingEligibility(
    clientId: String
    currency: SupportedCountryCurrencies
    buyerCountry: CountryCodes
    domain: String
    intent: FundingEligibilityIntent
    commit: Boolean
    vault: Boolean
    disableFunding: [SupportedPaymentMethodsType]
    enableFunding: [SupportedPaymentMethodsType]
    disableCard: [SupportedCardsType]
    merchantId: [String]
    cookies: String
    ip: String
    userAgent: String
    buttonSessionId: String
    allowed: [SupportedPaymentMethodsType]
  ): FundingEligibility

  # The pxpTests query returns an Array of Experiment types.
  # See the 'pxpTest' query for more information on parameters.
  #
  # Average SLA response time - 42ms
  experiments(tests: [ExperimentInput]): [Experiment]
    @deprecated(
      reason: "PXP experiments are deprecated. Use elmo experiments instead and query for elmoExperiment"
    )

  # Metadata specific to a locale
  #
  # If a country is not provided, it will be derived using default locale resolution rules (Ex: `checkoutSession.locale`)
  #
  # Required auth states: Any
  localeMetadata: LocaleMetadata

  # Allows you to fetch fields for a User.
  #
  # *NOTE* This is for the currently logged in user.  In the future,
  # this query *could* allow you to pass a user ID to retrieve another user
  # such as in a student account use case where a parent is permitted to see
  # a child/student account information.
  #
  # Average SLA response time - 30ms
  #
  # Required Roles: LOGGEDIN, REMEMBERED, IDENTIFIED
  user: User

  # Auth token exchange
  auth(
    clientId: String
    accessToken: String
    refreshToken: String
    idToken: String
    authCode: String
  ): Auth

  # Returns whether the flow is eligible for signup or guest
  flowEligibility(
    token: String!
    transactionCountry: CountryCodes!
    merchantCountry: CountryCodes!
    merchantId: String!
  ): FlowEligibleMethods

  # Allows you to fetch eligible Installments based on merchant preferences.
  # If cardNumber is passed, installments will be fetched for the given card.
  #
  # Requires a payToken (Ex: "EC-1R520585JJ019435S")
  #
  # Optional cardNumber (Ex: "4111111111111111")
  eligibleInstallments(token: String!, cardNumber: String): EligibleInstallments

  # Allows you to query for a formatted address based on the information passed
  # to us by the user during a checkout session
  #
  # Requires a pay/EC token: (Ex: "EC-1R520585JJ019435S")
  addressNormalization(
    token: String!
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    country: CountryCodes
    scope: AddressNormalizationScopes = ALL
    processMode: AddressNormalizationProcessModes = INTERACTIVE
  ): NormalizedAddress

  # Allows you to query for a formatted address and shows which fields are incorrect
  # Please use either of the 2 format as a set.
  #   1. Old Coarse fields ( line1, line2, city, state, country, postalCode) soon to be deprecated
  #   2. New portable address fields (addressLine1, addressLine2, addressLine3, adminArea1, adminArea2, adminArea3,
  #     adminArea4, countryCode, postalCode)
  addressValidation(
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    country: CountryCodes
    addressLine1: String
    addressLine2: String
    addressLine3: String
    adminArea1: String
    adminArea2: String
    adminArea3: String
    adminArea4: String
    countryCode: CountryCodes
  ): ValidatedAddress

  # Allows you to fetch html, css, and js information related if GDPR related banner
  # is required for a client. Determined by locale headers/cookies on the request.
  #
  # If GDPR banner is not necessary, empty strings will be returned.
  gdprBanner(nonce: String): GdprBanner
    @deprecated(reason: "Moved to cookieBanner")

  # Allows you to fetch html, css, and js information necessary to display the cookie banner
  # on the client. Determined by locale headers/cookies on the request.
  #
  # If cookie banner is not necessary, empty strings will be returned.
  cookieBanner(nonce: String): CookieBanner

  # Allows you to fetch User Agreement's data necessary to display the correct version
  # and link for the User Agreement on the client. Determined by Consent API response.
  #
  # If Consent API provides no data, empty strings will be returned.
  #
  # flow - CHECKOUT => for member use cases and ONBOARDING => for guest and sign up use cases
  userAgreement(flow: EvalPolicyFlowType): UserAgreement

  # Allows you to fetch html, css, and js information necessary to display the app download banner
  # on the client.
  #
  # App download banner endpoint in commonutilsnodeserv expects device details to be passed in the request.
  # Client applications querying for app download banner from xobuernodeserv should pass below parameters to
  # show the banner on the client.
  #
  # App download banner works on logged in and non-logged in state.
  #
  # If the request is not eligible for app download banner, all 3 response object keys (css, js and html) will
  # return with empty string
  #
  # deviceType - Possible values are DESKTOP, TABLET, MOBILE
  # deviceOS - Example values are iOS, Android
  # isMobile - if the device is a mobile
  # deviceOSVersion: OS version of the device, xo-gears device api can be use to
  # fetch this data, pass 'Unknown' if the value is not present
  # flow - flow name that is making the graphql call, used in PS for message config. Non mandatory
  appDownloadBanner(
    deviceOS: String!
    deviceOSVersion: String!
    deviceType: DeviceType!
    flow: String
    isMobile: Boolean!
    nonce: String!
  ): AppDownloadBanner

  # Get a signed JsonWebToken for threeDS new stack (2.0 with inbound switch integration)
  # We need JWT token for two reasons:
  # 1. Device Data Collection needs a set of key values to be signed by cardinal api key from keymaker and the
  #    entire signed string value is posted to DDC iframe
  # 2. Cardinal Iframe needs a JWT value to be posted to trigger a OTP popup iframe
  # NOTE: Basically this API will sign whatever allowed keys you pass in request. There is no differentiation
  # in business logic of this API based on above two cases.
  #
  # referenceId - Unique ID generated by this API. This is populated only when 3DS
  # is required and request is not in transactional context.
  #               Only applicable for 3DS
  # cardBin - first 9 digits of credit card - it returned as part of contingency data from FI.
  #   This parameter is optional for Switch api's.
  # jwtIssuer - JWT issuer returned from contingency data.
  # jwtOrgUnitId - JWT org unit ID returned from contingency data.
  # redirectUrl - url returned by ACS(Access Control Server) part of initial 3ds call
  #   which needs to send it to cardinal before loading challenge page.
  # returnUrl - call back route on frontend app to which cardinal can return after OTP is submitted by user.
  # transactionId = The ID of the transaction that is associated with this 3D Secure authentication. Only applicable for 3DS
  # paymentAuthenticationRequest - The encoded payment request generated by Centinel.
  #
  # Required auth states: any
  threeDSJwt(
    referenceId: String!
    cardBin: String
    jwtIssuer: String!
    jwtOrgUnitId: String!
    returnUrl: String
    redirectUrl: String
    transactionId: String
    paymentAuthenticationRequest: String
  ): String

  # Allows you to fetch customization for elements (eg: tagline in an SPB) in checkout flow
  checkoutCustomization(
    clientId: String
    currency: SupportedCountryCurrencies
    buyerCountry: CountryCodes
    domain: String
    intent: FundingEligibilityIntent
    commit: Boolean
    vault: Boolean
    merchantId: [String]
    cookies: String
    ip: String
    userAgent: String
    buttonSessionId: String
    locale: LocaleInput!
    buttonLabel: ButtonLabels
    installmentPeriod: String
    taglineEnabled: Boolean
    renderedButtons: [FundingButtonType]
    layout: ButtonLayouts
    buttonSize: ButtonSizes
    deviceInfo: DeviceInfo
    creditRiskVerified: Boolean
  ): CheckoutCustomization

  # Interface with the firebase api
  firebase: FireBase!

  # Determines flow eligibility for the Web to Mobile SDK integration. The query takes in a set
  # number of parameters to determine eligibility for two main usecases.
  #
  # When no EC token is present, we'll take in paramteters form the Smart Payment Buttons to determine
  # eligibility at the moment of rendering the buttons
  #
  # When the EC token is present, we'll inspect the checkout session to determin transaction eligibility at
  # the moment of fallback, or when going to native SDK in case there's a buyer specific reason
  mobileSDKEligibility(
    token: String
    vault: Boolean
    shippingCallbackEnabled: Boolean
    merchantID: String
    facilitatorClientID: String
    buyerCountry: String
    buyerLanguage: String
    buyerAccessToken: String
    nativeAppVersion: String
    fundingSource: String
    currency: String
    userAgent: String
    buttonSessionID: String
    stickinessID: String
    cookies: String
    sdkjsVersion: String
    intent: String
    domain: String
    os: String
    nativeSdkVersion: String
    enableFunding: [String]
    skipElmo: Boolean
    isCryptoPaymentsSupported: Boolean
    isBillingAgreementSupported: Boolean
  ): MobileSDKEligibility

  # Determines if the merchant is an eligible Apple Pay merchant and
  # returns the Apple Pay session
  applePayMerchantSession(
    url: String!
    displayName: String
    merchantID: [String]
    orderID: String
    clientID: String!
    merchantDomain: String!
  ): ApplePayMerchantSession

  # Determine if a given clientID is vetted for use with the native mobile
  # checkout SDK as a privileged host.
  #
  # - clientId: the client id registered at developer.paypal.com for your
  # development needs.
  isPrivilegedHost(clientId: String!): NativeSDKPrivilegedResponse

  # Allows you to query for a Consumer(Tesla) Signup flow id
  #
  # Requires a redirectUrl which will be used by the
  # Consumer flow to redirect the buyer after going through the
  # Consumer flow.
  consumerFlowId(redirectUrl: String!): ConsumerFlowId

  # Retrieves data from wallet
  #
  # Required Roles: LOGGEDIN
  wallet: Wallet!

  # The context object shared between Unified Login and Checkout
  unifiedLoginContext(token: String!): UnifiedLoginContext

  # Allows querying elmo for treatments
  # app - Optional name of the Component/pool field in the Elmo UI (Ex: "checkoutuinodeweb")
  # filters - Optional array of filters to pass to Elmo (Ex: [{ key: "Country", value: "US" }]).
  #       This list of filters will be compiled to an object - { "filters.Country": "US" }
  # experimentNameSubstring - Optional string. If provided, the list of treatments in the result
  #       will be limited to treatments whose experiment name containts this string.
  # res - Resource name, can pass a comma separated list (Ex: "checkout:landing::features")
  # uid - Optional unique identifier
  elmoExperiment(
    app: String
    filters: [ElmoFilterInput]
    experimentNameSubstring: String
    res: String!
    uid: String = ""
  ): ElmoExperiment!

  # Allows querying elmo for treatments by using values from an API call as filter
  # app - Optional name of the Component/pool field in the Elmo UI (Ex: "checkoutuinodeweb")
  # filters - Optional array of filters to pass to Elmo (Ex: [{ key: "Country", value: "US" }]).
  #       This list of filters will be compiled to an object - { "filters.Country": "US" }
  # realTimeFilters - required field which consists of key valu pair [{key: "accoun_id", value: MERCHANT_ID }]
  #       where the value is substituted with a value returned from an API call
  #       You can find the API configuration in data/Experimentation/constants.js
  # token - required field as the basic checkout session API calls require token
  # res - Resource name, can pass a comma separated list (Ex: "checkout:landing::features")
  # uid - Optional unique identifier
  elmoExperimentWithRealTimeFilters(
    app: String
    filters: [ElmoFilterInput]
    realTimeFilters: [ElmoRealTimeFilterInput!]!
    res: String!
    token: String!
    uid: String = ""
  ): ElmoExperiment!

  # This query is used by native SDK team to fetch the elmo experiment which
  # tells the client the feature eligibility for IOS and Android flows.
  # resourceName - Elmo Resource name used to retrieve the corresponding experiments (Ex: "mxo:android::preauth")
  # deviceLocale - The mobile divice locale
  # nativeSdkVersion - the native SDK version, will pass as the App version in elmo filter
  # merchantAppVersion - the merchant app version
  mobileSdkFeatures(
    clientId: String!
    resourceName: String!
    token: String
    deviceLocale: String
    nativeSdkVersion: String
    merchantAppVersion: String
  ): MobileSdkFeatures

  # Funding instruments from user's guest checkout experience.
  potentialCards(token: String!): [PotentialCard]

  # Smart Wallet Lookup
  #
  # If passed an payment method nonce, it will use that nonce to pull in vaulted
  # card details from Braintree. Otherwise it will
  # use PayPal vaulted cards. The branded flag must be set to true for nonce
  # detokenization, otherwise it will default to PayPal
  # vaulted cards.
  smartWallet(
    #
    orderID: String

    #
    clientId: String!

    #
    merchantId: [String!]

    #
    currency: String

    #
    amount: String

    #
    userIdToken: String

    #
    userRefreshToken: String

    #
    userAccessToken: String

    #
    vetted: Boolean

    # A Braintree nonce - currently deprecated (not needed)
    paymentMethodNonce: String

    # Indicator for branded or unbranded button. Must be true to pay with nonce
    branded: Boolean

    #
    allowBillingPayments: Boolean
  ): SmartWallet

  # Validates an address, including city/state/zip combinations.
  #
  # No EC token is required.
  validateAddress(
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    countryCode: CountryCodes
  ): ValidateAddressResponse

  # Calclate Shipping and Taxes
  calculateShippingAndTaxes(
    locale: LocaleInput!
    token: String!
    shippingAddress: AddressInput!
  ): ShippingAndTaxes

  # PayPal Provisioning Platform is P3 which helps users to add their card to PayPal through partners or issuers.
  # More on P3 https://engineering.paypalcorp.com/confluence/display/PAYM/P3+@+XO
  # Institutions provides details of available financial institution that are supporting for P3 experience.
  institutions: [FinancialInstitution!]!

  # Allows you to check whether or not an email is associated with an existing account
  isExistingAccount(email: String, token: String): Boolean

  # isMemberBenefitsEligible query will take some attributes of guest user and try to
  # match it with existing member account fetched based on guest user's email
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  # Requires a email ("example@paypal.com") as a String
  # Requires a phoneNumber ("800-888-8888") as a String
  # Requires a country ("US") as a String
  #
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  # Optionally pass a bank as a BankAccountInput (type, iban, accountNumber, routingNumber)
  #
  # Returns a Boolean type.
  #
  # Required auth states: ANONYMOUS
  isGuestMemberBenefitsEligible(
    # The buyer's billing address. Required for AMEX card
    billingAddress: AddressInput

    # The buyer's bank information
    bank: BankAccountInput

    # The buyer's credit card
    card: CardInput

    # The buyer's country code.
    country: CountryCodes!

    # The buyer's email address. Maximum length is 127 characters.
    email: String!

    # The buyer's first name.
    firstName: String!

    # The buyer's last name.
    lastName: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: PhoneInput!

    # The buyer's desired shipping address.
    shippingAddress: AddressInput

    # A token param (EC, PAY, or BA token) as a String
    token: String!
  ): GuestMemberBenefits

  # Whether or not the current user is eligible to see the PiX Interstitial modal when
  # appropriate.
  isEligibleForPiXInterstitial(token: String): Boolean

  # Validate the payees on an order (by token)
  # Ensures that the merchantIds match the order's payees
  validatePayees(
    token: String!
    merchantIds: [String!]!
  ): ValidatePayeesResponse

  # Given a payerID and optionally a merchantId, returns information about a merchant messaging profile.
  upstreamMessaging(clientId: String, merchantId: [String]): UpstreamMessaging

  # Determines flow eligibility for Inline Checkout.
  inlineCheckoutEligibility(
    clientId: String!
    merchantId: [String]
  ): InlineCheckoutEligibility

  # Retrieves login context for UL OTP
  otpLoginContext(
    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # Which Identity integration type to use, e.g. memberXO
    integrationType: String!
  ): OtpLoginContext

  # Returns supported networks (FIs) and merchant country code for Apple Pay requests
  applepayConfig(
    buyerCountry: CountryCodes
    clientId: String!
    merchantId: [String]!
  ): ApplepayConfig

  # Returns propensity score for different xo products
  checkoutPropensityScore(
    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # Buyer's Locale Country primarily used for ELMO filter
    country: CountryCodes!
  ): CheckoutPropensityScore

  # Returns PPC Approvability Score for current user
  ppcApprovabilityScore: Float
  _extIntrospection: _ExtendedIntrospection
}

# Query root type.  See https://graphql.org/learn/execution/#root-fields-resolvers
type checkoutQuery {
  # GAAC - Google Address Auto Complete
  #
  # Make Google api call to get address auto suggestion based on line1 of address field
  #
  # count - number of results to return
  # countries - array of countries in which user typed partial address should be matched
  # input - whatever user typed in line1 of address field (partial line1 address field)
  # language - the returned address suggestions language
  # location - latitude,longitude (it is a scalar with validation)
  # offset - Integer which decides the number of letters to look for from first word of input
  # radius - radius around location provided, but not a strictBound to this region
  # sessionId - is a unique key generated by frontend to keep the billing for
  #   google API billing needs. Session ID makes sure google bills paypal per user basis and
  #   not per API call
  # strictBounds - bound the address returned to location + radius region, which is like drawing
  #   a circle around the location (lat,long) with radius length of X meters and return matching
  #   address only within the circle
  # types - look for a address or business establishment - refer google docs on places API
  #
  # Required Roles: None
  addressAutoComplete(
    count: Int
    countries: [checkoutCountryCodes]
    input: String!
    language: checkoutCheckoutContentLanguageCode
    location: checkoutGeoLocation
    offset: Int
    radius: Int
    sessionId: String!
    strictBounds: Boolean = false
    types: checkoutGooglePlacesType
  ): checkoutAddressAutoComplete

  # GAAC - Google Address Auto Complete
  #
  # Make Google api call to get normalized address using a place_id we get from addressAutoComplete api call
  #
  # language - the returned address suggestions language
  # placeId - placeId got from addressAutoComplete api call
  # region - The region code (us, ca), specified as a ccTLD (country code top-level domain)
  #   more details - https://developers.google.com/places/web-service/details
  # sessionId - is a unique key generated by frontend to keep the billing for
  #   google API billing needs. Session ID makes sure google bills paypal per user basis and
  #   not per API call
  # normalize - if this flag is true, the returned address will be normalized with AMS.
  #
  # Required Roles: None
  addressFromAutoCompletePlaceId(
    language: checkoutCheckoutContentLanguageCode
    placeId: ID!
    region: String
    sessionId: String!
    normalize: Boolean = false
  ): checkoutAddressForPlaceId

  # Allows you to query for card metadata
  cardMeta(
    cardNumber: String!
    countryCode: checkoutCountryCodes
  ): checkoutCardMeta!

  # Allows you to query for card definitions.
  #
  # cardNumber - a partial or full card number for which to retrieve definitions
  # countryCode - a country code that represents the user's country (e.g. 'US')
  #
  # If a countryCode is not provided, it will be detected based on the request.
  #
  # Required Roles: None
  cardDefinitions(
    cardNumber: String!
    countryCode: checkoutCountryCodes
  ): [checkoutCardDefinition]! @deprecated(reason: "Moved to cardMeta")

  # checkoutSession query returns a CheckoutSession type.
  # Requires a token param (EC, PAY, or BA token) as a String
  # Average SLA response time - 1750ms
  #
  # if enableCache is passed as true. Any successful plan will be cached for one time use only.
  #
  # flows, productName, and dcvv are optional and are used for the create checkout session payload
  #
  # Required Roles: See CheckoutSession
  checkoutSession(
    token: String!
    enableCache: Boolean = false
    flows: checkoutCheckoutFlow
    productName: String
    dcvv: String
  ): checkoutCheckoutSession

  # Whether or not a guest is eligible for upgrade to member.  A Boolean.
  isGuestUpgradeableToMember(
    #
    token: String!

    # The buyer's billing address. Required for AMEX card
    billingAddress: checkoutAddressInput!

    # The buyer's credit card
    card: checkoutCardInput!

    # The buyer's country code.
    country: checkoutCountryCodes!

    # The buyer's email address. Maximum length is 127 characters.
    email: String!

    # The buyer's first name.
    firstName: String!

    # The buyer's last name.
    lastName: String!
  ): Boolean

  # issuerBasedInstallments query returns installments options for a given card and buyer country.
  # Requires a token param (EC token) as a String
  # CC number is optional for BR flows, but required for MX flows.
  # Requires a buyer country as a String
  # card type is optional for MX flows, but required for BR flows.
  #
  # Required Roles: None.
  getInstallmentsForOnboardingFlows(
    cardNumber: String
    token: String!
    buyerCountry: checkoutCountryCodes!
    cardType: checkoutCardIssuerType
  ): [checkoutInstallments]

  # getInstallmentsForVaultedToken query allows you to query installments based on Vaulted Token.
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a vaultedToken as a String. It is a tokenized credit card passed in from MX UCC flows.
  #
  # Required Roles: None.
  getInstallmentsForVaultedToken(
    vaultedToken: String!
    token: String!
  ): [checkoutInstallments]

  # Allows you to query for currency conversion rates and metadata
  # between two currencies (Ex: "USD" and "SGD")
  #
  # Requires a sourceCurrency (Ex: "USD")
  # Requires a sourceValue (Ex: "1.00"
  # Requires a targetCurrency (Ex: "SGD")
  # Requires a countryCode that represents the user's country code(Ex: "US")
  #
  # Required Roles: None.
  currencyConversion(
    sourceCurrency: checkoutSupportedCountryCurrencies!
    sourceValue: String!
    targetCurrency: checkoutSupportedCountryCurrencies!
    countryCode: checkoutCountryCodes!
    language: String!
  ): checkoutCheckoutCurrencyConversion

  # Allows you to query for currency conversion rates and metadata
  # from a token and a credit card number
  #
  # Requires a PAY/EC token (Ex: "EC-5NY05678GP2575040")
  # Requires a credit card number (Ex: '4111111111111111')
  # Optional country code (Ex: "US")
  # Optional card brand (Ex: "VISA")
  #
  # If neither the card brand or country code are passed then they will
  # be derived from a card bin API call
  #
  # Required Roles: None.
  currencyConversionFromCreditCard(
    cardNumber: String!
    token: String!
    country: checkoutCountryCodes
    cardBrand: checkoutCardIssuerType
  ): checkoutCheckoutCurrencyConversion

  # Allows for evaluating a dynamic segment using dynsegmentationserv
  #
  # Requires a segment name (Ex: "ALL_20200101_Something")
  #
  # Required Roles: LOGGEDIN, REMEMBERED, or IDENTIFIED
  dynamicSegmentEvaluation(segmentName: String!): Boolean

  # Allows you to fetch eligible funding sources based on different criteria
  #
  # Optional clientID
  # Optional currency (Ex: "USD")
  # Optional country (Ex: "US")
  # Requires a language (Ex: "en")
  # Requires an intent (Ex: SALE)
  # Requires commit
  # Requires vault
  # Requires disableFunding (Ex: [EPS]
  # Optional merchantID
  # Optional cookies
  # Optional ip
  # Optional userAgent
  # Optional buttonSessionId
  fundingEligibility(
    clientId: String
    currency: checkoutSupportedCountryCurrencies
    buyerCountry: checkoutCountryCodes
    domain: String
    intent: checkoutFundingEligibilityIntent
    commit: Boolean
    vault: Boolean
    disableFunding: [checkoutSupportedPaymentMethodsType]
    enableFunding: [checkoutSupportedPaymentMethodsType]
    disableCard: [checkoutSupportedCardsType]
    merchantId: [String]
    cookies: String
    ip: String
    userAgent: String
    buttonSessionId: String
    allowed: [checkoutSupportedPaymentMethodsType]
  ): checkoutFundingEligibility

  # The pxpTests query returns an Array of Experiment types.
  # See the 'pxpTest' query for more information on parameters.
  #
  # Average SLA response time - 42ms
  experiments(tests: [checkoutExperimentInput]): [checkoutExperiment]
    @deprecated(
      reason: "PXP experiments are deprecated. Use elmo experiments instead and query for elmoExperiment"
    )

  # Metadata specific to a locale
  #
  # If a country is not provided, it will be derived using default locale resolution rules (Ex: `checkoutSession.locale`)
  #
  # Required auth states: Any
  localeMetadata: checkoutLocaleMetadata

  # Allows you to fetch fields for a User.
  #
  # *NOTE* This is for the currently logged in user.  In the future,
  # this query *could* allow you to pass a user ID to retrieve another user
  # such as in a student account use case where a parent is permitted to see
  # a child/student account information.
  #
  # Average SLA response time - 30ms
  #
  # Required Roles: LOGGEDIN, REMEMBERED, IDENTIFIED
  user: checkoutUser

  # Auth token exchange
  auth(
    clientId: String
    accessToken: String
    refreshToken: String
    idToken: String
    authCode: String
  ): checkoutAuth

  # Returns whether the flow is eligible for signup or guest
  flowEligibility(
    token: String!
    transactionCountry: checkoutCountryCodes!
    merchantCountry: checkoutCountryCodes!
    merchantId: String!
  ): checkoutFlowEligibleMethods

  # Allows you to fetch eligible Installments based on merchant preferences.
  # If cardNumber is passed, installments will be fetched for the given card.
  #
  # Requires a payToken (Ex: "EC-1R520585JJ019435S")
  #
  # Optional cardNumber (Ex: "4111111111111111")
  eligibleInstallments(
    token: String!
    cardNumber: String
  ): checkoutEligibleInstallments

  # Allows you to query for a formatted address based on the information passed
  # to us by the user during a checkout session
  #
  # Requires a pay/EC token: (Ex: "EC-1R520585JJ019435S")
  addressNormalization(
    token: String!
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    country: checkoutCountryCodes
    scope: checkoutAddressNormalizationScopes = ALL
    processMode: checkoutAddressNormalizationProcessModes = INTERACTIVE
  ): checkoutNormalizedAddress

  # Allows you to query for a formatted address and shows which fields are incorrect
  # Please use either of the 2 format as a set.
  #   1. Old Coarse fields ( line1, line2, city, state, country, postalCode) soon to be deprecated
  #   2. New portable address fields (addressLine1, addressLine2, addressLine3, adminArea1, adminArea2, adminArea3,
  #     adminArea4, countryCode, postalCode)
  addressValidation(
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    country: checkoutCountryCodes
    addressLine1: String
    addressLine2: String
    addressLine3: String
    adminArea1: String
    adminArea2: String
    adminArea3: String
    adminArea4: String
    countryCode: checkoutCountryCodes
  ): checkoutValidatedAddress

  # Allows you to fetch html, css, and js information related if GDPR related banner
  # is required for a client. Determined by locale headers/cookies on the request.
  #
  # If GDPR banner is not necessary, empty strings will be returned.
  gdprBanner(nonce: String): checkoutGdprBanner
    @deprecated(reason: "Moved to cookieBanner")

  # Allows you to fetch html, css, and js information necessary to display the cookie banner
  # on the client. Determined by locale headers/cookies on the request.
  #
  # If cookie banner is not necessary, empty strings will be returned.
  cookieBanner(nonce: String): checkoutCookieBanner

  # Allows you to fetch User Agreement's data necessary to display the correct version
  # and link for the User Agreement on the client. Determined by Consent API response.
  #
  # If Consent API provides no data, empty strings will be returned.
  #
  # flow - CHECKOUT => for member use cases and ONBOARDING => for guest and sign up use cases
  userAgreement(flow: checkoutEvalPolicyFlowType): checkoutUserAgreement

  # Allows you to fetch html, css, and js information necessary to display the app download banner
  # on the client.
  #
  # App download banner endpoint in commonutilsnodeserv expects device details to be passed in the request.
  # Client applications querying for app download banner from xobuernodeserv should pass below parameters to
  # show the banner on the client.
  #
  # App download banner works on logged in and non-logged in state.
  #
  # If the request is not eligible for app download banner, all 3 response object keys (css, js and html) will
  # return with empty string
  #
  # deviceType - Possible values are DESKTOP, TABLET, MOBILE
  # deviceOS - Example values are iOS, Android
  # isMobile - if the device is a mobile
  # deviceOSVersion: OS version of the device, xo-gears device api can be use to
  # fetch this data, pass 'Unknown' if the value is not present
  # flow - flow name that is making the graphql call, used in PS for message config. Non mandatory
  appDownloadBanner(
    deviceOS: String!
    deviceOSVersion: String!
    deviceType: checkoutDeviceType!
    flow: String
    isMobile: Boolean!
    nonce: String!
  ): checkoutAppDownloadBanner

  # Get a signed JsonWebToken for threeDS new stack (2.0 with inbound switch integration)
  # We need JWT token for two reasons:
  # 1. Device Data Collection needs a set of key values to be signed by cardinal api key from keymaker and the
  #    entire signed string value is posted to DDC iframe
  # 2. Cardinal Iframe needs a JWT value to be posted to trigger a OTP popup iframe
  # NOTE: Basically this API will sign whatever allowed keys you pass in request. There is no differentiation
  # in business logic of this API based on above two cases.
  #
  # referenceId - Unique ID generated by this API. This is populated only when 3DS
  # is required and request is not in transactional context.
  #               Only applicable for 3DS
  # cardBin - first 9 digits of credit card - it returned as part of contingency data from FI.
  #   This parameter is optional for Switch api's.
  # jwtIssuer - JWT issuer returned from contingency data.
  # jwtOrgUnitId - JWT org unit ID returned from contingency data.
  # redirectUrl - url returned by ACS(Access Control Server) part of initial 3ds call
  #   which needs to send it to cardinal before loading challenge page.
  # returnUrl - call back route on frontend app to which cardinal can return after OTP is submitted by user.
  # transactionId = The ID of the transaction that is associated with this 3D Secure authentication. Only applicable for 3DS
  # paymentAuthenticationRequest - The encoded payment request generated by Centinel.
  #
  # Required auth states: any
  threeDSJwt(
    referenceId: String!
    cardBin: String
    jwtIssuer: String!
    jwtOrgUnitId: String!
    returnUrl: String
    redirectUrl: String
    transactionId: String
    paymentAuthenticationRequest: String
  ): String

  # Allows you to fetch customization for elements (eg: tagline in an SPB) in checkout flow
  checkoutCustomization(
    clientId: String
    currency: checkoutSupportedCountryCurrencies
    buyerCountry: checkoutCountryCodes
    domain: String
    intent: checkoutFundingEligibilityIntent
    commit: Boolean
    vault: Boolean
    merchantId: [String]
    cookies: String
    ip: String
    userAgent: String
    buttonSessionId: String
    locale: checkoutLocaleInput!
    buttonLabel: checkoutButtonLabels
    installmentPeriod: String
    taglineEnabled: Boolean
    renderedButtons: [checkoutFundingButtonType]
    layout: checkoutButtonLayouts
    buttonSize: checkoutButtonSizes
    deviceInfo: checkoutDeviceInfo
    creditRiskVerified: Boolean
  ): checkoutCheckoutCustomization

  # Interface with the firebase api
  firebase: checkoutFireBase!

  # Determines flow eligibility for the Web to Mobile SDK integration. The query takes in a set
  # number of parameters to determine eligibility for two main usecases.
  #
  # When no EC token is present, we'll take in paramteters form the Smart Payment Buttons to determine
  # eligibility at the moment of rendering the buttons
  #
  # When the EC token is present, we'll inspect the checkout session to determin transaction eligibility at
  # the moment of fallback, or when going to native SDK in case there's a buyer specific reason
  mobileSDKEligibility(
    token: String
    vault: Boolean
    shippingCallbackEnabled: Boolean
    merchantID: String
    facilitatorClientID: String
    buyerCountry: String
    buyerLanguage: String
    buyerAccessToken: String
    nativeAppVersion: String
    fundingSource: String
    currency: String
    userAgent: String
    buttonSessionID: String
    stickinessID: String
    cookies: String
    sdkjsVersion: String
    intent: String
    domain: String
    os: String
    nativeSdkVersion: String
    enableFunding: [String]
    skipElmo: Boolean
    isCryptoPaymentsSupported: Boolean
    isBillingAgreementSupported: Boolean
  ): checkoutMobileSDKEligibility

  # Determines if the merchant is an eligible Apple Pay merchant and
  # returns the Apple Pay session
  applePayMerchantSession(
    url: String!
    displayName: String
    merchantID: [String]
    orderID: String
    clientID: String!
    merchantDomain: String!
  ): checkoutApplePayMerchantSession

  # Determine if a given clientID is vetted for use with the native mobile
  # checkout SDK as a privileged host.
  #
  # - clientId: the client id registered at developer.paypal.com for your
  # development needs.
  isPrivilegedHost(clientId: String!): checkoutNativeSDKPrivilegedResponse

  # Allows you to query for a Consumer(Tesla) Signup flow id
  #
  # Requires a redirectUrl which will be used by the
  # Consumer flow to redirect the buyer after going through the
  # Consumer flow.
  consumerFlowId(redirectUrl: String!): checkoutConsumerFlowId

  # Retrieves data from wallet
  #
  # Required Roles: LOGGEDIN
  wallet: checkoutWallet!

  # The context object shared between Unified Login and Checkout
  unifiedLoginContext(token: String!): checkoutUnifiedLoginContext

  # Allows querying elmo for treatments
  # app - Optional name of the Component/pool field in the Elmo UI (Ex: "checkoutuinodeweb")
  # filters - Optional array of filters to pass to Elmo (Ex: [{ key: "Country", value: "US" }]).
  #       This list of filters will be compiled to an object - { "filters.Country": "US" }
  # experimentNameSubstring - Optional string. If provided, the list of treatments in the result
  #       will be limited to treatments whose experiment name containts this string.
  # res - Resource name, can pass a comma separated list (Ex: "checkout:landing::features")
  # uid - Optional unique identifier
  elmoExperiment(
    app: String
    filters: [checkoutElmoFilterInput]
    experimentNameSubstring: String
    res: String!
    uid: String = ""
  ): checkoutElmoExperiment!

  # Allows querying elmo for treatments by using values from an API call as filter
  # app - Optional name of the Component/pool field in the Elmo UI (Ex: "checkoutuinodeweb")
  # filters - Optional array of filters to pass to Elmo (Ex: [{ key: "Country", value: "US" }]).
  #       This list of filters will be compiled to an object - { "filters.Country": "US" }
  # realTimeFilters - required field which consists of key valu pair [{key: "accoun_id", value: MERCHANT_ID }]
  #       where the value is substituted with a value returned from an API call
  #       You can find the API configuration in data/Experimentation/constants.js
  # token - required field as the basic checkout session API calls require token
  # res - Resource name, can pass a comma separated list (Ex: "checkout:landing::features")
  # uid - Optional unique identifier
  elmoExperimentWithRealTimeFilters(
    app: String
    filters: [checkoutElmoFilterInput]
    realTimeFilters: [checkoutElmoRealTimeFilterInput!]!
    res: String!
    token: String!
    uid: String = ""
  ): checkoutElmoExperiment!

  # This query is used by native SDK team to fetch the elmo experiment which
  # tells the client the feature eligibility for IOS and Android flows.
  # resourceName - Elmo Resource name used to retrieve the corresponding experiments (Ex: "mxo:android::preauth")
  # deviceLocale - The mobile divice locale
  # nativeSdkVersion - the native SDK version, will pass as the App version in elmo filter
  # merchantAppVersion - the merchant app version
  mobileSdkFeatures(
    clientId: String!
    resourceName: String!
    token: String
    deviceLocale: String
    nativeSdkVersion: String
    merchantAppVersion: String
  ): checkoutMobileSdkFeatures

  # Funding instruments from user's guest checkout experience.
  potentialCards(token: String!): [checkoutPotentialCard]

  # Smart Wallet Lookup
  #
  # If passed an payment method nonce, it will use that nonce to pull in vaulted
  # card details from Braintree. Otherwise it will
  # use PayPal vaulted cards. The branded flag must be set to true for nonce
  # detokenization, otherwise it will default to PayPal
  # vaulted cards.
  smartWallet(
    #
    orderID: String

    #
    clientId: String!

    #
    merchantId: [String!]

    #
    currency: String

    #
    amount: String

    #
    userIdToken: String

    #
    userRefreshToken: String

    #
    userAccessToken: String

    #
    vetted: Boolean

    # A Braintree nonce - currently deprecated (not needed)
    paymentMethodNonce: String

    # Indicator for branded or unbranded button. Must be true to pay with nonce
    branded: Boolean

    #
    allowBillingPayments: Boolean
  ): checkoutSmartWallet

  # Validates an address, including city/state/zip combinations.
  #
  # No EC token is required.
  validateAddress(
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    countryCode: checkoutCountryCodes
  ): checkoutValidateAddressResponse

  # Calclate Shipping and Taxes
  calculateShippingAndTaxes(
    locale: checkoutLocaleInput!
    token: String!
    shippingAddress: checkoutAddressInput!
  ): checkoutShippingAndTaxes

  # PayPal Provisioning Platform is P3 which helps users to add their card to PayPal through partners or issuers.
  # More on P3 https://engineering.paypalcorp.com/confluence/display/PAYM/P3+@+XO
  # Institutions provides details of available financial institution that are supporting for P3 experience.
  institutions: [checkoutFinancialInstitution!]!

  # Allows you to check whether or not an email is associated with an existing account
  isExistingAccount(email: String, token: String): Boolean

  # isMemberBenefitsEligible query will take some attributes of guest user and try to
  # match it with existing member account fetched based on guest user's email
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  # Requires a email ("example@paypal.com") as a String
  # Requires a phoneNumber ("800-888-8888") as a String
  # Requires a country ("US") as a String
  #
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  # Optionally pass a bank as a BankAccountInput (type, iban, accountNumber, routingNumber)
  #
  # Returns a Boolean type.
  #
  # Required auth states: ANONYMOUS
  isGuestMemberBenefitsEligible(
    # The buyer's billing address. Required for AMEX card
    billingAddress: checkoutAddressInput

    # The buyer's bank information
    bank: checkoutBankAccountInput

    # The buyer's credit card
    card: checkoutCardInput

    # The buyer's country code.
    country: checkoutCountryCodes!

    # The buyer's email address. Maximum length is 127 characters.
    email: String!

    # The buyer's first name.
    firstName: String!

    # The buyer's last name.
    lastName: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: checkoutPhoneInput!

    # The buyer's desired shipping address.
    shippingAddress: checkoutAddressInput

    # A token param (EC, PAY, or BA token) as a String
    token: String!
  ): checkoutGuestMemberBenefits

  # Whether or not the current user is eligible to see the PiX Interstitial modal when
  # appropriate.
  isEligibleForPiXInterstitial(token: String): Boolean

  # Validate the payees on an order (by token)
  # Ensures that the merchantIds match the order's payees
  validatePayees(
    token: String!
    merchantIds: [String!]!
  ): checkoutValidatePayeesResponse

  # Given a payerID and optionally a merchantId, returns information about a merchant messaging profile.
  upstreamMessaging(
    clientId: String
    merchantId: [String]
  ): checkoutUpstreamMessaging

  # Determines flow eligibility for Inline Checkout.
  inlineCheckoutEligibility(
    clientId: String!
    merchantId: [String]
  ): checkoutInlineCheckoutEligibility

  # Retrieves login context for UL OTP
  otpLoginContext(
    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # Which Identity integration type to use, e.g. memberXO
    integrationType: String!
  ): checkoutOtpLoginContext

  # Returns supported networks (FIs) and merchant country code for Apple Pay requests
  applepayConfig(
    buyerCountry: checkoutCountryCodes
    clientId: String!
    merchantId: [String]!
  ): checkoutApplepayConfig

  # Returns propensity score for different xo products
  checkoutPropensityScore(
    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # Buyer's Locale Country primarily used for ELMO filter
    country: checkoutCountryCodes!
  ): checkoutCheckoutPropensityScore

  # Returns PPC Approvability Score for current user
  ppcApprovabilityScore: Float
}

# An enumeration of Country Codes by ISO-3166-1 ALPHA-2 standards
enum checkoutCountryCodes {
  # Afghanistan
  AF

  # Aland Islands
  AX

  # Albania
  AL

  # Algeria
  DZ

  # American Samoa
  AS

  # Andorra
  AD

  # Angola
  AO

  # Anguilla
  AI

  # Antarctica
  AQ

  # Antigua and Barbuda
  AG

  # Argentina
  AR

  # Armenia
  AM

  # Aruba
  AW

  # Australia
  AU

  # Austria
  AT

  # Azerbaijan
  AZ

  # Bahamas
  BS

  # Bahrain
  BH

  # Bangladesh
  BD

  # Barbados
  BB

  # Belarus
  BY

  # Belgium
  BE

  # Belize
  BZ

  # Benin
  BJ

  # Bermuda
  BM

  # Bhutan
  BT

  # Bolivia
  BO

  # Bonaire, Saint Eustatius and Saba
  BQ

  # Bosnia and Herzegovina
  BA

  # Botswana
  BW

  # Bouvet Island
  BV

  # Brazil
  BR

  # British Indian Ocean Territory
  IO

  # British Virgin Islands
  VG

  # Brunei
  BN

  # Bulgaria
  BG

  # Burkina Faso
  BF

  # Burundi
  BI

  # Cambodia
  KH

  # Cameroon
  CM

  # Canada
  CA

  # Cape Verde
  CV

  # Cayman Islands
  KY

  # Central African Republic
  CF

  # Chad
  TD

  # Chile
  CL

  # China
  C2

  # China
  CN

  # Christmas Island
  CX

  # Cocos Islands
  CC

  # Colombia
  CO

  # Comoros
  KM

  # Cook Islands
  CK

  # Costa Rica
  CR

  # Croatia
  HR

  # Cuba
  CU

  # Curacao
  CW

  # Cyprus
  CY

  # Czech Republic
  CZ

  # Democratic Republic of the Congo
  CD

  # Denmark
  DK

  # Djibouti
  DJ

  # Dominica
  DM

  # Dominican Republic
  DO

  # East Timor
  TL

  # Ecuador
  EC

  # Egypt
  EG

  # El Salvador
  SV

  # Equatorial Guinea
  GQ

  # Eritrea
  ER

  # Estonia
  EE

  # Ethiopia
  ET

  # Falkland Islands
  FK

  # Faroe Islands
  FO

  # Fiji
  FJ

  # Finland
  FI

  # France
  FR

  # French Guiana
  GF

  # French Polynesia
  PF

  # French Southern Territories
  TF

  # Gabon
  GA

  # Gambia
  GM

  # Georgia
  GE

  # Germany
  DE

  # Ghana
  GH

  # Gibraltar
  GI

  # Greece
  GR

  # Greenland
  GL

  # Grenada
  GD

  # Guadeloupe
  GP

  # Guam
  GU

  # Guatemala
  GT

  # Guernsey
  GG

  # Guinea
  GN

  # Guinea-Bissau
  GW

  # Guyana
  GY

  # Haiti
  HT

  # Heard Island and McDonald Islands
  HM

  # Honduras
  HN

  # Hong Kong
  HK

  # Hungary
  HU

  # Iceland
  IS

  # India
  IN

  # Indonesia
  ID

  # Iran
  IR

  # Iraq
  IQ

  # Ireland
  IE

  # Isle of Man
  IM

  # Israel
  IL

  # Italy
  IT

  # Ivory Coast
  CI

  # Jamaica
  JM

  # Japan
  JP

  # Jersey
  JE

  # Jordan
  JO

  # Kazakhstan
  KZ

  # Kenya
  KE

  # Kiribati
  KI

  # Kosovo
  XK

  # Kuwait
  KW

  # Kyrgyzstan
  KG

  # Laos
  LA

  # Latvia
  LV

  # Lebanon
  LB

  # Lesotho
  LS

  # Liberia
  LR

  # Libya
  LY

  # Liechtenstein
  LI

  # Lithuania
  LT

  # Luxembourg
  LU

  # Macao
  MO

  # Macedonia
  MK

  # Madagascar
  MG

  # Malawi
  MW

  # Malaysia
  MY

  # Maldives
  MV

  # Mali
  ML

  # Malta
  MT

  # Marshall Islands
  MH

  # Martinique
  MQ

  # Mauritania
  MR

  # Mauritius
  MU

  # Mayotte
  YT

  # Mexico
  MX

  # Micronesia
  FM

  # Moldova
  MD

  # Monaco
  MC

  # Mongolia
  MN

  # Montenegro
  ME

  # Montserrat
  MS

  # Morocco
  MA

  # Mozambique
  MZ

  # Myanmar
  MM

  # Namibia
  NA

  # Nauru
  NR

  # Nepal
  NP

  # Netherlands
  NL

  # Netherlands Antilles
  AN

  # New Caledonia
  NC

  # New Zealand
  NZ

  # Nicaragua
  NI

  # Niger
  NE

  # Nigeria
  NG

  # Niue
  NU

  # Norfolk Island
  NF

  # North Korea
  KP

  # Northern Mariana Islands
  MP

  # Norway
  NO

  # Oman
  OM

  # Pakistan
  PK

  # Palau
  PW

  # Palestinian Territory
  PS

  # Panama
  PA

  # Papua New Guinea
  PG

  # Paraguay
  PY

  # Peru
  PE

  # Philippines
  PH

  # Pitcairn
  PN

  # Poland
  PL

  # Portugal
  PT

  # Puerto Rico
  PR

  # Qatar
  QA

  # Republic of the Congo
  CG

  # Reunion
  RE

  # Romania
  RO

  # Russia
  RU

  # Rwanda
  RW

  # Saint Barthelemy
  BL

  # Saint Helena
  SH

  # Saint Kitts and Nevis
  KN

  # Saint Lucia
  LC

  # Saint Martin
  MF

  # Saint Pierre and Miquelon
  PM

  # Saint Vincent and the Grenadines
  VC

  # Samoa
  WS

  # San Marino
  SM

  # Sao Tome and Principe
  ST

  # Saudi Arabia
  SA

  # Senegal
  SN

  # Serbia
  RS

  # Serbia and Montenegro
  CS

  # Seychelles
  SC

  # Sierra Leone
  SL

  # Singapore
  SG

  # Sint Maarten
  SX

  # Slovakia
  SK

  # Slovenia
  SI

  # Solomon Islands
  SB

  # Somalia
  SO

  # South Africa
  ZA

  # South Georgia and the South Sandwich Islands
  GS

  # South Korea
  KR

  # South Sudan
  SS

  # Spain
  ES

  # Sri Lanka
  LK

  # Sudan
  SD

  # Suriname
  SR

  # Svalbard and Jan Mayen
  SJ

  # Swaziland
  SZ

  # Sweden
  SE

  # Switzerland
  CH

  # Syria
  SY

  # Taiwan
  TW

  # Tajikistan
  TJ

  # Tanzania
  TZ

  # Thailand
  TH

  # Togo
  TG

  # Tokelau
  TK

  # Tonga
  TO

  # Trinidad and Tobago
  TT

  # Tunisia
  TN

  # Turkey
  TR

  # Turkmenistan
  TM

  # Turks and Caicos Islands
  TC

  # Tuvalu
  TV

  # U.S. Virgin Islands
  VI

  # Uganda
  UG

  # Ukraine
  UA

  # United Arab Emirates
  AE

  # United Kingdom
  GB

  # United States
  US

  # United States Minor Outlying Islands
  UM

  # Uruguay
  UY

  # Uzbekistan
  UZ

  # Vanuatu
  VU

  # Vatican
  VA

  # Venezuela
  VE

  # Vietnam
  VN

  # Wallis and Futuna
  WF

  # Western Sahara
  EH

  # Yemen
  YE

  # Zambia
  ZM

  # Zimbabwe
  ZW
}

# Possible languages that xo-content may return
enum checkoutCheckoutContentLanguageCode {
  # Arabic
  ar

  # Belarusian
  be

  # Bulgarian
  bg

  # Bengali
  bn

  # Catalan
  ca

  # Czech
  cs

  # Welsh
  cy

  # Danish
  da

  # German
  de

  # Greek
  el

  # English
  en

  # Spanish
  es

  # Estonian
  et

  # Basque
  eu

  # Finnish
  fi

  # French
  fr

  # Galician
  gl

  # Hebrew
  he

  # Hindi
  hi

  # Croatian
  hr

  # Hungarian
  hu

  # Indonesian
  id

  # Icelandic
  is

  # Italian
  it

  # Japanese
  ja

  # Georgian
  ka

  # Kazakh
  kk

  # Khmer
  km

  # Korean
  ko

  # Lithuanian
  lt

  # Latvian
  lv

  # Macedonian
  mk

  # Mongolian
  mn

  # Marathi
  mr

  # Malay
  ms

  # Dutch
  nl

  # Norwegian
  no

  # Punjabi
  pa

  # Polish
  pl

  # Portuguese
  pt

  # Romanian
  ro

  # Russian
  ru

  # Sinhala
  si

  # Slovak
  sk

  # Slovenian
  sl

  # Albanian
  sq

  # Swedish
  sv

  # Swahili
  sw

  # Tamil
  ta

  # Telugu
  te

  # Thai
  th

  # Tagalog
  tl

  # Turkish
  tr

  # Ukrainian
  uk

  # Urdu
  ur

  # Vietnamese
  vi

  # Chinese
  zh
}

# GeoLocation - latitude,longitude without space eg: 37.377089,-121.922733
scalar checkoutGeoLocation

# GAAC - Google Address Auto Complete
# Place type is the search criteria for google places API
# Mostly for PayPal usecase it will be 'address' type
enum checkoutGooglePlacesType {
  # search places which may not be precise address or establishment
  GEOCODE

  # search by precise address
  ADDRESS

  # search by business establishment
  ESTABLISHMENT

  # search by city postal_code country and few more address fields
  REGIONS

  # search by locality or administrative_area_level_3
  CITIES
}

# GAAC - Google Address Auto Complete
# Response of google api call to get address auto suggestion based on line1 of address field
type checkoutAddressAutoComplete {
  # Suggestions is an array of object with placeId and addressText
  suggestions: [checkoutAddressAutoCompleteElement]
}

# GAAC - Google Address Auto Complete
# each address format of GAAC should be this format for frontends to process
type checkoutAddressAutoCompleteElement {
  # addressText is a plain text full address
  addressText: String

  # mainText is usually first line of address with which user input is matched
  # 2211 North first street
  mainText: String

  # placeId is a unique identifier of addressText, and it can be used to get normalized address from google
  placeId: ID

  # secondaryText is usually city state country separated by comma
  # San Jose, CA, USA
  secondaryText: String
}

# GAAC - Google Address Auto Complete
# Address response based on a place id - basically this is google returned address elements
type checkoutAddressForPlaceId {
  # address mapping from google places api response
  # we are having address key to create a griffin mapped google response
  # In future if we need any google specific fields then we can add a new key
  # with name additionalAddressFields or something similar
  #
  # If state is missing in GenericAddress then it means google returned state
  # did not match the griffin state list we have for a country
  address: checkoutGenericAddress
}

# Encapsulates all properties related to a generic address.
# Ex: line1, city, state, postalCode, fullAddress, isDefaultBilling, etc.
type checkoutGenericAddress implements checkoutAddress {
  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine1 instead for portable format."
    )

  # An Address second line street address (Ex: 'Apt 123')
  line2: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine2 instead for portable format."
    )

  # An Address city (Ex: 'San Jose')
  city: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea2 instead for portable format."
    )

  # An Address state/province (Ex: 'CA')
  state: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea1 instead for portable format."
    )

  # An Address postal code (Ex: '95131')
  postalCode: String

  # An Address two-letter country code (Ex: 'US')
  country: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use countryCode instead"
    )

  # An Address on a single line (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String

  # Portable address: An address first line street address
  addressLine1: String

  # Portable address: An address second line street address
  addressLine2: String

  # Portable address: An address third line street address
  addressLine3: String

  # Portable address: An address first line admin area
  adminArea1: String

  # Portable address: An address second line admin area
  adminArea2: String

  # Portable address: An address third line admin area
  adminArea3: String

  # Portable address: An address forth line admin area
  adminArea4: String

  # Portable address: An address two-letter country code
  countryCode: String
}

# The Address interface encapsulates all properties related to an address.
interface checkoutAddress {
  # A billing address first line street address (Ex: '2211 North 1st St')
  line1: String

  # A billing address second line street address (Ex: 'Apt 123')
  line2: String

  # A billing address city (Ex: 'San Jose')
  city: String

  # A billing address state/province (Ex: 'CA')
  state: String

  # A billing address postal code (Ex: '95131')
  postalCode: String

  # A billing address two-letter country code (Ex: 'US')
  country: String

  # A billing address on a single line
  # (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String
}

# Allows you to query for card metadata
type checkoutCardMeta {
  # Allows you to query for card definitions.
  #
  # cardNumber - a partial or full card number for which to retrieve definitions
  # countryCode - a country code that represents the user's country (e.g. 'US')
  #
  # If a countryCode is not provided, it will be detected based on the request.
  #
  # Required Roles: None
  definitions: [checkoutCardDefinition]!

  # Returns the cobrand of the card if the card is cobranded (e.g. DISNEY_CREDIT)
  cobrand: String
}

# Encapsulates key metadata for a particular card.
type checkoutCardDefinition {
  # The card issuer as a CardIssuerType (e.g. 'VISA', 'DISCOVER')
  brand: checkoutCardIssuerType!

  # The classification(s) for the card (e.g. 'CREDIT_CARD', 'DEBIT_CARD')
  classifications: [checkoutInstrumentClassification]!

  # The card issuer's country code
  countryCode: checkoutCountryCodes!

  # The card's currency code
  currencyCode: checkoutSupportedCountryCurrencies!

  # The available method(s) for confirming the card (e.g. 'ONE_TIME_PASSWORD_CONFIRMATION')
  confirmationMethods: [String]!
}

# An enumeration of credit card issuers that a card can have.
# VISA, MASTER_CARD, AMEX, etc
enum checkoutCardIssuerType {
  # American Express
  AMEX

  # Visa
  VISA

  # Mastercard
  MASTER_CARD

  # Diners Club
  DINERS

  # Discover
  DISCOVER

  # Maestro
  MAESTRO

  # JCB
  JCB

  # CB Nationale
  CB_NATIONALE

  # Cofinoga
  COFINOGA

  # Cetelem
  CETELEM

  # Cofidis
  COFIDIS

  # Elo
  ELO

  # Hiper
  HIPER

  # Hipercard
  HIPERCARD

  # UnionPay
  CHINA_UNION_PAY

  # RuPay
  RUPAY

  # Eftpos
  EFTPOS
}

# An enumeration of instrument classifications supported by PayPal
enum checkoutInstrumentClassification {
  # Bank account
  BANK

  # Co-branded credit card
  CO_BRANDED_CREDIT_CARD

  # Credit card
  CREDIT_CARD

  # Line of credit offered by PayPal
  CREDIT_LINE

  # Debit card
  DEBIT_CARD

  # External wallet account
  EXTERNAL_WALLET

  # Gift card
  GIFT_CARD

  # Balance
  HOLDING

  # PayPal-issued prepaid card
  PAYPAL_PREPAID_CARD

  # Prepaid card
  PREPAID_CARD

  # Credit card issued by a merchant
  PRIVATE_LABEL_CREDIT_CARD

  # Rewards currency
  REWARDS

  # Merchant specific balance, pay after delivery, etc.
  TAB

  # UNKNOWN
  UNKNOWN
}

# An enumeration of supported country currencies that CurrencyConversion query allows
enum checkoutSupportedCountryCurrencies {
  # United Arab Emirates Dirham (AED)
  AED

  # Afghan Afghani (AFN)
  AFN

  # Albania Lek (ALL)
  ALL

  # Armenian Dram (AMD)
  AMD

  # Netherlands Antillian Guilder (ANG)
  ANG

  # Angolian Kwanza (AOA)
  AOA

  # Argentine Peso (ARS)
  ARS

  # Australian Dollar (AUD)
  AUD

  # Aruban Guilder (AWG)
  AWG

  # Azerbaijan Manat (AZN)
  AZN

  # Bosnian Convertible Mark (BAM)
  BAM

  # Barbados Dollar (BBD)
  BBD

  # Bangladeshi Taka (BDT)
  BDT

  # Bulgarian Lev (BGN)
  BGN

  # Bahraini Dinar (BHD)
  BHD

  # Burundi Franc (BIF)
  BIF

  # Bermudian Dollar (BMD)
  BMD

  # Brunei Dollar (BND)
  BND

  # Bolivian Boliviano (BNB)
  BOB

  # Brazilian Real (BRL)
  BRL

  # Bahamian Dollar (BSD)
  BSD

  # Bhutan Ngultrum (BTN)
  BTN

  # Botswana Pula (BWP)
  BWP

  # Belarusian Ruble (BYN)
  BYN

  # Belize Dollar (BZD)
  BZD

  # Canadian Dollar (CAD)
  CAD

  # Dem. Republic, Congo Franc Congolais (CDF)
  CDF

  # Swiss Franc (CHF)
  CHF

  # Chilean Peso (CLP)
  CLP

  # Chinese Yuan Renminbi (CNY)
  CNY

  # Colombian Peso (COP)
  COP

  # Costa Rican Colon (CRC)
  CRC

  # Cuban Convertible Peso (CUC)
  CUC

  # Cuban Peso (CUP)
  CUP

  # Cape Verde Escudo (CVE)
  CVE

  # Czech Koruna (CZK)
  CZK

  # Djibouti Franc (DJF)
  DJF

  # Danish Krone (DKK)
  DKK

  # Dominican Peso (DOP)
  DOP

  # Algerian Dinar (DZD)
  DZD

  # Estonian Kroon (EEK)
  EEK

  # Egyptian Pound (EGP)
  EGP

  # Eritrean Nakfa (ERN)
  ERN

  # Ethiopian Birr (ETB)
  ETB

  # Euro (EUR)
  EUR

  # Fiji Dollar (FJD)
  FJD

  # Falkland Islands Pound (FKP)
  FKP

  # Pound Sterling (GBP)
  GBP

  # Georgian Lari (GEL)
  GEL

  # Ghanaian Cedi (GHS)
  GHS

  # Gibraltar Pound (GIP)
  GIP

  # Gambian Dalasi (GMD)
  GMD

  # Guinea Franc (GNF)
  GNF

  # Guatemalan Quetzal (GTQ)
  GTQ

  # Guyana Dollar (GYD)
  GYD

  # Hong Kong Dollar (HKD)
  HKD

  # Honduran Lempira (HNL)
  HNL

  # Croatian Kuna (HRK)
  HRK

  # Haitian gourde (HTG)
  HTG

  # Hungarian Forint (HUF)
  HUF

  # Indonesian Rupiah (IDR)
  IDR

  # New Israeli Shekel (ILS)
  ILS

  # Indian Rupee (INR)
  INR

  # Iraqi Dinar (IQD)
  IQD

  # Iranian rial (IRR)
  IRR

  # Iceland Krona (ISK)
  ISK

  # Jamaican Dollar (JMD)
  JMD

  # Jordanian Dinar (JOD)
  JOD

  # Japanese Yen (JPY)
  JPY

  # Kenyan Shilling (KES)
  KES

  # Kyrgyzstani Som (KGS)
  KGS

  # Cambodian Riel (KHR)
  KHR

  # Comoro Franc (KMF)
  KMF

  # North Korean Won (KPW)
  KPW

  # South Korean Won (KRW)
  KRW

  # Kuwaiti Dinar (KWD)
  KWD

  # Cayman Islands Dollar (KYD)
  KYD

  # Kazahstan Tenge (KYD)
  KZT

  # Lao Kip (LAK)
  LAK

  # Lebanese Pound (LBP)
  LBP

  # Sri Lanka Rupee (LKR)
  LKR

  # Liberian Dollar (LRD)
  LRD

  # Lesotho Loti (LSL)
  LSL

  # Lithuanian Litas (LTL)
  LTL

  # Latvian Lats (LVL)
  LVL

  # Libyan Dinar (LYD)
  LYD

  # Malagasy Franc (MAD)
  MAD

  # Moldovan Leu (MDL)
  MDL

  # Malagasy Ariary (MGA)
  MGA

  # Macedonian Denar (MKD)
  MKD

  # Myanmar Kyat (MMK)
  MMK

  # Mongolian Tugrik / Tugrug (MNT)
  MNT

  # Macanese Pataca (MOP)
  MOP

  # Mauritanian Ouguiya (MRO)
  MRO

  # Mauritanian Ouguiya (MRU)
  MRU

  # Mauritius Rupee (MUR)
  MUR

  # Maldivian Rufiyaa (MVR)
  MVR

  # Malawi Kwacha (MWK)
  MWK

  # Mexican Peso (MXN)
  MXN

  # Malaysian Ringgit (MYR)
  MYR

  # Mozambican metical (MZN)
  MZN

  # Namibia Dollar (Rand)
  NAD

  # Nigerian Naira (NGN)
  NGN

  # Nicaraguan Cordoba Oro (NIO)
  NIO

  # Norwegian Krone (NOK)
  NOK

  # Nepalese Rupee (NPR)
  NPR

  # New Zealand Dollar (NZD)
  NZD

  # Omani Rial (OMR)
  OMR

  # Panamanian Balboa (PAB)
  PAB

  # Peruvian Nuevo Sol (PEN)
  PEN

  # Papua New Guinean Kina (PGK)
  PGK

  # Philippine Peso (PHP)
  PHP

  # Pakistani Rupee (PKR)
  PKR

  # Zloty (PLN)
  PLN

  # Paraguay Guarani (PYG)
  PYG

  # Qatari Rial (QAR)
  QAR

  # Romanian New Leu (RON)
  RON

  # Serbian Dinar (RSD)
  RSD

  # Russian Rubble (RUB)
  RUB

  # Russian Ruble (RUR)
  RUR

  # Rwandan Franc (RWF)
  RWF

  # Salvadoran Colon (SVC)
  SVC

  # Saudi Riyal (SAR)
  SAR

  # Solomon Islands Dollar (SBD)
  SBD

  # Seychellois Rupee (SCR)
  SCR

  # Sudanese Pound (SDG)
  SDG

  # Swedish Krona (SEK)
  SEK

  # Singapore Dollar (SGD)
  SGD

  # Saint Helena Pound (SHP)
  SHP

  # Sierra Leone Leone (SLL)
  SLL

  # Somali Shilling (SOS)
  SOS

  # Surinamese Dollar (SRD)
  SRD

  # South Sudanese Pound (SSP)
  SSP

  # Sao Tome and Principe Dobra (STD)
  STD

  # Sao Tome and Principe Dobra (STN)
  STN

  # Syrian Pound (SYP)
  SYP

  # Swaziland Lilangeni (SZL)
  SZL

  # Baht (THB)
  THB

  # Tajikistan Somoni (TJS)
  TJS

  # Turkish Lira (TL)
  TL

  # Turkmen Manat (TMT)
  TMT

  # Tunisian Dinar (TND)
  TND

  # Tongan Paʻanga (TOP)
  TOP

  # New Turkish Lira (TRY)
  TRY

  # Trinidad and Tobago Dollar (TTD)
  TTD

  # New Taiwan Dollar (TWD)
  TWD

  # Tanzanian Shilling (TZS)
  TZS

  # Ukrainian Hryvnia (UAH)
  UAH

  # Uganda Shilling (UGX)
  UGX

  # US Dollar (USD)
  USD

  # Uruguayan Peso Uruguayo (UYU)
  UYU

  # Uzbekistani Som (UZS)
  UZS

  # Venezuelan Bolivar Fuerte (VEF)
  VEF

  # Venezuelan Bolivar Soberano (VES)
  VES

  # Vietnamese Dong (VND)
  VND

  # Vanuatu Vatu (VUV)
  VUV

  # Samoan Tala (WST)
  WST

  # CFA Franc BEAC (XAF)
  XAF

  # East Caribbean Dollar (XCD)
  XCD

  # West African CFA Franc (XOF)
  XOF

  # CFP Franc (XPF)
  XPF

  # Yemeni Rial (YER)
  YER

  # South African Rand (ZAR)
  ZAR

  # Zambian Kwacha (ZMW)
  ZMW
}

# Enumeration to identify different flows of the checkout session
enum checkoutCheckoutFlow {
  # Configuration to set `client_configuration` for Link and Pay flow.
  # Setting this configuration will allow PAPS to fetch only the
  # FI which is attached to the billing agreement id
  LINK_AND_PAY
}

# Encapsulates all properties related to a CheckoutSession.
# Ex: Cart, Plans, FundingOptions, etc
type checkoutCheckoutSession {
  # The card issuers allowed to be used for a given CheckoutSession.
  # An array of CardIssuerType enums.
  #
  # Optionally pass a CountryCode if you want to be explicit, otherwise defaults
  # to node locale resolution that provides best guess based on user information, LANG cookie, etc
  #
  # Average SLA response time -- 250ms
  #
  # Required auth states: Any
  allowedCardIssuers(country: checkoutCountryCodes): [checkoutCardIssuerType]

  # The card product classes will be used to find whether a card is DEBIT/CREDIT/etc.
  # An array of CardProductClass enums.
  #
  # Required auth states: Any
  cardProductClasses: [checkoutInstrumentClassification]!

  # Return state of checkout Session
  # Average SLA response time - 1750ms
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  state: checkoutCheckoutSessionState

  # A Checkout session's billing addresses.
  # An Array of CheckoutBillingAddress types.
  #
  # Average SLA response time -- 30ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  billingAddresses: [checkoutCheckoutBillingAddress]

  # A Checkout session's current potential buyer
  buyer: checkoutUser

  # A Checkout session's cart.
  # Average SLA response time - 170ms
  #
  # Optionally pass a CountryCode, otherwise defaults to node locale resolution that provides
  # best guess based on user information, LANG cookie, etc (CountryCode is necessary to
  # retrieve the max over capture amount for the transaction).
  #
  # Required auth states: Any
  cart(country: checkoutCountryCodes): checkoutCart

  # A Checkout session's application data flags.
  # Average SLA response time - 40ms
  #
  # Required Roles: See CheckoutSessionFlags
  flags: checkoutCheckoutSessionFlags

  # Most recent declined instrument for the current checkout session.
  declinedInstruments: [checkoutDeclinedInstrument]

  # Disallowed funding instruments for the given checkout session.
  disallowedInstruments: [checkoutDisallowedInstrument]

  # A Checkout session's funding options, which lists the options the buyer has to pay for the transaction.
  #
  # Average SLA response time - 1750ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  fundingOptions(
    # If set to `false`, only funding options that have a plan with just the funding
    # instrument will be surfaced. Funding options that can only be used in combination
    # with other funding sources will not be returned. This excludes some cases of
    # split balance and incentives, where the instrument can only be used with the
    # split balance or incentives.
    #
    # If set to `true`, all options will be returned. This is needed if you want to
    # handle all split balance and incentives use cases.
    returnAllPlans: Boolean

    # For these instrument types, the plans will contain a consolidated funding source and the
    # individual sources would be available in the `groupedSources` type
    groupSourcesOnType: [checkoutFundingOptionGroupingType]
  ): [checkoutFundingOption]

  # A Checkout session's locale.
  #
  # Required auth states: Any
  locale: checkoutCheckoutLocale

  # A Checkout session's associated merchant
  merchant: checkoutMerchant!

  # Credit metadata. For instance credit flags, settings and tools tips
  creditMeta: checkoutCreditMeta!

  # A Checkout session's PPC credit marketing offers.
  # Average SLA response time - 50ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  creditPPCOffers(
    # We need to pass whether or not cookies are enabled for the client from the front-end to Personalization Studio
    areCookiesDisabled: Boolean

    # The checkout UI is running in iframe or not, pass to Personalization Studio
    isIframe: Boolean

    # Specifies offers can be served from credit offer cache. Defaults to false
    allowCache: Boolean

    # Specifies merchant app version.
    merchantAppVersion: String

    # If true, qualifying AND non-qualifying offers will be returned.
    # If false, only qualifying offers will be returned.
    # Defaults to false
    allowNonQualifyingOffers: Boolean
  ): [checkoutCreditPPCOffer]

  # A Checkout session's credit as FI marketing offers.
  # Average SLA response time - 50ms - (This might change)
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  creditAsFIOffers(
    # We need to pass whether or not cookies are enabled for the client from the front-end to Personalization Studio
    areCookiesDisabled: Boolean

    # The checkout UI is running in iframe or not, pass to Personalization Studio
    isIframe: Boolean

    # Specifies offers can be served from credit offer cache. Defaults to false
    allowCache: Boolean
  ): [checkoutCreditAsFIOffer]

  # A Checkout session's selected credit financing option that was patched to the cart.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  creditFinancingOption: checkoutCreditFinancingOption

  # Integration details for portable credit applications.
  # Average SLA response time - ??ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  creditApplyPortableIntegration(
    selectedCRCOffer: checkoutSelectedCRCOffer
    selectedShippingAddressId: String
    selectedCRCfi: checkoutSelectedCRCfi
    selectedContinueGPLInterstitial: Boolean
    downsellOfferId: String
  ): checkoutCreditApplyPortable

  # A checkout session's giving recommendation.
  # Average SLA response time - 50ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  suggestedDonation: checkoutSuggestedDonation

  # A Checkout session's payment contingencies
  paymentContingencies: checkoutPaymentContingencies

  # A Checkout session's shipping addresses.
  # An Array of CheckoutShippingAddress types.
  # Average SLA response time - 1750ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  shippingAddresses: [checkoutCheckoutShippingAddress]

  # Indicates if it's a Continue or Pay Now checkout flow.
  userAction: checkoutCheckoutUserAction!

  # Returns type of checkout session: BILLING_WITH_PURCHASE, BILLING_WITHOUT_PURCHASE, PURCHASE.
  checkoutSessionType: checkoutCheckoutSessionType

  # Optionally takes a list of offer program names (enums).
  # Returns a list of offers the user is eligible for,
  # non eligible offers will not be listed.
  offers(type: [checkoutOfferPrograms!]): [checkoutOffer]!

  # Returns an array of payees.
  payees: [checkoutPayee]

  # Provides the user's current SCA status and exemption reason, if any
  secureCustomerAuthenticationContext: checkoutSecureCustomerAuthenticationContext

  # Returns a list of eligible `SplitFundingOption`s
  splitFundingOptions: [checkoutSplitFundingOptions]

  # Returns an array of allowed card brands and corresponding supported bank issuers array returned by IDS.
  # Card brands and bank issuers may vary by user's country and merchant's country.
  # Separated from allowedCardIssuers - returned by PAPS and only returns supported card brands.
  #
  # IDS also returns funding sources' logo image urls
  supportedFundingSources(
    userCountry: checkoutCountryCodes
  ): [checkoutSupportedFundingSource]

  # Returns all properties related to a completed payment
  completedPaymentInfo: checkoutCompletedPaymentInfo

  # Quote of the live value of a given crypto funding instrument, valid for 30 seconds.
  # Values returned are based on the amount of crypto the user has for that holding, and the amount that the user is
  # using in the purchase.
  cryptocurrencyQuotes(
    symbols: [checkoutCryptocurrencySymbol]!
    amount: checkoutAmountInput!
  ): [checkoutCryptocurrencyQuote]

  # Returns all credit offers available to users who are not PayPal members
  #
  # countryCode - The country code of the buyer (e.g. US)
  # languageCode - The language code of the buyer (e.g. en). If not provided it will be resolved via req.locality.
  nonMemberCreditOffers(
    countryCode: checkoutCountryCodes!
    languageCode: checkoutCheckoutContentLanguageCode
  ): checkoutNonMemberCreditOffers

  # Existing Billing Agreement Details
  # Migrated from billingnodeserv for billing without purchase flow
  existingBillingAgreementDetails: checkoutExistingBillingAgreementDetails
}

# An enumeration of State of Checkout Session. NOT_PAYABLE, PAYABLE, PAID
enum checkoutCheckoutSessionState {
  # NON_PAYABLE. Session Not Authorised & has contingencies or error for approving the call
  NON_PAYABLE

  # PAYABLE. Session is eligible for ApprovePayment Call
  PAYABLE

  # APPROVED. Session is Approved & DoEC can be called
  APPROVED

  # PAID. Money Movemement has happened
  PAID
}

# Encapsulates all properties related to a billing address which is extend from our
# generic Address type
#
# Ex: line1, city, state, postalCode, fullAddress, etc.
type checkoutCheckoutBillingAddress implements checkoutAddress {
  # A billing address ID (Ex: '285166')
  addressId: String

  # A billing address first line street address (Ex: '2211 North 1st St')
  line1: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine1 instead for portable format."
    )

  # A billing address second line street address (Ex: 'Apt 123')
  line2: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine2 instead for portable format."
    )

  # A billing address city (Ex: 'San Jose')
  city: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea2 instead for portable format."
    )

  # A billing address state/province (Ex: 'CA')
  state: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea1 instead for portable format."
    )

  # A billing address postal code (Ex: '95131')
  postalCode: String

  # A billing address two-letter country code (Ex: 'US')
  country: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use countryCode instead for portable format."
    )

  # A billing address on a single line
  # (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String

  # Portable address: An address first line street address
  addressLine1: String

  # Portable address: An address second line street address
  addressLine2: String

  # Portable address: An address third line street address
  addressLine3: String

  # Portable address: An address first line admin area
  adminArea1: String

  # Portable address: An address second line admin area
  adminArea2: String

  # Portable address: An address third line admin area
  adminArea3: String

  # Portable address: An address forth line admin area
  adminArea4: String

  # Portable address: An address two-letter country code
  countryCode: String

  # Indicates a billing address is selected or not.
  isSelected: Boolean
}

# Encapsulates all properties related to a User.
# Ex: Name, Addresses, Profile Photos, etc.
# Average SLA response time - 70ms
#
# Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
type checkoutUser {
  # User ID (or an encrypted account number) Average SLA response time - 70ms
  userId: String

  # A User's addresses, an Array of UserAddress types.
  # Optionally, you can query by address type (AddressType).
  # Otherwise, all addresses are returned.
  # Average SLA response time - 70ms
  addresses(type: checkoutAddressType): [checkoutUserAddress]

  # A User's email address. Average SLA response time - 70ms
  email: checkoutEmail

  # A user's locale. Average SLA response time - 70ms
  locale: checkoutGenericLocale

  # A User's name. Average SLA response time - 70ms
  name: checkoutPersonName

  # A User's phone numbers, an Array of GenericPhone types.
  # Optionally, you can query by phone type (PhoneType).
  # Otherwise, all phone numbers are returned.
  # Average SLA response time - 70ms
  phones: [checkoutGenericPhone]

  # A User's profile image, a ProfileImage type.
  # You can query by width, height, or type (ProfileImageType).
  # Average SLA response time - 80ms
  profileImage(
    width: Int
    height: Int
    type: checkoutProfileImageType
  ): checkoutProfileImage

  # A User's profile images, an Array of ProfileImage types.
  # Average SLA response time - 80ms
  profileImages: [checkoutProfileImage]

  # Encapsulates all properties related to a User's auth status.
  # Ex: Access token
  auth: checkoutAuth

  # A User's edelivery consent (true - eConsent is required and missing, false - eConsent is already completed)
  # E-Sign consent is the process by which US consumers consent to have their
  # notifications and statements delivered electronically
  eConsent: Boolean

  # An Array of CheckoutBillingAddress types.
  #
  # Average SLA response time -- 30ms
  billingAddresses: [checkoutCheckoutBillingAddress]

  # If a user is eligible to hold paypal balance or not
  eligibleToHoldBalance: Boolean
}

# An enumeration of types that an Address can be. PROFILE, SHIPPING, BUSINESS, etc.
enum checkoutAddressType {
  # A business address
  BUSINESS

  # A drop-off address
  DROP_OFF

  # A gift address
  GIFT

  # A home or work address
  HOME_OR_WORK

  # A prior/inactive address
  PRIOR

  # An address associated with a user profile
  PROFILE

  # A shipping address
  SHIPPING

  # A verisign address
  VERISIGN
}

# Encapsulates all properties related to a user's address.
# Ex: line1, city, state, postalCode, fullAddress, isDefaultBilling, etc.
type checkoutUserAddress implements checkoutAddress {
  # An Address ID (Ex: '285166')
  addressId: String

  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String

  # An Address second line street address (Ex: 'Apt 123')
  line2: String

  # An Address city (Ex: 'San Jose')
  city: String

  # An Address state/province (Ex: 'CA')
  state: String

  # An Address postal code (Ex: '95131')
  postalCode: String

  # An Address on a single line (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String

  # An Address two-letter country code (Ex: 'US')
  country: String

  # An Address is selected. If you are listing out addresses in a UI, and need to
  # show that an address is selected, use this property.
  isSelected: Boolean

  # If an Address is the primary address
  isPrimary: Boolean

  # If an Address is the default billing address
  isDefaultBilling: Boolean

  # If an Address is the default shipping address
  isDefaultShipping: Boolean

  # Type of Address (Ex: 'SHIPPING').  See AddressType enum.
  type: checkoutAddressType
}

# Encapsulates all properties related to an email. Ex: url, width, height
type checkoutEmail {
  # The local-part of the e-mail address (Ex: 'user')
  localPart: String

  # The domain of the e-mail address (Ex: domain.com)
  domainPart: String

  # The full e-mail address (Ex: user@domain.com)
  stringValue: String
}

# Encapsulates all properties related to a locale. GenericLocale should be used
# for most use cases. CheckoutLocale should be used for Checkout specific use
# cases. Ex: country, language, directionality, etc.
type checkoutGenericLocale implements checkoutLocale {
  # A locale's country (Ex: 'US')
  country: String

  # A locale's language (Ex: 'en')
  language: String

  # A locale's culture (Ex: 'en-US')
  culture: String

  # A locale's locale (Ex: 'en_US')
  locale: String

  # A locale's directionality (Ex: 'ltr')
  directionality: checkoutDirectionality
}

# The Locale interface encapsulates all properties related to a locale.
# Ex: country, language, directionality, etc.
interface checkoutLocale {
  # A locale's country (Ex: 'US')
  country: String

  # A locale's language (Ex: 'en')
  language: String

  # A locale's culture (Ex: 'en-US')
  culture: String

  # A locale's locale (Ex: 'en_US')
  locale: String

  # A locale's directionality (Ex: 'ltr')
  directionality: checkoutDirectionality
}

# An enumeration of values that language directionality can be. LTR or RTL
enum checkoutDirectionality {
  # Left-to-right
  LTR

  # Right-to-left
  RTL
}

# Encapsulates all properties related to a person's name.
# Ex: givenName, middleName, familyName, fullName, etc.
type checkoutPersonName {
  # A person's salutation (Ex: 'Mr')
  salutation: String

  # A person's given name, or first name (Ex: 'William')
  givenName: String

  # A person's middle name (Ex: 'Alan')
  middleName: String

  # A person's family name, or last name (Ex: 'Doe')
  familyName: String

  # A person's suffix (Ex: 'Jr')
  suffix: String

  # A person's full name (Ex: 'Mr. William Alan Doe, Jr.')
  fullName: String

  # A person's informal name (Ex: 'Javier')
  informalName: String
}

# Encapsulates all properties related to a generic phone number.
# Ex: countryCode, nationalNumber, type, national, international, etc.
type checkoutGenericPhone {
  # A country code associated with a phone number (Ex: '1')
  countryCode: String

  # An unformatted phone number (Ex: '2015550123')
  number: String

  # A national representation of a phone number (Ex: '(201) 555-0123')
  national: String

  # A national (obscured) representation of a phone number (Ex: '(2**) ***-0123')
  nationalObscured: String

  # An international representation of a phone number (Ex: '+1 201-555-0123')
  international: String

  # An E164 representation of a phone number (Ex: '+12015550123')
  e164: String

  # An RFC3966 representation of a phone number (Ex: 'tel:+1-201-555-0123')
  rfc3966: String

  # Whether or not a phone is marked as active
  isActive: Boolean

  # Whether or not a phone is marked as primary
  isPrimary: Boolean

  # Type of phone (Ex: 'MOBILE').  See PhoneType enum.
  type: checkoutPhoneType
}

# An enumeration of types that an Phone can be. MAIN, WORK, MOBILE, FAX, OTHER
enum checkoutPhoneType {
  # Phone is a main phone
  MAIN

  # Phone is a work phone
  WORK

  # Phone is a mobile phone
  MOBILE

  # Phone is a fax phone
  FAX

  # Phone is another type of phone
  OTHER
}

# An enumeration of types that ProfileImage can have.
#
# See: https://engineering.paypalcorp.com/confluence/display/PayPalMediaService/Image+Request+Metadata+Data#ImageRequestMetadataData-ImageIds
enum checkoutProfileImageType {
  # 32x32
  XXS

  # 64x64
  XS

  # 96x96
  S

  # 200x200
  M

  # 300x300
  L

  # 400x400
  XL

  # 500x500
  XXL

  # 800x800
  XXXL

  # 96x96
  SIZE_0

  # 400x400
  SIZE_1

  # 200x200
  SIZE_2

  # 800x800
  SIZE_3

  # 640x480
  SIZE_4

  # 100x75
  SIZE_5

  # 70x70
  SIZE_6

  # 150x150
  SIZE_7

  # 400x300
  SIZE_8

  # 200x150
  SIZE_9

  # 9999x9999
  SIZE_10

  # 310x90
  SIZE_11

  # 500x500
  SIZE_12

  # 120x42
  SIZE_13

  # 64x64
  SIZE_14

  # 225x125
  SIZE_15

  # 400x300
  SIZE_16

  # 80x80
  SIZE_17

  # 800x600
  SIZE_20

  # 60x60
  SIZE_22

  # 80x80
  SIZE_23

  # 298x298
  SIZE_24

  # 140x140
  SIZE_26

  # 180x60
  SIZE_28

  # 900x300
  SIZE_29

  # 300x115
  SIZE_30

  # 300x225
  SIZE_31

  # 1600x1600
  SIZE_32

  # 48x48
  SIZE_33

  # 50x50
  SIZE_34

  # 300x300
  SIZE_35

  # 150x40
  SIZE_36

  # 175x175
  SIZE_37

  # 115x115
  SIZE_38

  # 32x32
  SIZE_39

  # 80x60
  SIZE_40

  # 467x467
  SIZE_41

  # 225x70
  SIZE_42

  # 221x330
  SIZE_43

  # 425x34
  SIZE_44

  # 1200x1200
  SIZE_45

  # 623x290
  SIZE_47

  # 1024x1024
  SIZE_48

  # 200x170
  SIZE_49

  # 100x85
  SIZE_50

  # 90x90
  SIZE_51

  # 132x123
  SIZE_52

  # 190x100
  SIZE_53

  # 122x122
  SIZE_54

  # 286x214
  SIZE_55

  # 100x100
  SIZE_56

  # 1600x1600
  SIZE_57

  # 640x640
  SIZE_58

  # 960x960
  SIZE_59

  # 225x225
  SIZE_62

  # 300x120
  SIZE_65

  # 82x35
  SIZE_66

  # 728x90
  SIZE_67

  # 256x35
  SIZE_68

  # 120x60
  SIZE_69

  # 64x35
  SIZE_70

  # 55x55
  SIZE_71

  # 500x375
  SIZE_72

  # 65x65
  SIZE_73

  # 135x115
  SIZE_74

  # 430x325
  SIZE_75

  # 400x320
  SIZE_76

  # 72x54
  SIZE_77

  # 75x56
  SIZE_78

  # 320x240
  SIZE_79

  # 600x450
  SIZE_80

  # 92x72
  SIZE_81

  # 147x147
  SIZE_82

  # 358x358
  SIZE_83

  # 498x498
  SIZE_84

  # 726x726
  SIZE_85

  # 70x53
  SIZE_87

  # 175x130
  SIZE_88

  # 600x500
  SIZE_89

  # 220x220
  SIZE_90

  # 276x276
  SIZE_91

  # 560x420
  SIZE_92

  # 360x480
  SIZE_93

  # 280x210
  SIZE_94

  # 180x240
  SIZE_95

  # 205x75
  SIZE_96

  # 90x90
  SIZE_97

  # 180x170
  SIZE_98

  # 650x412
  SIZE_100

  # 107x88
  SIZE_101

  # 247x187
  SIZE_102

  # 180x180
  SIZE_103

  # 720x215
  SIZE_104

  # 980x340
  SIZE_105

  # 160x160
  SIZE_106

  # 1000x1000
  SIZE_107

  # 250x90
  SIZE_109

  # 462x360
  SIZE_110

  # 225x155
  SIZE_111

  # 225x195
  SIZE_112

  # 450x450
  SIZE_113

  # 67x67
  SIZE_114

  # 216x216
  SIZE_115

  # 250x250
  SIZE_116

  # 190x190
  SIZE_117

  # 275x275
  SIZE_118

  # 110x110
  SIZE_119

  # 170x170
  SIZE_120

  # 135x135
  SIZE_121

  # 440x420
  SIZE_134

  # 275x375
  SIZE_135

  # 120x80
  SIZE_136

  # 200x64
  SIZE_137

  # 200x42
  SIZE_138

  # 380x380
  SIZE_139

  # 1134x700
  SIZE_140

  # 156x156
  SIZE_141

  # 112x76
  SIZE_142
}

# Encapsulates all properties related to a profile image.
# Ex: url, profileImageType, width, height
type checkoutProfileImage implements checkoutImage {
  # A profile image's URL.  A URL type.
  url: checkoutGenericURL

  # A profile image's type. A ProfileImageType type.
  type: checkoutProfileImageType

  # A profile image's width
  width: String

  # A profile image's height
  height: String
}

# The Image interface encapsulates all properties related to an image.
# Ex: url, width, height
interface checkoutImage {
  # An Image's URL.
  url: checkoutGenericURL

  # The width of the image
  width: String

  # The height of the image
  height: String
}

# Encapsulates all properties related to a URL.
# Ex: protocol, host, port, hostname, query, href, etc.
# See https://nodejs.org/api/url.html#url_class_url for more details.
type checkoutGenericURL implements checkoutURL {
  # Protocol property of the URL (Ex: https:)
  protocol: String

  # If true, two forward slashes are required following the colon in the protocol
  slashes: Boolean

  # Username/password portion of the URL (Ex: user:pass)
  auth: String

  # Full lower-cased host portion of the URL (Ex: google.com:8000)
  host: String

  # Numeric port portion of the URL (Ex: 8000)
  port: String

  # Hostname portion of the URL.  Does not contain a port. (Ex: google.com)
  hostname: String

  # Fragment portion of the URL including the leading ASCII hash (#) character. (Ex: #hash)
  hash: String

  # Search property consists of the entire 'query string' portion of the URL,
  # including the leading ASCII question mark (?) character. (Ex: ?key=value)
  search: String

  # Query string of the URL.  Does not include the leading question mark (?) character. (Ex: key=value)
  query: String

  # Query params of the URL, as an Object
  queryParams: checkoutJSON

  # Path portion of the URL, but does not include the query string. (Ex: /path)
  pathname: String

  # Path portion of the URL which includes the query string. (Ex: /path?key=value)
  path: String

  # The serialized, full URL with all properties included. (Ex: https://google.com/path?key=value#hash)
  href: String
}

# Encapsulates all properties related to a URL.
# Ex: protocol, host, port, hostname, query, href, etc.
# See https://nodejs.org/api/url.html#url_class_url for more details.
interface checkoutURL {
  # Protocol property of the URL (Ex: https:)
  protocol: String

  # If true, two forward slashes are required following the colon in the protocol
  slashes: Boolean

  # Username/password portion of the URL (Ex: user:pass)
  auth: String

  # Full lower-cased host portion of the URL (Ex: google.com:8000)
  host: String

  # Numeric port portion of the URL (Ex: 8000)
  port: String

  # Hostname portion of the URL.  Does not contain a port. (Ex: google.com)
  hostname: String

  # Fragment portion of the URL including the leading ASCII hash (#) character. (Ex: #hash)
  hash: String

  # Search property consists of the entire 'query string' portion of the URL,
  # including the leading ASCII question mark (?) character. (Ex: ?key=value)
  search: String

  # Query string of the URL.  Does not include the leading question mark (?) character. (Ex: key=value)
  query: String

  # Query params of the URL, as an Object
  queryParams: checkoutJSON

  # Path portion of the URL, but does not include the query string. (Ex: /path)
  pathname: String

  # Path portion of the URL which includes the query string. (Ex: /path?key=value)
  path: String

  # The serialized, full URL with all properties included. (Ex: https://google.com/path?key=value#hash)
  href: String
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar checkoutJSON

# Encapsulates all properties related to a User's auth.
# Ex: Access token
# Average SLA response time - x ms
#
# Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
type checkoutAuth {
  # A user's access token
  accessToken: String

  # A user's refresh token
  refreshToken: String

  # A user's id token
  idToken: String

  # A user's auth code
  authCode: String

  # Url to run user through connect flow
  connectUrl(
    token: String!
    scopes: [String]!
    fundingSource: String
    billingType: String
    payerId: String
  ): checkoutGenericURL
}

# Encapsulates all properties related to a Cart.
# Ex: cancelUrl, returnUrl, merchant, total, etc.
# Average SLA response time - 170ms
type checkoutCart {
  # Cart's ID (Ex: '9CH70521YP797774F')
  cartId: String

  # Billing token, for billing agreement transactions (Ex: 'BA-12345678901234567')
  billingToken: String

  # Billing type, for billing agreement transactions (Ex: 'MERCHANT_INITIATED_BILLING', 'CHANNEL_INITIATED_BILLING')
  billingType: checkoutBillingType

  # Billing intent, for billing without purchase flow integration (Ex: 'VAULT')
  billingIntent: checkoutBillingIntent

  # Billing Charge pattern, for billing agreement transactions (Ex: 'IMMEDIATE', 'DEFERRED')
  billingChargePattern: checkoutBillingChargePattern

  # Consent code, is part of oAuth context from merchant
  consentCode: String

  # Payment ID, if transaction has one. (Ex: 'PAY-12345678901234567')
  paymentId: String

  # A Cart's amounts.
  amounts: checkoutCartAmounts

  # A Cart's description.
  description: String

  # A Cart's associated shipping address passed by merchant.
  shippingAddress: checkoutCartShippingAddress

  # A Cart's associated billing address passed by merchant.
  billingAddress: checkoutCartAddress

  # A Cart's associated shipping options passed by merchant.
  shippingMethods: [checkoutCartShippingMethod]

  # Cart's associated phone number passed by the merchant (Ex: '1112223333')
  # Returns international phone format
  formattedPhoneNumber(
    shouldValidate: Boolean = true
    useInternationalFormat: Boolean = true
  ): String

  # Cart's associated phone number passed by the merchant (Ex: '1112223333')
  # If shouldValidate is true then only numbers that pass validation will be returned
  phoneNumber(
    stripDialingCode: Boolean = false
    shouldValidate: Boolean = true
  ): String

  # Cart's associated email passed by the merchant (Ex: dev@paypal.com)
  email: checkoutEmail

  # Cart's cancel URL (Ex: www.merchant.com/cancel.html)
  cancelUrl: checkoutGenericURL

  # Cart's intent (Ex: 'SALE').
  intent: checkoutCartIntent

  # A Cart's items.
  items: [checkoutCartItem]

  # The seller supplied note to the buyer.
  noteToBuyer: String

  # Cart's return URL (Ex: www.merchant.com/thanks.html)
  returnUrl: checkoutGenericURL

  # Cart's soldout URL (Ex: www.merchant.com/soldout.html)
  soldoutUrl: String

  # Cart's sold out flag, when sold out page should be presented
  showSoldoutPage: Boolean

  # Cart's state (Ex: 'CREATED')
  state: checkoutCartState

  # A Cart's total amount.
  total: checkoutAmount

  # Total Quantity of the items in the cart. Returns 0 for no cart items or error during calculation
  totalQuantity: String

  # Total amount we allow for over captures in a transaction. The predicted amount comes from PAPS -> EDM
  totalAllowedOverCaptureAmount: checkoutAmount

  # Items' category in the Cart. (e.g. PHYSICAL, DIGITAL, DONATION)
  category: checkoutCartCategory

  # A payer information sellers supply when creating the checkout session
  payer: checkoutSuppliedUserInfo

  # All payees information
  payees: [checkoutPayee]
    @deprecated(
      reason: "Cart.payees has been deprecated because it is not related to cart specific data. Use CheckoutSession.payees instead."
    )

  # Supplementary Data in the Cart
  supplementary: checkoutSupplementary

  # A Cart's associated buyer.
  # Required Roles: LOGGEDIN, REMEMBERED, IDENTIFIED
  # A Cart's associated shipping address passed by merchant.
  buyer: checkoutUser
    @deprecated(
      reason: "Cart.buyer has been deprecated because it is not related to cart specific data. Use CheckoutSession.buyer instead."
    )
}

# Enumeration to identify different billing types
enum checkoutBillingType {
  # Partner initiated billing type.
  CHANNEL_INITIATED_BILLING

  # Merchant initiated billing type. Default billing type
  MERCHANT_INITIATED_BILLING

  # Merchant initiated billing type but agreement already exists between buyer and merchant
  MERCHANT_INITIATED_SINGLE_BILLING

  # Partner initiated billing type
  CHANNEL_INITIATED_BILLING_SINGLE_AGREEMENT
}

# An enumeration of types that a BillingIntent can be.
enum checkoutBillingIntent {
  # VAULT integration
  VAULT

  # All Other integrations
  OTHER
}

# Enumeration to identify different billing charge patterns
# The pattern in which the agreement will be used for charging.
enum checkoutBillingChargePattern {
  # Pay after use, non-recurring post-paid, variable amount, irregular frequency.
  DEFERRED

  # On-demand instant payments – non-recurring , pre-paid, variable amount, variable frequency.
  IMMEDIATE

  # Pay on a fixed date based on usage or consumption after the goods/service is delivered.
  RECURRING_POSTPAID

  # Pay upfront fixed or variable amount on a fixed date before the goods/service is delivered.
  RECURRING_PREPAID

  # Charge payer when the set amount is reached or monthly billing cycle,
  # whichever comes first, after the goods/service is delivered.
  THRESHOLD_POSTPAID

  # Charge payer when the set amount is reached or monthly billing cycle,
  # whichever comes first, before the goods/service is delivered.
  THRESHOLD_PREPAID
}

# Encapsulates all properties related to a cart item.
# Ex: description, quantity, amount
# Average SLA response time - 170ms
type checkoutCartAmounts {
  # A Cart's discount.
  discount: checkoutAmount

  # A Cart's handling fee.
  handlingFee: checkoutAmount

  # A Cart's insurance fee.
  insurance: checkoutAmount

  # A Cart's Insurance and handling fee combined
  insuranceAndHandling: checkoutAmount

  # A Cart's shipping fee.
  shipping: checkoutAmount

  # A Cart's combined shipping and handling fee. A sum of the shipping fee (with
  # shipping discount applied) and the handling fee.
  shippingAndHandling: checkoutAmount

  # A Cart's shipping discount.
  shippingDiscount: checkoutAmount

  # A Cart's Shipping and Shipping Discount
  shippingAndShippingDiscount: checkoutAmount

  # A Cart's subtotal amount.
  subtotal: checkoutAmount

  # A Cart's tax amount.
  tax: checkoutAmount

  # Flag indicating when to hide amount details
  hideAmountDetails: Boolean

  # A Cart's total amount.
  total: checkoutAmount
}

# Encapsulates all properties related to an Amount.
# Ex: currencySymbol, currencyValue, currencyCode, etc.
type checkoutAmount {
  # Amount's currency code (Ex: 'USD', 'HUF')
  currencyCode: checkoutSupportedCountryCurrencies

  # Amount's formatted currency symbol and value (Ex: '$0.01', 'Ft10')
  currencyFormat: String

  # Amount's formatted currency symbol, value, and code (Ex: '$0.01 USD', 'Ft10 HUF')
  currencyFormatSymbolISOCurrency: String

  # Amount's currency symbol (Ex: '$', 'Ft')
  currencySymbol: String

  # Amount's currency value without format(Ex: '0.01', 10.00')
  currencyValue: String
}

# Encapsulates all properties related to a shipping address
# attached to a cart by merchant
type checkoutCartShippingAddress {
  # Buyer's first name (Ex: 'John')
  firstName: String

  # Buyer's last name (Ex: 'Smith')
  lastName: String

  # A shipping address first line street address (Ex: '2211 North 1st St')
  line1: String

  # A shipping address second line street address (Ex: 'Apt 123')
  line2: String

  # A shipping address city (Ex: 'San Jose')
  city: String

  # A shipping address state/province (Ex: 'CA')
  state: String

  # A shipping address postal code (Ex: '95131')
  postalCode: String

  # A shipping address two-letter country code (Ex: 'US')
  country: checkoutCountryCodes

  # Address is full address
  isFullAddress: Boolean

  # Flag for ship to store
  isStoreAddress: Boolean
}

# Encapsulates all properties related to a address
# attached to a cart by merchant
type checkoutCartAddress {
  # Buyer's first name (Ex: 'John')
  firstName: String

  # Buyer's last name (Ex: 'Smith')
  lastName: String

  # A shipping address first line street address (Ex: '2211 North 1st St')
  line1: String

  # A shipping address second line street address (Ex: 'Apt 123')
  line2: String

  # A shipping address city (Ex: 'San Jose')
  city: String

  # A shipping address state/province (Ex: 'CA')
  state: String

  # A shipping address postal code (Ex: '95131')
  postalCode: String

  # A shipping address two-letter country code (Ex: 'US')
  country: checkoutCountryCodes

  # Address is full address
  isFullAddress: Boolean
}

# Encapsulates all properties related to a shipping method.
# attached to a cart by merchant
type checkoutCartShippingMethod {
  # Unique identifier for the option
  id: String

  # Category, or type. ('SHIPPING' or 'PICKUP')
  type: checkoutShippingMethodType

  # Custom display name (Ex: '2-Day Shipping')
  label: String

  # Amount value for this method
  amount: checkoutAmount

  # Whether or not the this method is selected
  selected: Boolean
}

# Types, or categories for ShippingMethods to have.
enum checkoutShippingMethodType {
  # Ship to home address
  SHIPPING

  # Pick up at location
  PICKUP
}

# An enumeration of intents that a Cart can have. SALE, AUTHORIZE, or ORDER
enum checkoutCartIntent {
  # The Cart's intent is for Sale transactions
  SALE

  # The Cart's intent is for Capture transactions
  CAPTURE

  # The Cart's intent is for Authorization transactions. Same as AUTHORIZE.
  AUTHORIZATION

  # The Cart's intent is for Auth transactions
  AUTHORIZE

  # The Cart's intent is for Order transactions
  ORDER
}

# Encapsulates all properties related to a cart item.
# Ex: description, quantity, amount
# Average SLA response time - 170ms
type checkoutCartItem {
  # Cart item's description (Ex: 'Medium, Light Grey, V-Neck T-Shirt')
  description: String

  # Cart item's details.  Any extra metadata passed by the Merchant.
  details: checkoutJSON

  # Cart item's name (Ex: 'Wolf T-Shirt')
  name: String

  # Cart item's quantity (Ex: 1)
  quantity: Float

  # Cart item's unit price.
  unitPrice: checkoutAmount

  # Cart item's total amount.
  total: checkoutAmount

  # Cart item's number
  number: String
    @deprecated(
      reason: "Instead of using the number, use item's SKU (stock keeping unit) number instead"
    )

  # Cart item's SKU number
  sku: String

  # Set of selected options for the item. (Ex: name: 'Size', select: 'Large')
  itemOptionSelections: [checkoutItemOptionSelection]
}

# Encapsulates all properties related to an item's option selection.
type checkoutItemOptionSelection {
  # The name of option field (ex: 'Color').
  name: String!

  # The description of the selected value (ex: 'Blue') '
  description: String!
}

# An enumeration of states that a Cart can be in.
# CREATED, APPROVED, FAILED or SUBMITTED
enum checkoutCartState {
  # A Cart was created
  CREATED

  # A Cart was approved
  APPROVED

  # A Cart is failed
  FAILED

  # A Cart was submitted
  SUBMITTED
}

# An enumeration of cart category, defined by item category in the cart.
# DONATION
enum checkoutCartCategory {
  # If item category is PHYSICAL.
  PHYSICAL

  # If item category is DIGITAL.
  DIGITAL

  # If item category is DONATION.
  DONATION
}

# User's associated information passed by the merchant"
type checkoutSuppliedUserInfo {
  # Cart's associated name passed by the merchant
  name: checkoutPersonName

  # Cart's associated email passed by the merchant
  email: checkoutEmail

  # Cart's associated phone passed by the merchant
  phone: checkoutGenericPhone

  # Metadata related to the information passed by the merchant
  evaluatedUserData: checkoutGuestUserMetadata
}

# "Fields that provide additional information about a Payer"
type checkoutGuestUserMetadata {
  # "Whether a provided email address belongs to a User account"
  emailHasExistingAccount: Boolean!
}

# Data, Ex: merchantId, email of all payees in a cart"
type checkoutPayee {
  # Merchant's ID (Ex: '7VJPAEVGH7B6A')
  merchantId: String

  # Merchant's email address
  email: checkoutEmail
}

# Encapsulates all supplementary data present in the Cart.
type checkoutSupplementary {
  # The initiation intent for this cart
  initiationIntent: checkoutCartIntent
}

# Encapsulates all flags related to a Checkout session.
# Ex: isBillingAgreement, isVZeroIntegration, etc.
type checkoutCheckoutSessionFlags {
  # Indicates whether user can add a card without a billing address for the given country
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  allowAddresslessAddCard(country: checkoutCountryCodes): Boolean

  # Indicates whether the user is allowed to change payment methods
  allowChangePaymentMethod: Boolean

  # Indicates whether international shipping is blocked or not
  blockNonDomesticShipping: Boolean

  # Indicates whether non-domestic cards are blocked for the transaction.
  blockNonDomesticCards: Boolean

  # Indicates whether non-domestic transactions are blocked
  blockNonDomesticPayer: Boolean

  # Flag indicating that the buyer has given the consent for promotional emails.
  hasBuyerConsentedToPromotionalEmail: Boolean

  # Indicates when a transaction supports PayPal Credit payment installations, based on buyer and merchant eligibility.
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  hasPPCreditInstallments: Boolean

  # Indicates when the user has entered Checkout through a "PayPal Credit" button
  isCreditSecondButton: Boolean

  # Indicates when the user has entered Checkout through a "Pay Later" button
  hasPayLaterIntent: Boolean

  # Indicates the entire cart (amount and details) should be hidden.
  hideCart: Boolean

  # Indicates the cart details should be hidden.
  hideCartDetails: Boolean

  # Indicates whether the merchant has passed the hide_cart_details flag.
  hideCartDetailsFlag: Boolean

  # Indicates whether the txn is a multi seller purchase.
  isMultiSellerPurchase: Boolean

  # Predicts when the shipping address should be hidden.
  # Note: this is an optimistic flag and _usually_ means that
  # the checkout session will **not** have a selected address.
  #
  # Required auth states: Any
  hideShipping: Boolean

  # A contingency for if the 3D Secure (3DS) flow is required.
  # If required, it must be resolved before approving the payment.
  # Average SLA response time - 1750ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  is3DSecureRequired: Boolean

  # Flag indicating whether PayPal Balance is disallowed as FI or not.
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  isBalanceDisallowed: Boolean

  # A flag to check if the checkoutSession contains INCENTIVE.
  # Average SLA response time - 1750ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  isIncentivePresent: Boolean

  # Flag indicating whether the billing address of the Payer can be shared or not.
  isBillingAddressConsentRequired: Boolean

  # Whether or not a checkout session is a Billing Agreement.  A Boolean.
  #
  # Required auth states: Any
  isBillingAgreement: Boolean

  # Whether or not changing a shipping address in a Checkout session is allowed.  A Boolean.
  #
  # Required auth states: Any
  isChangeShippingAddressAllowed: Boolean

  # Whether or not sharing address with merchant is optional. A Boolean.
  # For a donation transaction, we should not share user's address unless we
  # get user's consent to do so.
  #
  # Required auth states: Any
  isOptionallyShareAddress: Boolean

  # Whether or not the current transaction is a donation.
  #
  # Required auth states: Any
  isDonation: Boolean

  # Whether or not a checkout session is a Digital Goods integration. A Boolean.
  #
  # Required auth states: Any
  isDigitalGoodsIntegration: Boolean

  # Whether or not a payment is eligible to be paid by a Guest.  A Boolean.
  #
  # Required auth states: Any
  isGuestEligible(fundingSource: checkoutButtonFundingSourceType): Boolean

  # Whether or not a payment is eligible for inlined fields by a Guest.  A Boolean.
  #
  # Required auth states: Any
  isHostedFieldsAllowed: Boolean!

  # Whether or not a payment is eligible for installments.  A Boolean.
  #
  # Required auth states: Any
  isInstallmentsEligible: Boolean

  # Indicates whether shipping address is required
  isShippingAddressRequired: Boolean

  # Whether or not a payment is eligible to be paid by a Guest that signs up.  A Boolean.
  #
  # Required auth states: Any
  isSignupEligible(fundingSource: checkoutButtonFundingSourceType): Boolean

  # Whether or not a guest is eligible for upgrade to member.  A Boolean.
  isGuestEligibleForUpgrade(
    fundingSource: checkoutButtonFundingSourceType
  ): Boolean
    @deprecated(reason: "created a new query isGuestUpgradeableToMember")

  # Whether or not Shipping and Taxes are supported in the checkout flow. A Boolean.
  isSntSupported: Boolean

  # Whether or not a guest is eligible for signup incentives. A Boolean
  isSignupIncentiveEligible: Boolean

  # Whether or not a funding instrument is PAD preferred by the user when PAD is enabled. A Boolean.
  isPadPreferred: Boolean

  # Whether or not a checkout session is a V.Zero (Braintree) integration. A Boolean.
  #
  # Required auth states: any
  isVZeroIntegration: Boolean

  # Indicates whether or not the flow is a WPS (Website Payments Standard) flow.
  isWPS: Boolean

  # Indicates whether or not the flow is a WPS (Website Payments Standard) subscription flow.
  isWpsSubscription: Boolean

  # Indicates whether or not the flow is a WPS (Website Payments Standard) autobilling flow.
  isWpsAutobilling: Boolean

  # Indicates whether or not the flow is a WPS (Website Payments Standard) installment plan flow.
  isWpsInstallmentPlan: Boolean

  # Indicates whether or not the flow requires to disclose RTR text.
  showRemittanceDisclosure: Boolean

  # Indicates whether or not the flow is an invoicing flow.
  isInvoiceFlow: Boolean

  # Flag indicating if processor has previously declined for this token
  processorDeclined: Boolean

  # Indicates when a PayPal Credit offer should be presented.
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  showPPCreditOffer: Boolean

  # Indicates when a credit offer should be shown to the user for second button
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  isEligibleForCreditSecondButton: Boolean

  # Indicates when a checkout session requires a patch CVV call.
  #
  # Required auth states: Any
  isCvvConfirmationRequired: Boolean

  # Indicates if FRS(Free Return Shipping) is applicable for the Merchant.
  isFrsApplicable: Boolean
    @deprecated(
      reason: "Org wide effort to remove FRS due to high costs and low usage"
    )

  # Indicates if it is allowed to create billing agreement without backup funding source or not
  allowBillingAgreementWithoutBackupFundingSource: Boolean

  # Indicates if it is legacy billing integration or not
  isLegacyBillingIntegration: Boolean

  # Indicates if set Sticky FI is allowed for the merchant
  setStickyBillingAllowed: Boolean

  # Indicates billing payment experience, ex: 'HERMES'
  paymentExperience: checkoutBillingPaymentExperience

  # Contextual consent eligibility for PayPal on File Experiment
  isContextualConsentEligibilityMet: Boolean
}

# Types of client config button funding source
enum checkoutButtonFundingSourceType {
  # Apple Pay
  applepay

  # Bancontact
  bancontact

  # Blik
  blik

  # Boleto
  boleto

  # Boletobancario
  boletobancario

  # Card
  card

  # Credit
  credit

  # Elv
  elv

  # EPS
  eps

  # GiroPay
  giropay

  # Ideal
  ideal

  # Maxima
  maxima

  # Mercadopago
  mercadopago

  # MyBank
  mybank

  # OXXO
  oxxo

  # P24
  p24

  # PayPal
  paypal

  # Pay Later
  paylater

  # PayU
  payu

  # Sepa
  sepa

  # SoFort
  sofort

  # Trustly
  trustly

  # Venmo
  venmo

  # WeChatPay
  wechatpay

  # Zimpler
  zimpler

  # Multibanco
  multibanco

  # Satispay
  satispay

  # Paidy
  paidy
}

# An enumeration of types that a billing payment experience can be.
enum checkoutBillingPaymentExperience {
  # HERMES experience
  HERMES

  # HERMESNODE experience
  HERMESNODE
}

# Encapsulates details of the declined instrument
type checkoutDeclinedInstrument {
  # Indicates the type of the funding instrument
  type: checkoutFundingOptionType!

  # Funding option's ID (Ex: 'BA8JUE35JC6JBU4')
  # This differs from ID because ID will sometimes have an extra
  # keyword appended
  id: ID

  # Funding option's name (Ex: 'BANK OF AMERICA')
  name: String

  # Last digits of a credit card
  lastDigits: String

  # Declined instrument's issuer product description. This is the card issuer's
  # product and brand information. For Example, Chase Sapphire Reserve.
  issuerProductDescription: String

  # Indicates how the funding instrument is declined
  declineType: checkoutDeclinedInstrumentType

  # Indicates the reason for the instrument's decline
  declineReason: String!

  # The card art image
  #
  # Takes optional input for image size and type
  image(
    size: checkoutSquareImageSize = S
    type: checkoutImageType = png
  ): checkoutCardImage

  # Normalized processor response for the decline reason from issuer
  normalizedProcessorResponse: String

  # Partial fpan is a flag from PAPS for determining
  # whether we have only partial funding PAN so we need to replace FI record
  # or we have full funding PAN so we need to add FI record
  partialFpan: Boolean
}

# An enumeration of types that FundingOption can have.
# BANK_ACCOUNT, CREDIT_CARD, PAYPAL_BALANCE, PAYPAL_CREDIT, etc.
enum checkoutFundingOptionType {
  # Bank Account
  BANK_ACCOUNT

  # Credit Card
  CREDIT_CARD

  # Cryptocurrency
  CRYPTOCURRENCY

  # Debit Card
  DEBIT_CARD

  # Incentive
  INCENTIVE

  # PayPal Balance
  PAYPAL_BALANCE

  # PayPal Credit
  PAYPAL_CREDIT

  # Private Label Credit Card
  PRIVATE_LABEL_CREDIT_CARD

  # Rewards
  REWARDS

  # Standalone reward
  STANDALONE_REWARDS

  # Pay_Token
  PAY_TOKEN

  # Pay Later
  PAY_LATER

  # Bill Me Later
  BILL_ME_LATER
}

# An enumeration of types that FundingOption can have.
# PROCESSOR_DECLINE, PAYPAL_ELIGIBILITY or PREAUTH
enum checkoutDeclinedInstrumentType {
  # DO_EC issuer decline
  PROCESSOR_DECLINE

  # DO_EC PayPal credit DO_EC decline
  PAYPAL_ELIGIBILITY

  # CC Preauthorization decline
  PREAUTH
}

# Size of an image
enum checkoutSquareImageSize {
  # Extra extra small 32x32 px
  XXS

  # Extra small 50x50 px
  XS

  # Small 96x96 px
  S

  # Medium 200x200 px
  M

  # Large 300x300 px
  L

  # Extra large 400x400 px
  XL

  # Extra extra large 500x500 px
  XXL

  # Extra extra extra large 800x800 px
  XXXL
}

# Type of image
#
# `jpg`, `png`, etc
enum checkoutImageType {
  # jpg image
  jpg

  # png image
  png

  # gif image
  gif
}

# Encapsulates the card art image data
# Contains the card art image and its dimensions
type checkoutCardImage implements checkoutImage {
  # An image's URL. A URL type.
  url: checkoutGenericURL

  # An image's width in pixels (number value only)
  width: String

  # An image's height in pixels (number value only)
  height: String
}

# Encapsulates details of a disallowed instrument
type checkoutDisallowedInstrument {
  # Indicates the type of the given disallowed funding instrument (Ex: 'BALANCE')
  type: checkoutFundingOptionType

  # Indicates the reason for the current disallowed funding instrument
  reason: String!

  # Funding instrument's ID (Ex: 'BA8JUE35JC6JBU4')
  id: ID

  # Funding instrument's name. This is the raw response, and should be treated more
  # as a code, if the client wants to do some logic based on the specific name of
  # the instrument.
  # (Ex: 'BANK OF AMERICA')
  name: String

  # Funding instrument's mapped name. This can be used as a display name. Currently
  # does not use localization.
  # (Ex: 'BILL_ME_LATER' -> 'PayPal Credit', label: disallowedToallowedMap[name] || name)
  label: String

  # Funding instrument's formatted type (Ex: 'Bank')
  formattedType: String

  # Funding instrument's sub type of it's `type`.
  # (EX: 'CREDIT', 'DEBIT', 'CHECKING', 'SAVINGS').
  instrumentSubType: checkoutFundingInstrumentSubType

  # Indicates if the disallowed instrument is the preferred funding instrument
  isPreferred: Boolean

  # Funding instrument's last 4 digits (Ex: '3071')
  lastDigits: String

  # The card art image
  #
  # Takes optional input for image size and type
  image(
    size: checkoutSquareImageSize = S
    type: checkoutImageType = png
  ): checkoutCardImage
}

# Subtype of Funding Instrument (more descriptive than FundingInstrumentType)
enum checkoutFundingInstrumentSubType {
  # Checking account (Bank)
  CHECKING

  # Savings account (Bank)
  SAVINGS

  # PayPal Balance
  BALANCE

  # Credit Card
  CREDIT

  # Debit Card
  DEBIT

  # PayPal Credit
  PAYPAL

  # Prepaid Card
  PREPAID

  # Merchant Card/Balance
  MERCHANT

  # Incentive
  INCENTIVE

  # PayPal Specific Incentive
  PAYPAL_SPECIFIC_BALANCE

  # Merchant Specific Incentive
  MERCHANT_SPECIFIC_BALANCE

  # Cryptocurrency
  CRYPTOCURRENCY

  # Honey gold
  HONEY_GOLD

  # Unknown
  UNKNOWN
}

# Instrument types that can be grouped
enum checkoutFundingOptionGroupingType {
  # Incentive
  INCENTIVE
}

# A funding option encompasses a `fundingInstrument` that can be used to fully
# cover the transaction, and the different `plans` that use that funding instrument.
#
# For details of the funding instrument, like name and lastDigits, query the
# `fundingInstrument` field.
#
# For details of the options for how the funding instrument can be charged, query
# the `allPlans` field.
type checkoutFundingOption {
  # The ID of the funding option's `fundingInstrument`.
  id: ID

  # The funding option's funding instrument. All plans of this `FundingOption`
  # are based on this funding instrument.
  fundingInstrument: checkoutFundingInstrument!

  # Available amount of the funding option (currently only applies to PAYPAL_BALANCE)
  availableAmount: checkoutAmount

  # Plans that are associated with the funding instrument of this funding option.
  # Each plan is a different option that can be used with the funding instruments
  # in order to pay with the transaction.  Each of the plans will contain the
  # funding instrument as a funding source, but may also include other funding
  # sources with different funding instruments as well.
  allPlans: [checkoutPlan]

  # Funding option's associated plans
  plans: checkoutPlanTypes
    @deprecated(
      reason: "Migrating this data into allPlans, because return type changed to array of Plans."
    )

  # Funding option's ID (Ex: 'BA8JUE35JC6JBU4')
  fundingOptionId: String
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's name (Ex: 'BANK OF AMERICA')
  name: String
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's mapped name (Ex: 'BILL_ME_LATER' -> 'PayPal Credit', label: disallowedToallowedMap[name] || name)
  label: String
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's type (Ex: 'BANK')
  type: checkoutFundingOptionType
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's formatted type (Ex: 'Bank')
  formattedType: String
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's sub type (Ex: 'IACH')
  subType: checkoutFundingOptionSubType
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's last 4 digits (Ex: '3071')
  lastDigits: String
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # If a funding option is preferred by the user
  isPreferred: Boolean
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # If a funding option is selected by the user
  isSelected: Boolean
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument\nand Plans. Look in `allPlans` for this field, to see which plan is selected."
    )

  # Funding option's amount.
  amount: checkoutAmount
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument\nand Plans. Amount can change depending on the plan and source used - look\nat `allPlans.fundingSources.amount` to find the amount charged for each\nfunding source."
    )

  # Funding option's currency conversion information
  currencyConversion: checkoutCheckoutCurrencyConversion
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument\nand Plans. Currency conversion can be found at `allPlans.currencyConversion`."
    )
}

# Encapsulates all properties related to a FundingInstrument.
# Ex: name, type, lastDigits, amount, etc.
type checkoutFundingInstrument {
  # Funding instrument's ID (Ex: 'BA8JUE35JC6JBU4')
  id: ID

  # Funding instrument's name. This is the raw response, and should be treated more
  # as a code, if the client wants to do some logic based on the specific name of
  # the instrument.
  # (Ex: 'BANK OF AMERICA')
  name: String

  # Funding instrument's mapped name. This can be used as a display name. Currently
  # does not use localization.
  # (Ex: 'BILL_ME_LATER' -> 'PayPal Credit', label: disallowedToallowedMap[name] || name)
  label: String

  # Funding instrument's nickname to be displayed. If nickname doesn't exist,
  # returns funding instrument's issuer product description which is the card
  # issuer's product and brand information.
  # (Ex: 'My card acc' || 'Chase Sapphire Reserve' )
  nameDescription: String

  # Funding instrument's type (Ex: 'BANK')
  type: checkoutFundingOptionType

  # Funding instrument's formatted type (Ex: 'Bank')
  formattedType: String

  # Funding instrument's sub type of it's `type`.
  # (EX: 'CREDIT', 'DEBIT', 'CHECKING', 'SAVINGS').
  instrumentSubType: checkoutFundingInstrumentSubType

  # Funding instrument's last 4 digits (Ex: '3071')
  lastDigits: String

  # Additional data required to present the Credit Installment funding option
  creditFields: checkoutCreditAsFI

  # Additional data required to present the Credit Installment funding option
  creditFIAdditionalData: checkoutCreditAsFIOffer
    @deprecated(
      reason: "Renamed to use `creditFields` instead to better match good graphQL schema practices."
    )

  # The card art image
  #
  # Takes optional input for image size and type
  image(
    size: checkoutSquareImageSize = S
    type: checkoutImageType = png
  ): checkoutCardImage

  # The related institution images
  #
  # Takes optional input for image category, size, and type
  institutionImages(
    category: checkoutInstitutionCategory
    size: checkoutSquareImageSize = S
    type: checkoutImageType = png
  ): [checkoutInstitutionImage]

  # Attributions are data that can be associated with a financial instrument that
  # can influence a user to select that instrument. This may be a message that
  # reminds the user of special incentive such as an extra 5% back on purchases
  # made using the card.
  #
  # > Example: *"Earn 5% Cashback Bonus on up to $1,500 in qualifying PayPal and
  # more purchases from 7/1/19 – 9/30/19, if activated.  For Discover it® and
  # Discover® More® card members only."*
  attribution: String
    @deprecated(
      reason: "New object attributionDetails is already added in FndingInstrument which holds attribution related information."
    )

  # Attributions are data that can be associated with a financial instrument that
  # can influence a user to select that instrument. This may be a message that
  # reminds the user of special incentive such as an extra 5% back on purchases
  # made using the card.
  attributionDetails: checkoutAttributionDetails

  # If a funding instrument is preferred by the user
  isPreferred: Boolean

  # The rewards information for a specific card. Rewards can be in the form of
  # points or miles, etc and can be used to fund all or part of the transaction.
  #
  # The rewards info contains:
  # - how many rewards are available for use
  # - what the conversion is from rewards to amount
  # - any constraints such as limits
  rewards: checkoutRewards

  # Contains details for CRYPTOCURRENCY type instruments
  cryptocurrencyHoldingDetails: checkoutCryptocurrencyHoldingDetails

  # Additional data required to display disclaimers for specific cards (Ex: 'COBRANDED')
  payerDisclaimer: checkoutPayerDisclaimer

  # Available installment options.
  # An Array of Installments types.
  installments: [checkoutInstallments]

  # Contains additional details for INCENTIVE type instruments
  incentiveDetails: checkoutOffer

  # Billing without purchase constraint for smart auth
  constraint: checkoutConstraint

  # If a funding option is a stcky FI
  isSticky: Boolean

  # Funding option's sub type (Ex: 'IACH')
  subType: checkoutFundingOptionSubType
    @deprecated(
      reason: "Subtype as in IACH/DELAYED should be read from `FundingSource.subType`. Subtype as in DEBIT/CREDIT/SAVINGS/CHECKING should be read from `instrumentSubType`."
    )

  # Funding option's ID (Ex: 'BA8JUE35JC6JBU4')
  fundingOptionId: String
    @deprecated(
      reason: "Renamed to use `id` instead to better match good graphQL schema practices."
    )

  # Funding option's amount.
  amount: checkoutAmount
    @deprecated(
      reason: "Read amount from a Plan that contains this FundingInstrument instead, as the amount charged to the FundingInstrument can change depending on the Plan being used."
    )

  # Funding instrument's issuer product description. This is the card issuer's
  # product and brand information. For Example, Chase Sapphire Reserve.
  issuerProductDescription: String
    @deprecated(
      reason: "Replaced by `nameDescription`. `nameDescription` returns `issuerProductDescription` when fi nickname is not present."
    )
}

# Encapsulates all properties related to a credit as a Funding Instrument.
type checkoutCreditAsFI {
  # Encapsulates all properties related to a credit as FI offer
  creditOffer: checkoutCreditAsFIOffer

  # Total fee for installments
  # repaymentInstrument is not applicable for PPC
  repaymentInstrument: checkoutFundingInstrument
}

# Encapsulates all properties related to a credit as FI offer for the RYI page.
# Average SLA response time - 50ms - (This might change)
type checkoutCreditAsFIOffer {
  # A marketing offer's reference ID.
  referenceId: String

  # Rank of this specific offer within the overall list.  Rank will not necessarily
  # be consecutive if other touchpoints had higher priorities.
  rank: Int

  # PresentmentType for offer i.e. radio/banner
  presentmentType: checkoutCreditPresentmentType

  # Credit product associated with this offer. For example Pay later, PayPal Credit, etc.
  product: checkoutCreditProductType

  # Offer Category i.e. ACQ, reuse etc
  offerCategory: checkoutCreditOfferCategoryType

  # Credit Offer Type i.e. CORE, SAC, INST, EZP etc
  creditOfferType: checkoutCreditOfferType

  # Financing code is the id for a particular offer returned by credit financing serv.
  financingCode: String

  # All the Cross Currency related information
  crossCurrencyInfo: checkoutCreditCrossCurrency

  # Offer ID for the offer returned by crcofferserv
  # crcOfferId is not applicable for PPC
  crcOfferId: String

  # All the UI Elements data (offer, RYI etc)
  uiElements: checkoutCreditUIElements

  # All the Credit PayLater Product deatils
  # creditPayLater is not applicable for PPC
  creditPayLater: checkoutCreditPayLater

  # Uitilities for tracking this offer and the user's interaction with it
  trackingDetails: checkoutMorsMRTrackingDetails
}

# An enumeration of types that an CreditPresentmentType can be. RADIO, BANNER, etc.
enum checkoutCreditPresentmentType {
  # Radio Presentment Type
  Radio

  # Banner Presentment Type
  Banner
}

# An enumeration of types that an CreditProductType can be. GPL, PPC, CO-BRAND, etc.
enum checkoutCreditProductType {
  # Credit card installments
  CREDIT_CARD_INSTALLMENTS

  # Global Pay Later
  GPL

  # Pay upon invoice
  PUI

  # PayPal Credit
  PPC
}

# An enumeration of types that an CreditOfferCategoryType can be. ACQ, REUSE, etc.
enum checkoutCreditOfferCategoryType {
  # An acquisition banner
  ACQ

  # A reuse banner for credit
  REUSE
}

# An enumeration of types that an CreditOfferType can be. INST, NI, CORE, etc.
enum checkoutCreditOfferType {
  # Installment offer type
  INST

  # Core offer type
  CORE

  # NO Interest offer type
  NI

  # Pay As Low As offer type
  PALA

  # Easy Pay offer type
  EZP

  # Pay Upon Invoice
  PUI
}

# Encapsulates all properties related Cross Currency.
# Ex: rate, to, rate, etc.
type checkoutCreditCrossCurrency {
  # Conversion rate offered by PayPal upto 10 decimals(Eg: 1.511645640091386)
  currencyConversionRate: String

  # Formatted rate as per forex format decimals mostly 5 (Eg: 1.51165)
  toFormattedCurrencyConversionValue: String

  # Honour FX Id or AuditTrail Id
  fxAuditTrailId: String

  # Currency to which amount converted (Eg. 1,00 in the case of fr_FR)
  fromFormattedCurrencyConversionValue: String

  # Currency to which conversion offered (Eg. EUR in the case of GPL/FR)
  fromCurrencyCode: checkoutSupportedCountryCurrencies

  # Currency from which conversion offered (Eg. USD in the case of USD transaction for GPL/FR)
  toCurrencyCode: checkoutSupportedCountryCurrencies

  # Descriptor text for PayPal Rate (Eg: PayPal rate:)
  rateDescriptor: String

  # Learn More Text to be used as link text
  learnMoreText: String

  # Learn More url to be redirected when clicked on Learn More Text
  learnMoreLink: String

  # Descriptor text for cross currency with Details on the validity of the offered rate
  currencyConversionDescriptor: String
}

# Encapsulates all properties related to all the RYI pages.
type checkoutCreditUIElements {
  # Data related to offer
  creditOffer: checkoutCreditFIUIProperties

  # Data required to display specialized credit installments only RYI
  creditOnlyFI: checkoutCreditFIUIProperties

  # Data required to display credit installments FI with other FIs on return RYI
  creditFI: checkoutCreditFIUIProperties

  # Highlight Text for offer
  fiHighlightText: String

  # Indicates whether this is a multi-offer message
  # GPL-FI associated to multi-offer messages will be hidden in final RYI
  isMultiOffer: Boolean

  # Indicates the GPL loan formatted maximum capture amount (apply to PSD2 countries: DE, GB, ES, FR, IT)
  formattedMaxCaptureAmount: String

  # Credit installments logo
  logo: checkoutGenericURL

  # Alternate text for logo
  logoAltText: String
}

# Encapsulates all properties related to a credit as FI offer for the RYI page.
type checkoutCreditFIUIProperties {
  # Section Headline text
  sectionHeadlineText: String

  # Headline text
  headlineText: String

  # Description text
  descriptorText: String

  # Checkout button text (pay)
  payButtonText: String

  # Recurring Payment Formatted Text
  paymentFormattedText: String

  # Term Formatted Text
  termFormattedText: String

  # Terms Text
  termsText: String

  # Checkout button text (continue)
  continueButtonText: String
}

# Encapsulates all properties related to a credit pay later.
type checkoutCreditPayLater {
  # Total cost is cart amount
  totalCost: checkoutAmount

  # Total interests for installments
  totalInterest: checkoutAmount

  # Total fee for installments
  totalFee: checkoutAmount

  # Installments schedule
  installmentsSchedule: [checkoutInstallmentSchedule]

  # No down payment amount
  noDownPaymentAmt: checkoutAmount
}

# Encapsulates all properties related to InstallmentSchedule.
type checkoutInstallmentSchedule {
  # Principal amount of transaction (Ex: '204,20 EUR')
  principal: checkoutAmount

  # Type of Payment (Ex: 'Down_Payment', 'INSTALLMENT')
  paymentType: checkoutCreditPaymentType

  # Order of the payment (Ex: 1 or 2 ..)
  paymentNumber: Int

  # Interest amount on the transaction (Ex: '4,20 EUR')
  interest: checkoutAmount

  # Consumer Fee for the transaction (Ex: '0,20 EUR')
  consumerFee: checkoutAmount

  # Payment Date of the transaction (Ex: '27 nov.', '14 Mar')
  paymentDate: String

  # TotalPayment for the transaction including fee and interest  (Ex: '23,01 EUR')
  totalPayment: checkoutAmount
}

# An enumeration of types that an CreditPaymentType can be. DOWN_PAYMENT, INSTALLMENT, etc.
enum checkoutCreditPaymentType {
  # A down payment for first installment in schedule
  DOWN_PAYMENT

  # An installment after the first down payment
  INSTALLMENT
}

# Utilities for tracking this message and the user's interaction with it.
type checkoutMorsMRTrackingDetails {
  # Url used for impression tracking
  impressionUrl: checkoutGenericURL

  # URL used for click tracking
  clickUrl: checkoutGenericURL

  # URL used for dismiss tracking
  dismissUrl: checkoutGenericURL
}

# Size of an image
enum checkoutInstitutionCategory {
  # Image category for financial institution
  PRIMARY

  # Image category for financial institution wallet
  WALLET

  # Image category for thumbnail display
  THUMBNAIL

  # Image category for reward program
  REWARD

  # Image category for the institution partner
  PARTNER

  # Image category for the FI brand
  BRAND

  # Secondary image category for the FI brand
  BRAND_SECONDARY
}

# Encapsulates all properties related to card institution images.
type checkoutInstitutionImage implements checkoutImage {
  # The image category (e.g. PARTNER, BRAND, REWARD, etc)
  category: checkoutInstitutionCategory

  # An image's URL. A URL type.
  url: checkoutGenericURL

  # An image's width in pixels (number value only)
  width: String

  # An image's height in pixels (number value only)
  height: String

  # An image mime type
  type: String
}

# Encapsulates all properties related to attribution.
type checkoutAttributionDetails {
  # Identifier for an attribution.
  attributionId: String

  # attribution description.
  shortDescription: String

  # attribution description in compact format.
  compactDescription: String

  # attribution terms label
  termsLabel: String

  # attribution terms link
  termsLink: String
}

# Encapsulates all properties related to Rewards for a funding instrument
type checkoutRewards {
  # The ID for Rewards
  id: String

  # The related card ID
  relatedCardId: String

  # The card issuer rewards details
  issuer: checkoutRewardsIssuer

  # Rewards that can be converted to currency equivalent or not
  balance: checkoutRewardsBalance

  # The available rewards value and its equivalent monetary value
  availableRewards: checkoutAvailableRewards

  # The necessary metadata to convert rewards to monetary value and vice versa
  conversionMetadata: checkoutRewardsConversionMetadata

  # The minimum and maximum constraints on how rewards can be used
  constraints: checkoutRewardsConstraints

  # The reward type (i.e. `CHASE_REWARDS_POINTS`)
  #
  # This is used to determine what _type_ of rewards that's shown to the user.
  # This is the combination of rewards issuer name and the issuer instrument type
  # from the issuer data.
  rewardType: String
    @deprecated(
      reason: "Instead of using the rewardType, the reward content and behavior are determined by the redemptionType, the issuer name and denominationTypeDescription"
    )

  # The rewards redemption type
  redemptionType: checkoutRewardsRedemptionType

  # The rewards terms and conditions url
  termsUrl: String

  # The rewards image
  #
  # Takes optional input for image size and type
  image(
    size: checkoutSquareImageSize = S
    type: checkoutImageType = png
  ): checkoutGenericImage
}

# The card issuer rewards details
#
# This contains the name of the issuer, type of rewards instrument, and the name
# of the rewards product (i.e. `Ultimate Rewards® Points`)
type checkoutRewardsIssuer {
  # The name of the rewards issuer
  name: String

  # The type of rewards
  instrumentType: String
    @deprecated(
      reason: "Instead of using the instrumentType, the reward content and behavior are determined by the redemptionType, the issuer name and denominationTypeDescription"
    )

  # The name of the rewards product like `Ultimate Rewards® Points`
  issuerProductDescription: String
}

# Encapsulates all properties related to Rewards Balance
type checkoutRewardsBalance {
  # Currency to which rewards can be converted
  targetCurrencyCode: checkoutSupportedCountryCurrencies

  # If the rewards can be converted to the currency equivalent
  isConvertable: Boolean
}

# Encapsulates all properties related to the available Rewards
type checkoutAvailableRewards {
  # Rewards value amount
  value: Float

  # The equivalent monetary value of the rewards
  monetaryValue: checkoutAmount

  # The Rewards code description - example 'points'
  denominationTypeDescription: String
}

# Encapsulates all properties related to Rewards conversion
type checkoutRewardsConversionMetadata {
  # Conversion factor when converting from rewards to monetary value
  conversionFactor: Float

  # The decimal precisions when converting from from rewards to monetary value and vice versa
  decimalPrecision: checkoutRewardsDecimalPrecision

  # The rounding modes when converting from from rewards to monetary value and vice versa
  roundingMode: checkoutRewardsRoundingMode
}

# The decimal precision for Rewards conversion
type checkoutRewardsDecimalPrecision {
  # Decimal precision for conversion from amount to rewards
  toRewards: Float

  # Decimal precision for conversion from rewards to amount
  toAmount: Float
}

# The rounding modes when converting a Rewards value
type checkoutRewardsRoundingMode {
  # Rounding mode for conversion from amount to rewards
  toRewards: checkoutRewardsRoundingModeType

  # Rounding mode for conversion from rewards to amount
  toAmount: checkoutRewardsRoundingModeType
}

# The mode of Rewards rounding
#
# https://docs.oracle.com/javase/7/docs/api/java/math/RoundingMode.html
enum checkoutRewardsRoundingModeType {
  # Rounding is unnecessary
  UNNECESSARY

  # Rounding mode to round towards _nearest neighbor_ unless both neighbors are equidistant, in which case round up.
  HALF_UP

  # Rounding mode to round towards _nearest neighbor_ unless both neighbors are equidistant, in which case round down.
  HALF_DOWN

  # Rounding mode to round towards the _nearest neighbor_ unless both neighbors
  # are equidistant, in which case, round towards the even neighbor.
  HALF_EVEN

  # Rounding mode to round away from zero.
  UP

  # Rounding mode to round towards zero.
  DOWN
}

# Encapsulates all properties related to Rewards constraints
type checkoutRewardsConstraints {
  # The minimum amount the user can spend when using rewards
  minimumSpend: checkoutAmount

  # The maximum usable rewards
  maximumUsable: checkoutAmount

  # The maximum amount the user can spend when using rewards
  maximumSpend: checkoutAmount
}

# The Rewards redemption type
enum checkoutRewardsRedemptionType {
  # Rewards are used for a statement credit
  STATEMENT_CREDIT

  # Rewards are used with a specified dollar amount applied as a statement credit toward the purchase
  STATEMENT_CREDIT_WITH_AMOUNT_CHOICE

  # Rewards are deducted from the rewards balance
  REAL_TIME
}

# Encapsulates all properties related to a generic image.
type checkoutGenericImage implements checkoutImage {
  # An image's URL. A URL type.
  url: checkoutGenericURL

  # An image's width in pixels (number value only)
  width: String

  # An image's height in pixels (number value only)
  height: String
}

# Encapsulates all properties related to the cryptocurrency holding details.
type checkoutCryptocurrencyHoldingDetails {
  # Symbol of the cryptocurrency
  symbol: checkoutCryptocurrencySymbol

  # Full amount of cryptocurrency the user has
  quantity: String
}

# An enumeration of types that an Cryptocurrency can be. BTC, BCH, etc.
enum checkoutCryptocurrencySymbol {
  # Bitcoin
  BTC

  # Bitcoin Cash
  BCH

  # Litecoin
  LTC

  # Ethereum
  ETH

  # PayPal USD
  PYUSD

  # Chainlink
  LINK

  # Polygon
  MATIC

  # Solana
  SOL
}

# Payer Disclaimer values
enum checkoutPayerDisclaimer {
  # Cobranded type
  COBRANDED
}

# Encapsulates all properties related to an individual payment installment option
# Ex: term, totalCost, discountPercentage
type checkoutInstallments {
  # Option discount amount
  discount: checkoutInstallmentDiscount

  # Option monthly payment amount
  monthlyPayment: checkoutAmount!

  # Option interval duration for installment
  intervalDuration: String

  # Option term number (Ex: 3)
  term: Int!

  # Option total cost amount
  totalCost: checkoutAmount!
}

# Encapsulates all properties related to installment related discounts.
# Ex: currencySymbol, currencyValue, currencyCode, etc.
type checkoutInstallmentDiscount {
  # Amount of discount
  amount: checkoutAmount

  # Amount of discount's percentage (Ex: '5.0')
  percentage: String
}

# Encapsulates offer details
type checkoutOffer {
  # offer id
  id: String!

  # Indicates type of an offer's balance. Example: PSB, MSB, etc
  balanceType: checkoutBalanceType

  # descriptive name for the offer
  shortTitle: String

  # max discount based on percent offer
  maxDiscount: checkoutAmount

  # int value of a percent off of a offer
  percentOff: Int

  # type of Incentives, etc: PERCENTAGE or FIXED
  type: checkoutIncentives
}

# An enumeration of all potential balance types for an offer
enum checkoutBalanceType {
  # MSB - Merchant Specific Balance
  MSB

  # PSB - PayPal Specific Balance
  PSB
}

# List of types that an Incentives can be. PERCENTAGE, FIXED
enum checkoutIncentives {
  # Percentage based incentive, has percent off
  PERCENTAGE

  # Fixed, fixed amount of incentive
  FIXED
}

# Encapsulates all properties related to constraint on fi.
# EX(Constarint for AUTH)
type checkoutConstraint {
  # amount of constraint
  amount: checkoutAmount

  # type for constraint.(EX: 'AUTH')
  type: checkoutConstraintType
}

# An enumeration of types that an ConstraintType can be. AUTH, etc
enum checkoutConstraintType {
  # the constraint type is smart auth
  AUTH
}

# An enumeration of subtypes that FundingOption can have.
# DELAYED_TRANSFER, ECHECK, INSTANT_TRANSFER or MANUAL_BANK_TRANSFER
enum checkoutFundingOptionSubType {
  # Credit Card
  CREDIT

  # Delayed Transfer, also known as Pay After Delivery (PAD).
  DELAYED_TRANSFER

  # E-Check
  ECHECK

  # Instant Transfer, also known as IACH.
  INSTANT_TRANSFER

  # Manual Bank Transfer, also known as MEFT.
  MANUAL_BANK_TRANSFER
}

# A plan describes a way that the user can pay for a transaction. It includes the
# list of funding sources that will be used, and optionally, backup or currency
# conversion options that apply to using the plan.
type checkoutPlan {
  # Plan's ID (Ex: '716015457e394cebb555f9804fb22227')
  id: ID

  # The array of funding sources that will be used to fund the payment in the plan,
  # and details about how those sources will be charged.
  fundingSources: [checkoutFundingSource]

  # Plan's backup funding instrument, that will be charged if the `fundingSources`
  # are unable to fund the transaction. Applies to plans with banks.
  backupFundingInstrument: checkoutFundingInstrument

  # Plan's backup funding option. Applies to banks.
  backupFundingOption: checkoutFundingOption
    @deprecated(
      reason: "Renamed to `backupFundingInstrument` for consistent naming of funding instrument types."
    )

  # Plan's currency conversion options, if any.
  currencyConversion: checkoutCheckoutCurrencyConversion

  # Total values of each currency in the plan.
  totalsPerCurrency: [checkoutAmount]

  # A Plan is selected. If you are listing out plans in a UI,
  # and need to show that a plan is selected, use this property.
  isSelected: Boolean

  # Plan's pre authorization data. The type and amount that needs to be used for pre-authorization
  # during the `approveMemberPayment` mutation.
  preAuthorizationData: checkoutPreAuthorizationData

  # Plan's primary funding option.
  primaryFundingOption: checkoutFundingOption
    @deprecated(
      reason: "Mappings improved to separate the instrument and the details about the fundingSource - see fundingSources instead"
    )

  # Plan's secondary funding options.
  secondaryFundingOptions: [checkoutFundingOption]
    @deprecated(
      reason: "Mappings improved to separate the instrument and the details about the fundingSource - see fundingSources instead"
    )

  # Plan's ID (Ex: '716015457e394cebb555f9804fb22227')
  planId: String
    @deprecated(
      reason: "Renamed to use `id` instead to better match good graphQL schema practices."
    )

  # Plan's secondary funding option.
  secondaryFundingOption: checkoutFundingOption
    @deprecated(
      reason: "Use `secondaryFundingOptions` instead - there may be more than one secondary option in this plan."
    )

  # A plan's funding contingencies
  fundingContingencies: [checkoutFundingContingency]!
}

# A source used in payment. Contains `fundingInstrument`, and information on how
# the funding instrument will be charged in the payment like the amount charged to
# the it, currency conversion used by the instrument, or rewards information used
# by the instrument.
type checkoutFundingSource {
  # The funding instrument that will be used
  fundingInstrument: checkoutFundingInstrument

  # The method of how the funding instrument will be charged when this funding source is used
  fundingMethodType: checkoutFundingInstrumentMethodType!

  # The amount that will be charged to the instrument associated with this funding source
  amount: checkoutAmount

  # Scheduled date of withdrawal. Example: DELAYED (PAD) bank account
  delayedPaymentDate: checkoutGenericDate

  # Array of individual funding sources in case of incentives
  groupedSources: [checkoutFundingSource]

  # Incentives and their max discount and percent off
  incentives: checkoutOffer
}

# Delivery Method of Funding Instrument
enum checkoutFundingInstrumentMethodType {
  # Instant transfer. Funding instrument will be charged immediately.
  INSTANT

  # Delayed transfer, also known as PAD. Applies to banks. Funding instrument will
  # be charged after the products are delivered.
  DELAYED

  # Manual transfer. User should be given information to bring to the bank token
  # fulfill the payment.
  #
  # This should be a deprecated funding method type - we should not be seeing third_party_response
  # anymore.
  MANUAL

  # E-check. Applies to banks. The amount charged may show up on the funding instrument
  # a few days after the transaction is completed on PayPal's side.
  ECHECK
}

# Encapsulates many ways that a date can be formatted. Ex: E, Hm, Ms, etc.
type checkoutGenericDate {
  # Fri
  E: String

  # Fri 14:10
  EHm: String

  # Fri 14:10:10
  EHms: String

  # 21 Fri
  Ed: String

  # Fri 2:10 PM
  Ehm: String

  # Fri 2:10:10 PM
  Ehms: String

  # 2014 AD
  Gy: String

  # Mar 2014 AD
  GyMMM: String

  # Fri, 21 Mar 2014 AD
  GyMMMEd: String

  # Mar 21, 2014 AD
  GyMMMd: String

  # 14
  H: String

  # 14:10
  Hm: String

  # 14:10:10
  Hms: String

  # 3
  M: String

  # Fri, 3/21
  MEd: String

  # Mar
  MMM: String

  # Fri, Mar 21
  MMMEd: String

  # March 21
  MMMMd: String

  # Mar 21
  MMMd: String

  # Mar 21
  MMMdd: String

  # March 21
  MMMMdd: String

  # 3/21
  Md: String

  # 21
  d: String

  # 2 PM
  h: String

  # 2:10 PM
  hm: String

  # 2:10:10 PM
  hms: String

  # 10:10
  ms: String

  # 2014
  y: String

  # 3/2014
  yM: String

  # 03/2014
  yMM: String

  # Fri, 3/21/2014
  yMEd: String

  # Mar 2014
  yMMM: String

  # Fri, Mar 21, 2014
  yMMMEd: String

  # Mar 21, 2014
  yMMMd: String

  # 3/21/2014
  yMd: String

  # 03/21/2014
  yMMdd: String

  # Q1 2014
  yQQQ: String

  # 1st quarter 2014
  yQQQQ: String

  # March 2014
  yyyyMMMM: String

  # Thursday, September 28, 2017 at 5:32:00 PM Pacific Daylight Time
  dateTimeFull: String

  # September 28, 2017 at 5:32:00 PM PDT
  dateTimeLong: String

  # Sep 28, 2017, 5:32:00 PM
  dateTimeMedium: String

  # 9/28/17, 5:32 PM
  dateTimeShort: String

  # 5:32:00 PM Pacific Daylight Time
  timeFull: String

  # 5:32:00 PM PDT
  timeLong: String

  # 5:32:00 PM
  timeMedium: String

  # 5:32 PM
  timeShort: String

  # Thursday, September 28, 2017
  dateFull: String

  # September 28, 2017
  dateLong: String

  # Sep 28, 2017
  dateMedium: String

  # 9/28/17
  dateShort: String

  # September 28, 2017 at 5:32 PM
  dateLongTimeShort: String

  # Thursday, September 28, 2017 at 5:32:00 PM
  dateFullTimeMedium: String

  # Thursday, September 28, 2017 at 5:32 PM
  dateFullTimeShort: String
}

# Encapsulates all properties related to a CheckoutCurrencyConversion.
#
# There are 2 types of the coversion rate: "PAYPAL" and "VENDOR"
# Please note that conversion rate information is always for PAYPAL's type.
# The only 2 fields that are associated with VENDOR type are "type" and "isReadOnly"
type checkoutCheckoutCurrencyConversion {
  # What the currency is converted from.
  from: checkoutAmount

  # What the currency is converted to.
  to: checkoutAmount

  # The currency conversion rate.
  rate: String

  # The currency conversion rate formatted. (Ex: 0.019991 INR)
  rateFormatted: String

  # The currency conversion rate spread.
  spread: String

  # Whether or not a user can change the conversion type. If `true`, the conversion
  # type in the `type` field cannot be changed. If `false`, the user can switch between
  # the different types of `CheckoutCurrencyConversionType`.
  isReadOnly: Boolean
    @deprecated(
      reason: "Renamed to `canChangeConversionType` for more clarity around the purpose."
    )

  # PayPal currency conversion fee rate in percentage. (e.g '5.00')
  feeRate: String

  # PayPal currency conversion fee rate in percentage formatted based on the locale. (e.g. '5,00 %')
  feeRateFormatted: String

  # Date of validity.  The date that the conversion rate was issued.
  issuedDate: checkoutGenericDate

  # Type of currency conversion rate.
  type: checkoutCheckoutCurrencyConversionType

  # Whether or not a user can change the conversion type. If `false`, the conversion
  # type in the `type` field cannot be changed. If `true`, the user can switch between
  # the different types of `CheckoutCurrencyConversionType`.
  canChangeConversionType: Boolean

  # The cart total with the currency conversion rate applied.
  convertedCartTotal: checkoutAmount
    @deprecated(
      reason: "convertedCartTotal is computed using cart totals, which is more inaccurate than using planning data about the user's mix of funding instruments. Use convertedAmount instead."
    )

  # The converted amount to be charged on the card.
  convertedAmount: checkoutAmount

  # The amount of cash back the user will receive in case of opting for selecting the PayPal's currency conversion rate.
  # User has to be enrolled in a cashback campaign in order to get cashback.
  cashbackPercentage: Int
}

# An enumeration of types that CheckoutCurrencyConversion can have.  PAYPAL, VENDOR
enum checkoutCheckoutCurrencyConversionType {
  # PayPal conversion rate
  PAYPAL

  # Vendor conversion rate
  VENDOR
}

# Encapsulates pre authorization data for a funding instrument
type checkoutPreAuthorizationData {
  # Type of Authorization to be done on the card, 'PARTIAL' indicates a $1 auth, 'FULL' indicates the full auth
  authType: checkoutCardAuthType

  # Amount indicates the amount the authorization is to be done for, depending on the currency and the local currencyValue
  amount: checkoutAmount
}

# An enumeration of types that FundingOption can have.
# PROCESSOR_DECLINE, PAYPAL_ELIGIBILITY or PREAUTH
enum checkoutCardAuthType {
  # Full amount transaction authorization
  FULL

  # Partial amount transaction authorization
  PARTIAL
}

# Encapsulates all data related to a Checkout session's funding contingencies
# Ex: threeDomainSecure, cvvConfirm, etc.
union checkoutFundingContingency =
    checkoutThreeDomainSecureResolutionContingency
  | checkoutConfirmCreditCardCvvContingency
  | checkoutSepaMandateAcceptenceNeededContingency
  | checkoutPaycodeContingency

# Encapsulates all properties related to a ThreeDomainSecureResolutionContingency type
type checkoutThreeDomainSecureResolutionContingency {
  # Resolution contingency name (Ex: 'PAYER_ACTION_REQUIRED')
  name: String

  # Resolution cause for current contingency (Ex: 'NEED_3D_SECURE_AUTHENTICATION')
  causeName: String!

  # Actual 3DS (2.0) contingency resolution for the current selected funding instrument
  resolution: checkoutThreeDSResolution
}

# Encapsulates all properties related to a ThreeDSResolution type
type checkoutThreeDSResolution {
  # (Ex: 'PAYMENT_CARD')
  type: String

  # Resolution name for the current selected funding instrument (Ex: 'RESOLVE_3D_SECURE_AUTHENTICATION')
  resolutionName: String!

  # Details information in regards to current selected funding instrument for resolving
  # 3DS (2.0) contingency
  paymentCard: checkoutThreeDSPaymentCardData

  # Details information in regards to current 3DS contingency which encapusates JWT & cardinal
  # related information
  contingencyContext: checkoutThreeDSContingencyContextData
}

# Encapsulates all properties related to a ThreeDSPaymentCardData type
type checkoutThreeDSPaymentCardData {
  # Funding instrument's ID (Ex: 'CC-Q9E5QAHF4ESLJ')
  id: ID

  # Card issuer for the current funding instrument (Ex: 'MASTER_CARD')
  type: checkoutCardIssuerType!

  # Last four digits for the given funding instrument (Ex: '2431')
  number: String!

  # Encrypted version of the lat four digits  (Ex: 'ABcK1jYv.0IWASX72C-UCE-09crt3uFbkQwhWpnIC.jYt4yRFQjBvw')
  encryptedNumber: String!

  # Bank identification number for given payment card
  bankIdentificationNumber: String

  # Associated billing address for given payment cared
  billingAddress: checkoutCheckoutBillingAddress

  # Expire year for the current funding instrument (Ex: '2022')
  expireYear: String

  # Expire month for the current funding instrument (Ex: '01')
  expireMonth: String

  # Currency code for the current funding instrument (Ex: 'EUR')
  currencyCode: String

  # Product class the current funding instrument (Ex: 'CREDIT')
  cardProductClass: checkoutFundingInstrumentSubType

  # Flag indicates is a partial_fpan or not
  partialFpan: Boolean

  # Name of the account owner
  accountOwnerName: checkoutPersonName
}

# Encapsulates all properties related to a ThreeDSContingencyContextData type
type checkoutThreeDSContingencyContextData {
  # Card source (Ex: 'CARD_STATE')
  source: checkoutThreedsContingencySourceType

  # Reason for 3DS (2.0) contingency (Ex: 'PAYPAL_POLICY')
  reason: checkoutThreedsContingencyReasonType

  # Unique ID for 3DS (2.0) transaction, each transaction will have a unique referenceId
  # generated by paymentsetupapiserv (Ex: '20200336306496587')
  referenceId: String!

  # Cardinal commerce url to launch for device data collection from the client
  # (Ex: 'https://centinelapistag.cardinalcommerce.com/V1/Cruise/Collect')
  deviceDataCollectionUrl: checkoutGenericURL

  # JWT related information which contains issuer, orgUnitId, validity & type
  # This is required for the subsequent JWT token creation
  jwtSpecification: checkoutThreeDSJwtSpecification
}

# Types for threeDS contingency source.
enum checkoutThreedsContingencySourceType {
  # Unknown
  UNKNOWN

  # payment context - at transaction
  PAYMENT_CONTEXT

  # paypal risk triggers this
  PAYPAL_RISK

  # threeDs contingency for third start card (card added at profile but not resolved contingency)
  CARD_STATE

  # threeDs because of authorization requirement
  AUTHORIZATION
}

# Types for threeDS contingency reason.
enum checkoutThreedsContingencyReasonType {
  # Unknown
  UNKNOWN

  # Regulatory mandate
  REGULATORY_MANDATE

  # Merchant Requested
  MERCHANT_REQUESTED

  # PayPal Policy
  PAYPAL_POLICY

  # Soft Decline
  SOFT_DECLINE
}

# Encapsulates all properties related to a ThreeDSJwtSpecification which
# include the issuer and validity algorithem & etc
type checkoutThreeDSJwtSpecification {
  # JWT issuer returned from contingency data (Ex: '5cb5d0582ee58f1f8c35c33e')
  jwtIssuer: String!

  # JWT org unit ID returned from contingency data (Ex: '5d0c1e91031e732650d22a25')
  jwtOrgUnitId: String!

  # Encryption type (Ex: 'JWT')
  type: String

  # JWT validity duration (Ex: 'PT1H')
  jwtDuration: String!
}

# Encapsulates the cvv data that will be returned when a confirm credit card cvv payment contingency is surfaced by PAPS
type checkoutConfirmCreditCardCvvContingency {
  # The encrypted id of the user's credit card
  encryptedId: String!

  # The last 4 digits of the user's credit card number
  lastFourDigits: String!

  # The user's card issuer
  type: checkoutCardIssuerType!
}

# Encapsulates all properties related to a SepaMandateAcceptenceNeededContingency type
type checkoutSepaMandateAcceptenceNeededContingency {
  # bankAccount related to contingency
  bankAccount: checkoutBankAccount
}

# The metadata for a particular bank account
type checkoutBankAccount {
  # A unique identifier for the bank account within the PayPal system
  id: String!

  # Short name for the bank account created by the user
  nickname: String

  # The bank account's type
  type: checkoutBankAccountType!

  # The bank account's routing number
  routingNumber: String!

  # The bank account number
  accountNumber: String!

  # The last characters of the bank account's account number
  accountNumberShort: String!

  # The bank identifier code
  bankIdentifierCode: String!

  # The bank account's currency code
  currencyCode: String!

  # The bank account's beneficiaries
  beneficiaries: [checkoutBankAccountBeneficiary]!

  # The bank account's billing address
  billingAddress: checkoutGenericAddress

  # The bank account issuer's information
  issuer: checkoutBankAccountIssuer

  # The bank account creditor's information
  creditor: checkoutBankAccountCreditor
}

# An enumeration of bank types that a bank account can identify with
#
# Reference: https://ppaas/api/3719176155268854#apiReference
enum checkoutBankAccountType {
  # A business checking account
  BUSINESS_CHECKING

  # A business savings account
  BUSINESS_SAVINGS

  # A checking account
  CHECKING

  # A custom account type
  CUSTOM

  # A normal account type
  NORMAL

  # A savings account type
  SAVINGS

  # An unknown account type
  UNKNOWN
}

# Bank Account Beneficiary Information
type checkoutBankAccountBeneficiary {
  # The full name of the bank account's beneficiary.
  fullName: String!
}

# The attributes of an individual bank account's issuer
type checkoutBankAccountIssuer {
  # An issuer's name
  name: String!

  # An issuer's city
  city: String!

  # An issuer's country code
  country: checkoutCountryCodes!

  # An issuer's branch location
  branchLocation: String
}

# The attributes of an invidual bank account's creditor (the settler of the transaction)
type checkoutBankAccountCreditor {
  # A creditor's insitutional ID
  id: String!

  # A creditor's name
  name: String!

  # The address of the creditor
  address: checkoutGenericAddress
}

# Encapsulates all properties related to a PaycodeContingency type
type checkoutPaycodeContingency {
  # Resolution contingency name (Ex: 'PAYER_ACTION_REQUIRED')
  name: String

  # Resolution cause for current contingency (Ex: 'NEED_3D_SECURE_AUTHENTICATION')
  causeName: String!

  # Number of attempts to clear the paycode contingency
  attempts: Int
}

# Encapsulates solo plans and split plans.
# A solo plan is one that only is associated with one primary funding option.
# A split plan is one that has secondary funding options.
type checkoutPlanTypes {
  # A plan with one funding option.
  soloPlan: checkoutPlan

  # A plan with more than one funding option.
  splitPlans: [checkoutPlan]
}

# Encapsulates all properties related to a locale.
#
# CheckoutLocale differs from GenericLocale,
# because it takes into account Merchant preferences and
# SetExpressCheckout API parameters.
#
# CheckoutLocale should be used for Checkout specific use cases.
# GenericLocale should be used for all other use cases.
# Ex: country, language, directionality, etc.
type checkoutCheckoutLocale implements checkoutLocale {
  # A locale's country (Ex: 'US')
  country: String

  # A locale's culture (Ex: 'en-US')
  culture: String

  # A locale's directionality (Ex: 'ltr')
  directionality: checkoutDirectionality

  # A locale's language (Ex: 'en')
  language: String

  # A locale's locale (Ex: 'en_US')
  locale: String
}

# Encapsulates all properties related to a merchant. Ex: merchantId, email
type checkoutMerchant {
  # Merchant's ID (Ex: '7VJPAEVGH7B6A')
  merchantId: String

  # The country this merchant is located in
  country: checkoutCountryCodes

  # Merchant descriptor (for bank statements)
  descriptor: String!

  # Merchant's email address.
  email: checkoutEmail
    @deprecated(
      reason: "Merchant email is PII data & should not be passed to Clients"
    )

  # The locale of this merchant
  locale: checkoutGenericLocale

  # Merchant's logo.
  logo: checkoutGenericURL

  # Merchant's brand name.
  name: String

  # Bill Pay Integrator's name.
  billPayIntegratorName: String

  # Indicates type of checkout integration
  solution: checkoutCheckoutSolutionType!

  # Indicates eligibility for trusted beneficiary opt-in experience
  isEligibleForTrustedBeneficiaryOptIn: Boolean

  # Merchant is gaming and gambling
  isGambling: Boolean

  # Indicates whether this merchant's charity status has been confirmed by PayPal
  isPaypalConfirmedCharity: Boolean

  # Indicates whether this merchant has been marked as a trusted beneficiary by the associated user
  isTrustedBeneficiary: Boolean
    @deprecated(
      reason: "Use isEligibleForTrustedBeneficiaryOptIn instead for deciding whether or not to render the Trusted Beneficiary experience"
    )

  # Returns a list of cobrands associated with this merchant
  cobrands: [String]

  # The preferences the Merchant has set
  preferences: checkoutMerchantPreferences

  # Indicates whether or not credit cards are allowed for an specific merchant
  isCreditDisallowedForMerchant: Boolean

  # The Funding Instruments that are NOT allowed for a transaction based on merchant's configurations
  disallowedFundingInstrumentsForMerchant: [checkoutFundingInstrumentSubType]
}

# Types of checkout integration
enum checkoutCheckoutSolutionType {
  # Buyer must have a PayPal account to check out.
  MARK

  # Buyer can check out without creating a PayPal account. This is referred to as PayPal Account Optional.
  SOLE

  # See https://developer.paypal.com/docs/classic/express-checkout/ec-shortcut/
  SHORTCUT
}

# Encapsulates all properties related to a merchant's preferences. Ex: autoReturn, PDT
type checkoutMerchantPreferences {
  # If set to true automatically redirects back to merchant site
  autoReturnToMerchant: Boolean

  # If set to true enables paymentDataTransfer to merchant
  enablePaymentDataTransfer: Boolean

  # Return URL of the seller set in auto return setting (different from cart return url)
  returnUrl: String
}

# Allows you to query for credit metadata
type checkoutCreditMeta {
  # Indicates whether there was upstream (merchant) credit presentment
  upstreamCreditPresentment: Boolean!

  # Indicates whether the merchant is an EZP (Easy Payments) merchant
  easyPaymentsMerchant: Boolean!

  # Credit suggestion text
  #
  # A short phrase highlighting credit options to the user
  # Example: 'More ways to pay over time'
  creditSuggestionText: String

  # Credit suggestion call-to-action text
  #
  # Call-to-action text that can be used with creditSuggestion
  # Example: 'See offers'
  creditSuggestionCTAText: String

  # Secondary credit suggestion text
  #
  # Similar to creditSuggestionText, but may be a different phrase used in a
  # different location on the frontend
  secondaryCreditSuggestionText: String

  # Secondary credit suggestion call-to-action text
  #
  # Call-to-action text for the secondaryCreditSuggestion
  # Example: 'See offers'
  secondaryCreditSuggestionCTAText: String
}

# Encapsulates all properties related to a credit PPC offer for the RYI page.
# Average SLA response time - 50ms
type checkoutCreditPPCOffer {
  # A marketing offer's reference ID.
  referenceId: String

  # A marketing offer's touchpoint used as campaign placement code.
  touchpoint: String

  # Rank of this specific offer within the overall list.  Rank will not necessarily
  # be consecutive if other touchpoints had higher priorities.
  rank: Int

  # Indicates whether this message is 'selected'.
  # This only apply to:
  # - credit re-use offers
  #   (since you can't pre-select any acquistion offer for the user)
  #   When isSelected: true for a re-use offer it means that the credit FI
  #   is the buyer's default selected FI
  # - multi-offer messages
  #   When isSelected: true for a multi-offer message it means that it will be
  #   pre-selected inside the RYI
  isSelected: Boolean

  # Indicates whether this message is associated to an 'approved' GPL-FI.
  # Currently, this only apply to multi-offer messages;
  isApproved: Boolean

  # A marketing offer's content.
  # An object of key/values that are relevant to a campaign.  This is an opaque
  # object, so be very careful removing fields and do not change existing fields
  content: checkoutJSON

  # Uitilities for tracking this offer and the user's interaction with it.
  trackingDetails: checkoutMorsMRTrackingDetails

  # Indicates whether a credit offer is 'qualifying' or not
  qualifyingOffer: Boolean

  # Pay later offer details
  creditPayLater: checkoutCreditPayLater
}

# Encapsulates all properties related to the credit financing option patched to the Cart.
type checkoutCreditFinancingOption {
  # Identifier of the credit option
  financingCode: String

  # Amount to be payed each month
  monthlyPayment: String

  # Total purchase cost + interest
  totalCost: String

  # Total interest amount
  totalInterest: String

  # The percentage, as string. For example, 19.99% interest rate as 19.99.
  apr: String

  # The term (period of time) over which to finance the transaction.
  term: Int

  # Type of credit. For example, INST for installment
  creditType: checkoutCreditOfferType

  # True if credit fee is funded by PayPal
  paypalSubsidy: Boolean

  # Monthly interest rate. For example, 1.08% interest rate as 1.08.
  monthlyPercentageRate: String
}

# Encapsulates all properties related to a credit as FI offer for the RYI page that a user selected.
# Average SLA response time - 50ms - (This might change)
input checkoutSelectedCRCOffer {
  # Offer ID for the offer returned by crcofferserv
  crcOfferId: String

  # Financing code is the id for a particular offer returned by credit financing serv.
  financingCode: String
}

# Encapsulates all properties related to the pre-selected FI from Mors/EDS component for Pi30 flows
# Average SLA response time - 50ms - (This might change)
input checkoutSelectedCRCfi {
  # The name associated to the fi (Ex: 'Deutsche Bank')
  name: String!

  # The last four digits of the user's fi number as a String (Ex: '7062')
  lastFourDigits: String!

  # Id of the FI as a string (ex: 'BA-DSJODJSISDNALSD')
  id: String!
}

# Encapsulates all properties related to portable credit integrations.
# Average SLA response time - ??ms
type checkoutCreditApplyPortable {
  # Encrypted payload for initial data to CAP for the GPL flow
  capInitialData: String
}

# Encapsulates all properties related to a SuggestedDonationfor the RYI page.
# Average SLA response time - 50ms
type checkoutSuggestedDonation {
  # A suggested donation reference ID.
  id: ID

  # A suggested donation content, a JSON object includes suggested charity details, donation amount and UI content.
  content: checkoutSuggestedDonationContent

  # Uitilities for tracking this suggested donation and the user's interaction with it.
  trackingDetails: checkoutMorsMRTrackingDetails
}

# Encapsulates all properties related to a SuggestedDonationContent.
type checkoutSuggestedDonationContent {
  # nonprofit name
  nonprofitName: String!

  # nonprofit id defined by cause
  nonprofitId: ID!

  # nonprofit paypal id (aka payer_id)
  nonprofitPayPalId: String

  # nonprofit logo url
  nonprofitLogoUrl: checkoutGenericURL!

  # the suggested nonprofit/charity model id
  modelId: String

  # model score assigned to this suggested nonprofit
  modelScore: String

  # suggested donation amount
  amount: checkoutAmount

  # title message showing at give at checkout feature
  donateMessage: String!

  # promotional message showing at give at checkout feature (optional)
  promoMessage: String

  # legal message header showing at give at checkout feature
  legalDisclaimerHeaderMessage: String

  # legal message body (array) showing at give at checkout feature
  legalDisclaimerBodyMessage: [String]

  # donation purpose message showing at give at checkout email receipt and transaction details
  donationPurpose: String
}

# Encapsulates all data related to a Checkout session's payment contingencies
# Ex: threeDomainSecure, cvvConfirm, etc.
type checkoutPaymentContingencies {
  # A Checkout session's payment contingency ThreeDomainSecure related data.
  # Average SLA response time: 2050ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  threeDomainSecure(
    # List of experiences supported by the client for the 3DS verification
    experiences: [checkoutThreeDSPaymentExperience] = [IFRAME]
  ): checkoutThreeDomainSecureContingency

  # A Checkout session's payment contingency for 3DS (2.0)
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  threeDSContingencyData: checkoutThreeDomainSecureResolutionContingency

  #   A checkout session's payment contingency cvv confirmation related data.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  confirmCreditCardCvvData: checkoutConfirmCreditCardCvvContingency

  # A checkout session's SEPA mandate contingency related data.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  sepaMandateAcceptanceNeeded: checkoutBankAccount

  # A checkout session's payment contingency to get payer consent for fetching the real time bank balance information.
  needConsentForBankAccountInfoRetrieval: checkoutOpenBankingContingency

  # A checkout session's payment contingency on fetching the real time bank balance information
  needRealTimeBalanceForBankAccount: checkoutOpenBankingContingency

  # Indicates that Strong Customer Authentication is required.
  # Contains the information needed to pass on to auth modules to resolve this contingency.
  strongCustomerAuthenticationRequired: checkoutStrongCustomerAuthenticationRequiredContingency

  # Indicates that paycode is required.
  # Contains the information needed to pass on to auth modules to resolve this contingency.
  paycodeRequired: checkoutPaycodeContingency
}

# List of supported experiences for 3DS verification
enum checkoutThreeDSPaymentExperience {
  # 3DS within IFrame
  # - The 3DS Bank page is loaded in an iframe within Paypal's Checkout page
  IFRAME

  # Full-page redirect experience
  # - The User is redirected to 3DS Bank Page from Paypal's Checkout Page
  REDIRECT

  # Hopfree 3DS experience
  # - The 3DS Pin is entered in an input field on the Paypal's Checkout Page
  HOPFREE
}

# Encapsulates all properties related to ACS Data
# Ex: redirectUrl, method, status, etc.
type checkoutThreeDomainSecureContingency {
  # The 3D Secure API call status
  status: checkoutAPICallStatus

  # The encrypted id of the user's credit card
  encryptedId: String!

  # The third-party URL to which to redirect the card holder to complete the 3D
  # Secure authentication (Ex: 'https//www.example.com')
  redirectUrl: checkoutGenericURL

  # The method that is used to redirect the card holder to third-party site for 3D secure confirmation (Ex: 'GET')
  method: checkoutHTTPMethod

  # The payment authentication parameter to send to the third-party URL during redirect
  parameter: String

  # The experience for the 3DS verfication (iframe/redirect/hopfree)
  experience: checkoutThreeDSPaymentExperience

  # The parameters required to be passed to the bank page for completing 3DS verification
  requestParams: [checkoutThreeDSRequestParams]
}

# An enumeration of all potential API status calls returned when returned in body
enum checkoutAPICallStatus {
  # Success
  SUCCESS

  # Failure
  FAILED
}

# An enumeration of types that HTTPMethod can have. GET, POST, PUT, DELETE, etc.
enum checkoutHTTPMethod {
  # GET
  GET

  # HEAD
  HEAD

  # POST
  POST

  # PUT
  PUT

  # DELETE
  DELETE

  # CONNECT
  CONNECT

  # OPTIONS
  OPTIONS

  # PATCH
  PATCH

  # REDIRECT
  REDIRECT
}

# Encapsulates everything related to request params provided by bank for completing 3DS verification
type checkoutThreeDSRequestParams {
  # The type of the request param
  key: String

  # Value of the request param
  value: String
}

# Encapsulates all properties related to open banking contingency
type checkoutOpenBankingContingency {
  # The bank id or the funding option id of the bank which has the RTB
  # contingencies[either fetch real time balance or get user consent]
  encryptedId: String!
}

# Data required to resolve the Strong Customer Authentication (SCA) Contingency.
# Before completing checkout or updating any account related info, user needs to complete another auth flow.
type checkoutStrongCustomerAuthenticationRequiredContingency {
  # ID to be passed to the auth flow that will be collecting the user's auth, as part of the arguments.
  contextId: ID
}

# Encapsulates all properties related to a generic address.
# Ex: line1, city, state, postalCode, fullAddress, etc.
type checkoutCheckoutShippingAddress implements checkoutAddress {
  # An Address ID (Ex: '285166')
  addressId: String

  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine1 instead for portable format."
    )

  # An Address second line street address (Ex: 'Apt 123')
  line2: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine2 instead for portable format."
    )

  # An Address city (Ex: 'San Jose')
  city: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea2 instead for portable format."
    )

  # An Address state/province (Ex: 'CA')
  state: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea1 instead for portable format."
    )

  # An Address postal code (Ex: '95131')
  postalCode: String

  # An Address two-letter country code (Ex: 'US')
  country: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use countryCode instead for portable format."
    )

  # An Address on a single line
  # (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String

  # Portable address: An address first line street address
  addressLine1: String

  # Portable address: An address second line street address
  addressLine2: String

  # Portable address: An address third line street address
  addressLine3: String

  # Portable address: An address first line admin area
  adminArea1: String

  # Portable address: An address second line admin area
  adminArea2: String

  # Portable address: An address third line admin area
  adminArea3: String

  # Portable address: An address forth line admin area
  adminArea4: String

  # Portable address: An address two-letter country code
  countryCode: String

  # If an Address is the default shipping address
  isDefaultShipping: Boolean
    @deprecated(
      reason: "CheckoutShippingAddress.isDefaultShipping has been deprecated because 'Shipping' is redundant when part of the CheckoutShippingAddress type.  Use 'isDefault' instead."
    )

  # If an Address is the default shipping address
  isDefault: Boolean

  # If an Address is the primary address
  isPrimary: Boolean

  # If an Address is disabled for transaction
  isDisabled: Boolean

  # An Address is selected. If you are listing out addresses in a UI, and
  # need to show that an address is selected, use this property.
  isSelected: Boolean

  # The type of Address (Ex: 'BILLING')
  type: checkoutAddressType

  # A name associated with the address
  name: checkoutPersonName

  # The suggested reformatted address
  suggestedAddress: checkoutValidatedAddress

  # A full name associated with an Address, as a String (Ex: 'John Doe')
  fullName: String
    @deprecated(
      reason: "CheckoutShippingAddress.fullName has been deprecated bceause 'name' is a better alternative being a PersonName type, rather than a String.  Use 'name' instead."
    )
}

# Encapsulates all properties we want to extract from a validated address. Ex: line1, city, postalCode
type checkoutValidatedAddress {
  # Returns true if the address is valid
  isValidAddress: Boolean

  # Returns true if the address was reformatted
  isReformatted: Boolean

  # Shows which fields need fixing from the user.
  badFields: checkoutAddressFieldBools!

  # Shows the degree of confidence with respect to the mailability of the address.
  mailability: String

  # Shows the original and reformatted address in an array of address parts as formatted by Griffin
  formatAddressHistory: checkoutGriffinFormattedAddresses

  # Shows the full address in multiple lines that is formatted by AMS
  formattedAddress: [String]!

  # A billing address first line street address (Ex: '2211 North 1st St')
  line1: String

  # A billing address second line street address (Ex: 'Apt 123')
  line2: String

  # A billing address city (Ex: 'San Jose')
  city: String

  # A billing address state/province (Ex: 'CA')
  state: String

  # A billing address postal code (Ex: '95131')
  postalCode: String

  # A billing address two-letter country code (Ex: 'US')
  country: String

  # Portable address: An address first line street address
  addressLine1: String

  # Portable address: An address second line street address
  addressLine2: String

  # Portable address: An address third line street address
  addressLine3: String

  # Portable address: An address first line admin area
  adminArea1: String

  # Portable address: An address second line admin area
  adminArea2: String

  # Portable address: An address third line admin area
  adminArea3: String

  # Portable address: An address forth line admin area
  adminArea4: String

  # Portable address: An address two-letter country code
  countryCode: String

  # Metadata returned by AMS. A structure representing information about the
  # address elements itself after the verification process. This includes how
  # similar the value is to the input and what changes were made to the value.
  amsMetadata: checkoutAMSMetadata

  # Address Type
  addressType: checkoutAMSAddressTypeCode
}

# True or False values for each element of an address
type checkoutAddressFieldBools {
  # A billing address first line street address (Ex: '2211 North 1st St')
  line1: Boolean

  # A billing address second line street address (Ex: 'Apt 123')
  line2: Boolean

  # A billing address city (Ex: 'San Jose')
  city: Boolean

  # A billing address state/province (Ex: 'CA')
  state: Boolean

  # A billing address postal code (Ex: '95131')
  postalCode: Boolean

  # A billing address two-letter country code (Ex: 'US')
  country: Boolean

  # Portable address: An address first line street address
  addressLine1: Boolean

  # Portable address: An address second line street address
  addressLine2: Boolean

  # Portable address: An address third line street address
  addressLine3: Boolean

  # Portable address: An address first line admin area
  adminArea1: Boolean

  # Portable address: An address second line admin area
  adminArea2: Boolean

  # Portable address: An address third line admin area
  adminArea3: Boolean

  # Portable address: An address forth line admin area
  adminArea4: Boolean

  # Portable address: An address two-letter country code
  countryCode: Boolean
}

# A container for Griffin Formatted Addresses
type checkoutGriffinFormattedAddresses {
  # The normalized address returned by ANS
  formattedNormalizedAddress: [String]

  # The address entered by the user
  formattedOriginalAddress: [String]
}

# Metadata returned by AMS response
type checkoutAMSMetadata {
  # Similarities
  similarities: checkoutAddressElementsMetadata

  # Transformations
  transformations: checkoutAddressElementsMetadata

  # Postal Relevances
  postalRelevances: checkoutAddressElementsMetadata
}

# Lists of all address elements that makes an address. The value of the address
# field elements are mapped from the metadata response from AMS
# address-verify API. Some of the fields in this type are non-portable additional
# address details that are sometimes needed for compliance, risk,
# or other scenarios where fine-grain address information might be needed. Not
# portable with common third party and open source. Redundant with core fields.
# For example, address_portable.address_line_1 is usually a combination of
# address_details.street_number, street_name, and street_type
type checkoutAddressElementsMetadata {
  # The street number in an address element. Example: 15 in 15 Hawthorne Way
  streetNumber: checkoutAMSMetadataValues

  # The street name in an address element. Example: Hawthorne Way in 15 Hawthorne Way
  streetName: checkoutAMSMetadataValues

  # The street type. For example, avenue, boulevard, road, or expressway.
  streetType: checkoutAMSMetadataValues

  # The delivery service. Post office box, bag number, or post office name.
  deliveryService: checkoutAMSMetadataValues

  # A named locations that represents the premise. Usually a building name or
  # number or collection of buildings with a common name or number. For example, Craven House
  buildingName: checkoutAMSMetadataValues

  # The first-order entity below a named building or location that represents the
  # sub-premise. Usually a single building within a collection of buildings with a
  # common name. Can be a flat, story, floor, room, or apartment.
  subBuilding: checkoutAMSMetadataValues

  # The highest level sub-division in a country, which is usually a province,
  # state, or ISO-3166-2 subdivision. Format for postal delivery.
  # For example, `CA` and not `California`. Value, by country, is: UK -> a county.
  # US -> a state. Canada -> a province. Japan -> a prefecture.
  # Switzerland -> a kanton.
  adminArea1: checkoutAMSMetadataValues

  # Smaller than admin area 1. A city, town, or village.
  adminArea2: checkoutAMSMetadataValues

  # Smaller than admin area 2. A sub-locality, suburb, neighborhood, or district.
  # Value is: Brazil: Suburb, bairro, or neighborhood. India: Sub-locality or district.
  # Street name information is not always available but a sub-locality or district can be a very small area.
  adminArea3: checkoutAMSMetadataValues

  # Smaller than admin area 3. The neighborhood, ward, or district. Value is:The postal sorting code for
  # Guernsey and many French territories, such as French Guiana. The fine-grained administrative levels in China.
  adminArea4: checkoutAMSMetadataValues

  # Two digit ISO2 representation of the country.
  countryCode: checkoutAMSMetadataValues

  # The postal code, which is the zip code or equivalent. Typically required for
  # countries with a postal code or an equivalent. See [postal
  # code](https://en.wikipedia.org/wiki/Postal_code).
  postalCode: checkoutAMSMetadataValues
}

# An enumeration of AMS Metadata response values.
# Doc: https://engineering.paypalcorp.com/confluence/pages/viewpage.action?pageId=901150143#LocationSpecfieldsDefinitions-AddressElementMetadata
# API: https://ppaas/api/3719176155272334#apiReference
enum checkoutAMSMetadataValues {
  # Could mean undetermined in following context: metadata.similarities, metadata.tranformations, metadata.postal_relevances
  UNDETERMINED

  # Could mean invalid in following context: metadata.similarities
  INVALID

  # Could mean not a match in following context: metadata.similarities
  NO_MATCH

  # Could mean partial match in following context: metadata.similarities
  PARTIAL_MATCH

  # Could mean match in following context: metadata.similarities
  MATCH

  # Could mean unchanged in following context: metadata.transformations
  UNCHANGED

  # Could mean standardized in following context: metadata.transformations
  STANDARDIZED

  # Could mean updated in following context: metadata.transformations
  UPDATED

  # Could mean a minor change in following context: metadata.transformations
  MINOR_CHANGE

  # Could mean a major change in following context: metadata.transformations
  MAJOR_CHANGE

  # Could mean newly introduced value in following context: metadata.transformations
  NEWLY_INTRODUCED

  # Could mean irrelevant in following context: metadata.postal_relevances
  IRRELEVANT

  # Could mean optional in following context: metadata.postal_relevances
  OPTIONAL

  # Could mean mandatory in following context: metadata.postal_relevances
  MANDATORY
}

# Address Type Codes sent by AMS. https://ppaas/api/3719176155272334#apiReference
#  B: Building.
#  F: Company or Firm.
#  G: General delivery address.
#  H: High-rise Building.
#  L: Large volume receiver.
#  M: Military address.
#  P: Post Office Box (PO Box).
#  R: Rural route address.
#  S: Street address.
#  U: Unidentified address.
enum checkoutAMSAddressTypeCode {
  # Building
  B

  # Company or Firm
  F

  # General delivery address
  G

  # High-rise Building
  H

  # Large volume receiver
  L

  # Military address
  M

  # Post Office Box (PO Box)
  P

  # Rural route address
  R

  # Street address
  S

  # Unidentified address
  U
}

# An enumeration of User Action in Checkout Session. CONTINUE, PAY_NOW
enum checkoutCheckoutUserAction {
  # Continue button appears when the final amount is not known
  # and buyer needs to get redirected to the merchant page without processing the payment."
  CONTINUE

  # Pay Now button appears when the final amount is known
  # and merchant wants to process the payment immediately when the buyer clicks Pay Now."
  PAY_NOW
}

# Enumeration to identify different checkout sessions such as Billing with purchase, or just purchase with no billing type
enum checkoutCheckoutSessionType {
  # PURCHASE. Default checkout session type
  PURCHASE

  # BILLING_WITH_PURCHASE. Session Type where a Billing Agreement is created with purchase.
  BILLING_WITH_PURCHASE

  # BILLING_WITHOUT_PURCHASE. A user is creating/updating a billing agreement without doing a purchase.
  BILLING_WITHOUT_PURCHASE
}

# An enumeration of white-listed offer programs
enum checkoutOfferPrograms {
  # Split Tender (inactive)
  SPLIT_TENDER
    @deprecated(reason: "Offer program budget reached, inactive offer")
}

# Provides the user's current SCA status and exemption reason, if any
type checkoutSecureCustomerAuthenticationContext {
  # The buyer's current SCA status
  status: checkoutSecureCustomerAuthenticationStatus

  # The reason the buyer was exempted from SCA (if any)
  exemptReason: checkoutSecureCustomerAuthenticationExemptReason
}

# An enumeration of possible SecureCustomerAuthenticationContext statuses
enum checkoutSecureCustomerAuthenticationStatus {
  # User has completed SCA
  COMPLETE

  # User has provided at most one factor of authentication
  IN_PROGRESS

  # User is exempt from SCA
  EXEMPT
}

# An enumeration of possible SecureCustomerAuthenticationContext statuses
enum checkoutSecureCustomerAuthenticationExemptReason {
  # Exempt from SCA as the cart total is below the threshold
  LOW_VALUE_TRANSACTION

  # Exempt as user has marked the merchant as a trusted beneficiary
  TRUSTED_BENEFICIARY

  # Exempt as the buyer is not present
  BUYER_NOT_PRESENT

  # Exempt as this is a reference transaction
  REFERENCE_TRANSACTION
}

# Encapsulates the Split Funding Option object item
type checkoutSplitFundingOptions {
  # Funding Instrument ID
  id: ID!

  # Funding Instrument Object
  fundingInstrument: checkoutFundingInstrument!

  # Determines eligibility for a Primary/Backup funding instrument
  isEligibleForPrimaryInstrument: Boolean!

  # Highlights the maxiumum amount for this funding instrument if there is a limit
  availableAmount: checkoutAmount

  # Determine if user must use the full amount for this instrument like INCENTIVEs
  mustUseFullAmount: Boolean!

  # Determines whether user can edit the amount in the UX
  canEditAmount: Boolean!

  # List of Funding Instrument IDs this funding option can split with
  canSplitWith: [ID]!
}

# Supported funding sources returned by IDS(Instrument Definition Service)
type checkoutSupportedFundingSource {
  # Brand name of the funding source(Ex: 'VISA', 'AMEX', 'MASTER_CARD', 'DISCOVER')
  brand: checkoutCardIssuerType

  # Logo image of the funding source brand
  brandLogoUrl: checkoutGenericURL

  # Issuers of the funding source brand
  issuers: [checkoutSupportedFundingSourceIssuer]
}

# Issuers of a funding source's brand returned by IDS
type checkoutSupportedFundingSourceIssuer {
  # Issuer's name
  name: String

  # Issuer's possible subtypes(Ex: 'CREDIT', 'DEBIT')
  usage: [checkoutFundingInstrumentSubType]

  # Issuer's logo image url
  issuerLogoUrl: checkoutGenericURL

  # Issuer's priority rank to show
  rank: Int
}

# Encapsulates all properties related to a completed payment.
type checkoutCompletedPaymentInfo {
  # The transaction's ID (Ex: '57E19243DN3823220').
  transactionId: String

  # The receipt ID (Ex: '8L1648555R462703G').
  receiptId: String

  # The transaction's state (Ex: 'COMPLETED' or 'PENDING').
  transactionState: checkoutTransactionState

  # Soft descriptor about the merchant, appears on bank statements (Ex: 'PP*SPECIALDAYW').
  softDescriptor: String

  # Postback data about payment that merchant's can leverage
  postbackData: checkoutJSON
}

# An enumeration of states that a Transaction can be in.
# PENDING, COMPLETED, REFUNDED, PARTIALLY_REFUNDED or DENIED
enum checkoutTransactionState {
  # The transaction is pending.
  PENDING

  # The transaction has successfully completed.
  COMPLETED

  # The transaction was fully refunded.
  REFUNDED

  # The transaction was partially refunded.
  PARTIALLY_REFUNDED

  # PayPal has declined to process this transaction.
  DENIED

  # Transaction authorized
  AUTHORIZED
}

# Encapsulates all properties related to an Amount.
input checkoutAmountInput {
  # Amount's currency code (Ex: 'USD')
  currencyCode: String

  # Amount's currency value (Ex: '0.01')
  currencyValue: String
}

# Encapsulates all properties related to the cryptocurrency quote.
type checkoutCryptocurrencyQuote {
  # Quote ID
  id: String

  # Symbol of the cryptocurrency
  symbol: checkoutCryptocurrencySymbol

  # Total amount that user's crypto asset is worth
  totalAmount: checkoutAmount

  # Quantity of the asset that would be used for the sell
  quantity: String

  # Amount for 1 of the asset (effectively the rate)
  assetPrice: checkoutAmount
}

# Encapsulates all properties related credit offers for non-members.
type checkoutNonMemberCreditOffers {
  # All the eligible non-member offers for a particular transaction
  allOffers: [checkoutNonMemberCreditOffer]
}

# Encapsulates all properties related to an individual credit offer for non members.
type checkoutNonMemberCreditOffer {
  # APR rate for the offer
  apr: checkoutRate

  # Credit type (e.g. INST for installment, NI for no interest, PUI for pay upon invoice, etc)
  creditOfferType: checkoutCreditOfferType

  # Unique identifier representing the credit product being offered
  creditProductIdentifier: checkoutCreditProductType

  # Encapsulates all properties related to the offer's down payment
  downPayment: checkoutCreditDownPayment

  # Estimated installments for a credit offer that has installments
  estimatedInstallments: [checkoutInstallmentSchedule]

  # Flag indicating if the offer is eligible
  isEligible: Boolean

  # Flag indicating if there are additional offers with the same APR, same credit type,
  # and same eligibility
  isMultipleApr: Boolean

  # Flag indicating if the option's credit fee is funded by PayPal.
  # If false it is funded by the merchant
  isPayPalSubsidy: Boolean

  # The monthly percentage rate of the credit offer
  monthlyPercentageRate: checkoutRate

  # The annualized rate - calculated as the monthly rate multiplied by 12
  nominalRate: checkoutRate

  # The currency and amount for a financial transaction, such as a balance or payment due.
  periodicPayment: checkoutAmount

  # The total cost, including principal and interest, of the financed transaction
  totalCost: checkoutAmount

  # The amount of interest to be paid over the course of the financed transaction
  totalInterest: checkoutAmount

  # The total term of the credit offer
  totalNumberOfPayments: Int
}

# Encapsulates all properties related to a rate (i.e. a percentage).
type checkoutRate {
  # Number formatted to the localized style (e.g. 0,25)
  formattedNumber: String

  # Number as a percentage formatted to the localized style (e.g. 0,25 %)
  formattedNumberAsPercentage: String

  # Unformatted number (e.g. 0.25)
  unformattedNumber: String
}

# Encapsulates all properties related to the down payment for a credit offer.
type checkoutCreditDownPayment {
  # The rate of the down payment relative to the total cost
  # e.g. For a $25 down payment on a $100 transaction the rate is 25%
  rate: checkoutRate

  # The total currency amount of the down payment
  amount: checkoutAmount
}

# Encapsulates all properties of existing billing agreement Id.
# Ex: balancePreference, stickyFundingOptionId, billingAgreementId
type checkoutExistingBillingAgreementDetails {
  # Billing Agreement Id, ex: B-55N53089XX761722H
  id: String

  # Sticky fuding instrument of the Billing Agreement
  stickyFundingInstrument: checkoutFundingInstrument

  # Balance Preference of the Billing Agreement
  balancePreference: checkoutBalancePreference
}

# An enumeration of types that a BalancePreference can be.
# OPT_IN or OPT_OUT
enum checkoutBalancePreference {
  # If Buyer chooses to use Balance for BA payments
  OPT_IN

  # If Buyer chooses not to use Balance for BA payments
  OPT_OUT
}

# Address input type
input checkoutAddressInput {
  # The first name of the address (Ex: 'John')
  givenName: String

  # The last name of the address (Ex: 'Smith')
  familyName: String

  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String

  # An Address second line street address (Ex: 'Apt 123')
  line2: String

  # An Address city (Ex: 'San Jose')
  city: String

  # An Address state/province (Ex: 'CA')
  state: String

  # An Address postal code (Ex: '95131')
  postalCode: String

  # An Address two-letter country code (Ex: 'US')
  country: String!

  # An address quality from user
  accountQuality: checkoutAccountQualityAddressInput
}

# Encapsulates all properties related to an Account Quality address.
input checkoutAccountQualityAddressInput {
  # Address's  Auto Complete Type (Ex: 'GOOGLE / BROWSER / UNKNOWN /
  # MERCHANT_PREFILLED / ANS / MANUAL'). This type will be set from specific enum
  # depending on how user chose to auto complete the address
  autoCompleteType: checkoutAddressAutoCompleteType

  # Address's isUserModified (Ex: true/false). This will be set as true incase
  # user selected one of the autoComplete address and still modifies it
  isUserModified: Boolean

  # 2FA verfication id if buyer has initialized phone confirmation during checkout onboarding flow
  twoFactorPhoneVerificationId: String
}

# An enumeration of types that an address can be completed by an user. (Ex:
# 'GOOGLE / BROWSER / UNKNOWN / MERCHANT_PREFILLED / ANS / MANUAL')
enum checkoutAddressAutoCompleteType {
  # An address populated from Google
  GOOGLE

  # An address selected by user incase auto-populated from BROWSER
  BROWSER

  # An address unknown
  UNKNOWN

  # An address populated from Merchant
  MERCHANT_PREFILLED

  # An address populated from normalized service
  ANS

  # An address added manually by user
  MANUAL
}

# Card input type represents a card to be added to an account
input checkoutCardInput {
  # 13 to 19 digits number of a card. (Ex: '4111111111111111')
  cardNumber: String!

  # Postal code of  (Ex: '123')
  postalCode: String

  # 3 or 4 digits security code of a card (Ex: '123')
  securityCode: String

  # Expiration date of a card (Ex: '02/2020')
  expirationDate: String

  # Starting month for the given card. (Ex: '01', '02', '12')
  issueDate: String

  # The card issuer as a CardIssuerType (Ex: 'VISA', 'AMEX', 'MASTER_CARD', 'DISCOVER')
  type: checkoutCardIssuerType

  # Card product class (Ex: 'CREDIT', 'DEBIT')
  productClass: checkoutCardProductClass
}

# An enumeration of types that card product classes
# CREDIT, DEBIT
enum checkoutCardProductClass {
  # Credit Card
  CREDIT

  # Debit Card
  DEBIT

  # Gift Card
  GIFT

  # Mixed card
  MIXED

  # PayPal Prepaid card
  PAYPAL_PREPAID

  # Prepaid card
  PREPAID

  # Tokenized card
  TOKENIZED

  # Vaulted card
  VAULTED

  # Unknown card
  UNKNOWN
}

# An enumeration of intents that a Cart can have. SALE, AUTHORIZE, or ORDER
enum checkoutFundingEligibilityIntent {
  # The Cart's intent is for Sale transactions
  SALE

  # The Cart's intent is for Capture transactions
  CAPTURE

  # The Cart's intent is for Auth transactions
  AUTHORIZE

  # The Cart's intent is for Order transactions
  ORDER

  # Tokenize only, with no transaction
  TOKENIZE

  # Subscription only, with no transaction
  SUBSCRIPTION
}

# Supported payment methods
enum checkoutSupportedPaymentMethodsType {
  # Credit card
  CARD

  # PayPal Credit
  CREDIT

  # PayPal Pay Later
  PAYLATER

  # Venmo
  VENMO

  # Itau
  ITAU

  # ELV -- Used typically in Europe -- [Link](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area)
  ELV

  # SEPA -- Used typically in Europe -- [Link](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area)
  SEPA

  # IDEAL -- Used in the Netherlands -- [Link](https://www.ideal.nl/en/consumers/what-is-ideal/)
  IDEAL

  # BANCONTACT -- Used typically in Belgium -- [Link](https://www.bancontact.com/en/what-does-bancontact-stand-for)
  BANCONTACT

  # GIROPAY -- Used typically in Germany -- [Link](https://en.wikipedia.org/wiki/Giropay)
  GIROPAY

  # EPS -- Used typically in Austria -- [Link](https://www.adyen.com/payment-methods/eps)
  EPS

  # SOFORT -- Used typically in Germany -- [Link](https://www.adyen.com/payment-methods/sofort)
  SOFORT

  # MYBANK -- Used typically in Italy -- [Link](https://www.mybank.eu/)
  MYBANK

  # P24 -- Used typically in Poland -- [Link](https://stripe.com/docs/sources/p24)
  P24

  # Zimpler -- Used typically for gambling -- [Link](https://www.zimpler.com/)
  ZIMPLER

  # WeChat Pay -- Used in China -- [Link](https://stripe.com/docs/sources/wechat-pay)
  WECHATPAY

  # Blik -- Used in poland -- [Link](ask product)
  BLIK

  # Trustly -- Used in poland -- [Link](ask product)
  TRUSTLY

  # Payu -- Used in poland -- [Link](ask product)
  PAYU

  # OXXO -- Used in Mexico -- [Link](https://www.allpago.com/our-services/mexican-payment-processing/)
  OXXO

  # Boleto -- Used in Brazil -- [Link](https://en.wikipedia.org/wiki/Boleto)
  BOLETO

  # Boletobancario -- Used in Brazil -- [Link](https://en.wikipedia.org/wiki/Boleto)
  BOLETOBANCARIO

  # Maxima -- Used in Lithuania -- [Link](https://docs.paymentwall.com/payment-method/maxima)
  MAXIMA

  # Mercadopgo -- Used in brazil and mexico -- [Link](https://www.mercadopago.com.ar/)
  MERCADOPAGO

  # Multibanco -- Used in portugal  -- [Link](https://en.wikipedia.org/wiki/multibanco)
  MULTIBANCO

  # Satispay -- Used in multiple European countries -- -- [Link](https://www.satispay.com/it-it/)
  SATISPAY

  # Apple Pay -- [Link](https://en.wikipedia.org/wiki/Apple_Pay)
  APPLEPAY

  # Paidy -- Used in Japan -- [Link](https://en.wikipedia.org/wiki/Paidy)
  PAIDY
}

# Supported card vendors
enum checkoutSupportedCardsType {
  # VISA
  VISA

  # MASTERCARD
  MASTERCARD

  # AMERICAN EXPRESS
  AMEX

  # DISCOVER
  DISCOVER

  # JCB
  JCB

  # ELO
  ELO

  # HIPER
  HIPER
}

# Encapsulates all properties related to eligible Payment Methods.
type checkoutFundingEligibility {
  # PayPal
  paypal: checkoutPaymentEligibility!

  # Cards
  card: checkoutCardEligibility!

  # PayPal Credit
  credit: checkoutPaymentEligibility!

  # PayPal Pay Later
  paylater: checkoutPaymentEligibility!

  # Venmo
  venmo: checkoutPaymentEligibility!

  # Itau
  itau: checkoutPaymentEligibility!

  # Sepa
  sepa: checkoutPaymentEligibility!

  # Ideal
  ideal: checkoutPaymentEligibility!

  # Bancontact
  bancontact: checkoutPaymentEligibility!

  # Giropay
  giropay: checkoutPaymentEligibility!

  # EPS
  eps: checkoutPaymentEligibility!

  # SOFORT
  sofort: checkoutPaymentEligibility!

  # MYBANK
  mybank: checkoutPaymentEligibility!

  # p24
  p24: checkoutPaymentEligibility!

  # Zimpler
  zimpler: checkoutPaymentEligibility!

  # WeChat Pay
  wechatpay: checkoutPaymentEligibility!

  # Blik
  blik: checkoutPaymentEligibility!

  # Payu
  payu: checkoutPaymentEligibility!

  # Trustly
  trustly: checkoutPaymentEligibility!

  # OXXO
  oxxo: checkoutPaymentEligibility!

  # Boleto
  boleto: checkoutPaymentEligibility!

  # Boletobancario
  boletobancario: checkoutPaymentEligibility!

  # Maxima
  maxima: checkoutPaymentEligibility!

  # Mercadopago
  mercadopago: checkoutPaymentEligibility!

  # ApplePay
  applepay: checkoutPaymentEligibility!

  # Multibanco
  multibanco: checkoutPaymentEligibility!

  # Satispay
  satispay: checkoutPaymentEligibility!

  # Paidy
  paidy: checkoutPaymentEligibility!
}

# Container type for payment eligibility flags for EPM (eligible payment methods)
type checkoutPaymentEligibility {
  # Whether or not a user is eligible for a payment type (Ex: VENMO)
  eligible: Boolean

  # Reasons why a payment is eligible
  reasons: [String]!

  # whether the payment method is branded or not
  branded: Boolean

  # Whether or not payment type is vaultable
  vaultable: Boolean

  # Vaulted Instruments for payment method
  vaultedInstruments: [checkoutVaultInstrumentData]

  # Child products for a given funding source
  products: checkoutFundingProductsEligibility!
}

# Data for vaulted instrument
type checkoutVaultInstrumentData {
  # id representing the vaulted instrument
  id: String

  # label representing the vaulted instrument
  label: checkoutVaultInstrumentLabelInfo
}

# Label Info for Vaulted Instrument
type checkoutVaultInstrumentLabelInfo {
  # Description for the vaulted instrument (Ex: PayPal for foo.bar.com)
  description: String
}

# Container type for a funding source's child product eligibility
type checkoutFundingProductsEligibility {
  # Credit
  credit: checkoutFundingProductEligibility!

  # Pay In 4
  payIn4: checkoutFundingProductEligibility!

  # Pay In 3
  payIn3: checkoutFundingProductEligibility!

  # Pay Later
  paylater: checkoutFundingProductEligibility!

  # EZ Pay
  ezpay: checkoutFundingProductEligibility!

  # Pay After Delivery
  pad: checkoutFundingProductEligibility!
}

# Container type for funding product eligibility
type checkoutFundingProductEligibility {
  # Whether or not a user is eligible for a funding product
  eligible: Boolean

  # Used to determine the localization source of a funding product
  variant: String

  # Reasons why a funding product is eligible. This is an internal field and is not accessible for external use
  reasons: [String]
}

# Container type for card eligibility, branded card eligibility, and associated vendors
type checkoutCardEligibility {
  # Whether or not a card type is eligible
  eligible: Boolean!

  # Reasons why card is eligible. This is an internal field and is not accessible for external use
  reasons: [String]!

  # Whether or not a card is branded
  branded: Boolean

  # Whether installments are eligible
  installments: Boolean

  # Associated credit card vendors.  See CardVendorEligibility
  vendors: checkoutCardVendorEligibility!

  # Whether Guest Checkout is enabled
  guestEnabled: Boolean
}

# Container type for a payment's eligibility for card vendors
type checkoutCardVendorEligibility {
  # VISA
  visa: checkoutPaymentEligibility!

  # MASTERCARD
  mastercard: checkoutPaymentEligibility!

  # AMEX (or American Express)
  amex: checkoutPaymentEligibility!

  # DISCOVER
  discover: checkoutPaymentEligibility!

  # Hipercard -- Mostly used in Brazil
  hiper: checkoutPaymentEligibility!

  # ELO -- Mostly used in Brazil
  elo: checkoutPaymentEligibility!

  # JCB -- Mostly used in Japan
  jcb: checkoutPaymentEligibility!
}

# For experiments field on root Query type
input checkoutExperimentInput {
  # Name of experiment. (Ex: 'pxp_hermesnode_kmli')
  name: String!

  # Any kind of params (Ex: Objects, Arrays, etc.)
  params: checkoutJSON
}

# Encapsulates everything related to a PXP test.
# Ex: type, values, stringValue
#
# Required auth states: Any
type checkoutExperiment {
  # The name of this experiment.
  name: String!

  # An Array of Treatment types, which are treatments associated with this experiment.
  treatments: [checkoutTreatment]!

  # The tracking tags associated with a Experiment.
  trackingTags: [checkoutTrackingTag]

  # The tracking tags associated with a Experiment, but represented as a String.
  # (Ex: 'qt=6496,2252,7579;qc=2621440,2623488,2621440;uqt=6001;uqc=2621440;ot=;os=')
  trackingTagsString: String
}

# Encapsulates everything related to a Treatment. Ex: treatmentId, name, factors
type checkoutTreatment {
  # ID of the treatment
  treatmentId: ID

  # Name of the treatment
  name: String

  # An Array of Factor types, which are key/value pairs associated with this experiment.
  factors: [checkoutFactor]
}

# Encapsulates everything related to a Factor. Ex: name, value
type checkoutFactor {
  # Name of the Factor
  name: String

  # Value of the Factor
  value: String
}

# Encapsulates everything related to a TrackingTag. Ex: type, values, stringValue
type checkoutTrackingTag {
  # The type of the TrackingTag (Ex: 'qc')
  type: checkoutTrackingTagType

  # The values of the TrackingTag, represented as an Array (Ex: [6496, 2252, 1234])
  values: [ID]

  # The values of the TrackingTag, represented as a String (Ex: '6496,2252,1234')
  stringValue: String
}

# An enumeration of types that TrackingTag can have. qe, qt, qc, qp, etc
# The meaning of these tags have been lost over time
# Not even the PXP team knows what they are ;-)
# But, they're useful for clients who want to log these values to FPTI.
# See https://github.paypal.com/Experimentation-R/pxpexecserv/blob/8c511074aee6cbd8a0177c4013e14487774ca380/ExperimentationExecution/src/main/java/com/paypal/experimentation/domain/core/common/TagNames.java#L3
enum checkoutTrackingTagType {
  # Nobody knows what this means
  CT

  # Nobody knows what this means
  EXOE

  # Nobody knows what this means
  EXOS

  # Nobody knows what this means
  EXOT

  # Nobody knows what this means
  OE

  # Nobody knows what this means
  OS

  # Nobody knows what this means
  OT

  # Nobody knows what this means
  PXPM

  # Nobody knows what this means
  PXPMG

  # Nobody knows what this means
  PXPMU

  # Qualified Context
  QC

  # Qualified Experiment
  QE

  # Nobody knows what this means
  QP

  # Qualified Treatment
  QT

  # Nobody knows what this means
  SE

  # Nobody knows what this means
  ST

  # Nobody knows what this means
  UPE

  # Nobody knows what this means
  UPT

  # Nobody knows what this means
  UQC

  # Nobody knows what this means
  UQP

  # Nobody knows what this means
  UQT

  # Nobody knows what this means
  XT
}

# A container type for locale metadata.
type checkoutLocaleMetadata {
  # A container type for address metadata.  See LocaleAddressMetadata
  address(
    countryCode: checkoutCountryCodes!
    languageCode: checkoutCheckoutContentLanguageCode
  ): checkoutLocaleAddressMetadata

  # A list of PayPal business regions a given country is part of. Ex: ['LATAM', 'EM']
  businessRegions(
    countryCode: checkoutCountryCodes!
  ): [checkoutPayPalBusinessRegions]!

  # A container type for credit card metadata.  See LocaleCreditCardMetadata
  card(countryCode: checkoutCountryCodes): checkoutLocaleCreditCardMetadata

  # The country's three character currency code. Ex: USD
  currencyCode(
    countryCode: checkoutCountryCodes
  ): checkoutSupportedCountryCurrencies

  # The country's currency symbol. Ex: $
  currencySymbol(
    countryCode: checkoutCountryCodes!
    languageCode: checkoutCheckoutContentLanguageCode
  ): String

  # A container type for date metadata.  See LocaleDateMetadata
  date(
    countryCode: checkoutCountryCodes!
    languageCode: checkoutCheckoutContentLanguageCode
  ): checkoutLocaleDateMetadata

  # Fields required for a user to sign up for a full member account in
  # a given country.
  knowYourCustomerFields(
    countryCode: checkoutCountryCodes!
  ): [checkoutKnowYourCustomerField]!

  # A container type for name metadata.  See LocaleNameMetadata
  name(
    countryCode: checkoutCountryCodes!
    languageCode: checkoutCheckoutContentLanguageCode
  ): checkoutLocaleNameMetadata

  # A container type for phone metadata.  See LocalePhoneMetadata
  phone(
    countryCode: checkoutCountryCodes!
    languageCode: checkoutCheckoutContentLanguageCode
  ): checkoutLocalePhoneMetadata

  # Sugguested default language for given country
  #
  # Required auth states: Any
  suggestedDefaultLanguage(
    countryCode: checkoutCountryCodes!
  ): checkoutCheckoutContentLanguageCode

  # A list of supported languages for a given country. Ex: ['en', 'fr', 'es', 'zh']
  supportedLanguages(
    countryCode: checkoutCountryCodes!
  ): [checkoutCheckoutContentLanguageCode!]!

  # A container type for territory metadata.  See LocaleTerritoryMetadata
  territories(
    countryCode: checkoutCountryCodes!
    languageCode: checkoutCheckoutContentLanguageCode
  ): [checkoutLocaleTerritoryMetadata!]!

  # A container type for number metadata. see LocaleNumberMetadata
  number(
    countryCode: checkoutCountryCodes!
    languageCode: checkoutCheckoutContentLanguageCode
  ): checkoutLocaleNumberMetadata!

  # A container for the metadata pertaining to how a country displays currency
  currency(
    countryCode: checkoutCountryCodes!
    languageCode: checkoutCheckoutContentLanguageCode
  ): checkoutLocaleCurrencyMetadata!

  # A container type for directionality based on Language
  directionality(languageCode: checkoutCheckoutContentCountryCode): String!
}

# A container type for address metadata.
type checkoutLocaleAddressMetadata {
  # A list of ordered fields to be displayed in an address form
  layout: [checkoutLocaleAddressField]

  # A list of localized content strings to be used for the address input labels
  strings: checkoutLocaleAddressStrings

  # The address client metadata from Griffin
  #
  # https://github.paypal.com/pages/Globalization-R/griffin-paypal/docs/core-node.html#address-options
  griffinMetadata: checkoutJSON

  # A list of ordered portable fields to be displayed in an address form
  portableLayout: [checkoutAddressLineLayout]
}

# A container type for address input field metadata.
type checkoutLocaleAddressField {
  # Name of field - Ex: city
  name: String

  # Validation regex of field
  regex: String

  # Minimum length of field - Ex: 1
  minLength: Int

  # Maximum length of field - Ex: 5
  maxLength: Int

  # Whether or not a field is required
  isRequired: Boolean
}

# A container type for address string metadata.
type checkoutLocaleAddressStrings {
  # Label for the city field
  cityLabel: String

  # Label for the line1 field
  line1Label: String

  # Label for the line2 field
  line2Label: String

  # Label for optional address fields
  optionalLabel: String

  # Label for the postal code field
  postcodeLabel: String

  # Label for the line2 field
  selectLabel: String

  # Label for the state field
  stateLabel: String

  # List of LocaleAddressState types
  stateList: [checkoutLocaleAddressState!]

  # Localized validation error for the postal code
  validationError: String
}

# A container type for address state labels.
type checkoutLocaleAddressState {
  # The display text for a state, EX: California, Buenos Aires (Provincia), etc
  displayText: String

  # The input value of a state, EX: CA, BUENOS AIRES, etc
  value: String
}

# A container type for portable address metadata
type checkoutAddressLineLayout {
  # A list of parts in the address line
  parts: [checkoutAddressLinePart]
}

# A container type for address input field metadata.
type checkoutAddressLinePart {
  # Name of field - Ex: adminArea1
  name: String

  # Validation regex of field
  regex: String

  # Minimum length of field - Ex: 1
  minLength: Int

  # Maximum length of field - Ex: 5
  maxLength: Int

  # Whether or not a field is required
  isRequired: Boolean

  # Label for the field
  label: String

  # Allowed values for the field
  allowedValues: [checkoutAddressAllowedValues]
}

# A container type for address field's allowed values and labels.
type checkoutAddressAllowedValues {
  # The display text for the field EX: a state can have: California, Buenos Aires (Provincia), etc
  displayText: String

  # The input value for the field EX: a state can have: CA, BUENOS AIRES, etc
  value: String
}

# An enumeration of PayPal business regions
enum checkoutPayPalBusinessRegions {
  # Asia Pacific
  APAC

  # Emerging Market
  EM

  # Europe, Middle East, and Africa
  EMEA

  # Latin America
  LATAM

  # North America
  NA
}

# A container type for credit card metadata.
type checkoutLocaleCreditCardMetadata {
  # Returns a list of formatting and validation metadata for types of credit cards
  # Average SLA response time - 50ms
  #
  # Required Roles: None.
  types: [checkoutCardRule]!
}

# Contains all validation rules/metadata for a credit card
type checkoutCardRule {
  # Rules of card fields
  fields: checkoutFieldRules!

  # Contains information about maximum/minimum card number and security code length
  length: checkoutCardNumberLengthRules!

  # Indicate whether luhn validation is required
  luhnValidationRequired: Boolean!

  # Name of the card's type
  name: String!

  # Regex to validate card type. (Ex: /^(6011|65|64[4-9]|622|36|38|30[0-5])/)
  pattern: String

  # Indices for injecting spaces in a formatted credit card string (Ex: [4,8,12])
  spaceIndices: [Int]!
}

# The rules of the card field
type checkoutFieldRules {
  # Indicate whether billing address is required
  address: Boolean!

  # Indicate whether security code is required
  cvv: Boolean!

  # Indicate whether date of birth is required
  dob: Boolean!

  # Indicate whether expiration data is required
  expiry: Boolean!

  # Indicate whether issuer bank is required
  issue: Boolean!

  # Indicate whether phone number is required
  phone: Boolean!
}

# Contains validation rules for credit card number and CSC length
type checkoutCardNumberLengthRules {
  # Minimum length of card number
  cardNumberMinLength: Int!

  # Maximum length of card number
  cardNumberMaxLength: Int!

  # Length of security code
  securityCodeLength: Int!
}

# A container type for date metadata.
type checkoutLocaleDateMetadata {
  # Format display for the user
  displayFormat: String

  # Date format/pattern for backend use (consistently using letters d, m, y)
  datePattern: String

  # The localized label for an expiry date
  #
  # > Example for en_US: *MM/YY*
  expiryDatePatternLabel: String
}

# An enumeration of the KYC (KnowYourCustomer) field types that can be required for sign up.
enum checkoutKnowYourCustomerField {
  # A user's date of birth
  DATE_OF_BIRTH

  # A user's gender
  GENDER

  # A user's identity document number
  IDENTITY_DOCUMENT_NUMBER

  # A user's identity document type
  IDENTITY_DOCUMENT_TYPE

  # A user's nationality
  NATIONALITY

  # A user's occupation
  OCCUPATION

  # A user's place of birth
  PLACE_OF_BIRTH

  # A user's secondary identity document number
  SECONDARY_IDENTITY_DOCUMENT_NUMBER

  # A user's secondary identity document type
  SECONDARY_IDENTITY_DOCUMENT_TYPE
}

# A container type for date metadata.
type checkoutLocaleNameMetadata {
  # A list of ordered fields to be displayed in an name form
  layout: [checkoutLocaleNameField]

  # A list of localized content strings to be used for the name input labels
  strings: checkoutLocaleNameStrings

  # Object for name griffin metadata
  griffinMetadata: checkoutJSON
}

# The metadata for a particular name.
type checkoutLocaleNameField {
  # The name of field Ex-givenName
  name: String

  # Indicates whether the name field is required
  isRequired: Boolean
}

# A container type for name string metadata.
type checkoutLocaleNameStrings {
  # Label for the givenName field
  givenNameLabel: String

  # Label to display optional
  optionalLabel: String

  # Label for the surname field
  surnameLabel: String
}

# A container type for phone metadata.
type checkoutLocalePhoneMetadata {
  # A container type for a phone's input masks.  See LocalePhoneMasks
  masks: checkoutLocalePhoneMasks

  # A container type for a phone's input patterns.  See LocalePhonePatterns
  patterns: checkoutLocalePhonePatterns
}

# A container type for input masks for phones.
type checkoutLocalePhoneMasks {
  # A mask used for input fields -- Ex: 00000 00000
  fixed: String

  # A mask used for input fields -- Ex: 0000 000000
  mobile: String
}

# A container type for input patterns for phones.
type checkoutLocalePhonePatterns {
  # A fixed line phone pattern -- Ex: '^(0)?((?:00800|1\d{0,5}|[2-9]\d\d)\d{7})$'
  fixed: String

  # A mobile phone pattern -- Ex: '^(0)?((?:00800|1\d{0,5}|[2-9]\d\d)\d{7})$'
  mobile: String

  # A default phone pattern -- Ex: '^(0)?((?:00800|1\d{0,5}|[2-9]\d\d)\d{7})$'
  default: String
}

# A container type for territory metadata.
type checkoutLocaleTerritoryMetadata {
  # A two character country code -- Ex: US
  code: checkoutCountryCodes

  # The international dialing code for the territory -- Ex: 1
  internationalDialingCode: Int

  # The full name of the territory -- Ex: United States
  name: String

  # The name of the business region the country belongs to.
  # Canada and the United States return 'NA'
  # Ex: EMEA
  region: String

  # The suggested default language for the territory -- Ex: en
  suggestedDefaultLanguage: checkoutCheckoutContentLanguageCode
}

# A container type for number metadata.
type checkoutLocaleNumberMetadata {
  # Character used to signify decimal. EXAMPLE: .
  DECIMAL_SEP: String!

  # Character used to signify number grouping. EXAMPLE: 1,000
  GROUP_SEP: String!

  # Character used to signify percent. EXAMPLE: %
  PERCENT: String!

  # Character used to signify zero digit. EXAMPLE: 0
  ZERO_DIGIT: String!

  # Character used to signify plus sign. EXAMPLE: +
  PLUS_SIGN: String!

  # Character used to signify minus sign. EXAMPLE: -
  MINUS_SIGN: String!

  # Character used to signify exponent sign. EXAMPLE: E
  EXP_SYMBOL: String!

  # Character used to signify per mille sign. EXAMPLE: ‰
  PERMILL: String!

  # Character used to signify per sign. EXAMPLE: ∞
  INFINITY: String!

  # Character used to signify not a number sign. EXAMPLE: NaN
  NAN: String!

  # Character sequence used to signify decimal pattern sign. EXAMPLE: #,##0.###
  DECIMAL_PATTERN: String!

  # Character sequence used to signify scientific notation pattern sign. EXAMPLE: #E0
  SCIENTIFIC_PATTERN: String!

  # Character sequence used to signify percent pattern sign. EXAMPLE: #,##0%
  PERCENT_PATTERN: String!

  # Object for name griffin metadata
  griffinMetadata: checkoutJSON
}

# A container for the metadata pertaining to how a country displays currency
type checkoutLocaleCurrencyMetadata {
  # Object map of country currency denomincation to currency character
  # EXAMPLE: USD -> $
  griffinCurrencySupportedSymbolsMetadata: checkoutSupportedCurrencySymbolsMetadata!

  # A container for metadata pertaining to currency styles
  styles: checkoutLocaleStylesCurrencyMetadata!

  # Object map of country currency denomincation to decimal digit length
  # EXAMPLE: USD -> 2
  griffinClientDigitsMetadata: Int!

  # Country Currency code
  code: checkoutSupportedCountryCurrencies!
}

# An enumeration of types that currency could have. International, code, plural etc.
type checkoutSupportedCurrencySymbolsMetadata {
  # A pattern which represent the currency international
  international: String!

  # A pattern which represents the code of current country (Ex: $ for an en-US locale)
  code: String!

  # A pattern for indicating what represent (Ex: 'Plural 1 -> en-US'
  plural: String!

  # The separator according to the current locale
  separator: String!

  # A symbol according to the current locale
  symbol: String!
}

# A container for metadata pertaining to currency styles
type checkoutLocaleStylesCurrencyMetadata {
  # Currency style metadata
  currency: String!

  # ISOCurrency style metadata
  iSOCurrency: String!

  # SymbolISO Currency style metadata
  symbolISOCurrency: String!
}

# Countries which support localized strings from xo-content
enum checkoutCheckoutContentCountryCode {
  # AUSTRIA
  AT

  # AUSTRALIA
  AU

  # BELGIUM
  BE

  # BRAZIL
  BR

  # CHINA
  C2

  # CANADA
  CA

  # SWITZERLAND
  CH

  # CZECH REPUBLIC
  CZ

  # GERMANY
  DE

  # DENMARK
  DK

  # ESTONIA
  EE

  # SPAIN
  ES

  # FINLAND
  FI

  # FRANCE
  FR

  # UNITED KINGDOM
  GB

  # GREECE
  GR

  # APAC
  GROUP_APAC

  # EMEA
  GROUP_EMEA

  # LATAM
  GROUP_LATAM

  # HONG KONG
  HK

  # HUNGARY
  HU

  # INDONESIA
  ID

  # IRELAND
  IE

  # ISRAEL
  IL

  # INDIA
  IN

  # ITALY
  IT

  # JAPAN
  JP

  # REPUBLIC OF KOREA
  KR

  # LITHUANIA
  LT

  # LUXEMBOURG
  LU

  # LATVIA
  LV

  # MEXICO
  MX

  # MALAYSIA
  MY

  # NETHERLANDS
  NL

  # NORWAY
  NO

  # NEW ZEALAND
  NZ

  # PHILIPPINES
  PH

  # POLAND
  PL

  # PORTUGAL
  PT

  # ROMANIA
  RO

  # RUSSIAN FEDERATION
  RU

  # SWEDEN
  SE

  # SINGAPORE
  SG

  # SLOVENIA
  SI

  # SLOVAKIA
  SK

  # THAILAND
  TH

  # TURKEY
  TR

  # TAIWAN
  TW

  # UKRAINE
  UA

  # UNITED STATES
  US

  # VIETNAM
  VN
}

# Encapsulates all properties related to flow eligible Methods.
type checkoutFlowEligibleMethods {
  # Signup eligibilty
  signup: Boolean!

  # Guest eligibility
  guest: Boolean!
}

# Encapsulates all properties related to installments.
# Ex: installmentType, hasDiscount, Installments etc.
type checkoutEligibleInstallments {
  # Installment Type
  installmentType: checkoutInstallmentType

  # Whether or not discount is applicable for the payment
  hasDiscount: Boolean

  # Eligible Installment options
  installments: [checkoutInstallmentOption]
}

# An enumeration of Installment Type.
# SINGLE, MULTIPLE
enum checkoutInstallmentType {
  # Single Installment term
  SINGLE

  # Multiple Installments terms
  MULTIPLE
}

# Encapsulates all data related to a Installment option.
# Ex: term, monthly_payment, total, installmentDetail, etc.
type checkoutInstallmentOption {
  # The term over which to finance the transaction
  term: Int

  # Formatted Monthly payment value for current Installment term
  formattedMonthlyPayment: String

  # Formatted value of Purchase cost + total cost APR + total consumer fee (if any)
  formattedTotalAmount: String

  # Formatted Value of Discount amount given for the current Installment term
  formattedDiscountAmount: String

  # Details for the current Installment term like discountAmount, discountPercent and monthlyPayment
  installmentDetail: checkoutInstallmentDetail
}

# Encapsulates all data related to a Installment Details.
# Ex: monthlyPayment, discountAmount, discountPercent, etc.
type checkoutInstallmentDetail {
  # Monthly payment value for current Installment term
  monthlyPayment: checkoutAmount

  # Discount amount applied to the payment, if any
  discountAmount: checkoutAmount

  # Discount percentage applied to the payment, if any
  discountPercent: Float
}

# Enumeration for Address Normalization's ansraptor scope
enum checkoutAddressNormalizationScopes {
  # validate every inputs of address
  ALL

  # validate the province, locality, postalcode, street, house number
  DELIVERYPOINT_LEVEL

  # validate province locality. postal code
  LOCALITY_LEVEL

  # validate the province, locality, postalcode. street
  STREET_LEVEL
}

# Enumeration for Address Normalization's ansraptor process mode params
enum checkoutAddressNormalizationProcessModes {
  # For prefill case
  FASTCOMPLETION

  # For normalization case
  INTERACTIVE
}

# Encapsulates all properties we want to extract from a normalized address. Ex: line1, city, postalCode
type checkoutNormalizedAddress {
  # A noramlized billing address first line street address (Ex: '2211 North 1st St')
  line1: String

  # A normalized billing address second line street address (Ex: 'Apt 123')
  line2: String

  # A normalized billing address city (Ex: 'San Jose')
  city: String

  # A normalized billing address state/province (Ex: 'CA')
  state: String

  # A normalized billing address postal code (Ex: '95131')
  postalCode: String

  # A normalized billing address two-letter country code (Ex: 'US')
  country: checkoutCountryCodes

  # A container for addresses that have been formatted by Griifin for display on the UI
  griffinFormattedAddresses: checkoutGriffinFormattedAddresses

  # It returns true if the input address is same as normalized address returned by ANS
  alreadyNormalized: Boolean
}

# Encapsulates all properties related to a GDPR banner for client rendering
type checkoutGdprBanner {
  # A string of CSS properties
  css: String!

  # A string of HTML properties
  html: String!

  # A string of JavaScript properties
  js: String!
}

# Encapsulates all properties related to the cookie banner for client rendering
type checkoutCookieBanner {
  # A string of the CSS styles tag
  css: String!

  # A string of the HTML markup
  html: String!

  # A string of JavaScript script tag
  js: String!
}

# An enumeration of all flow types accepted by Notice and Consent evalPolicy API.
# Based on those flags, the Notice and Consent API will determine what to do based on guest and member use cases.
enum checkoutEvalPolicyFlowType {
  # For member use cases, we need to pass in the API flow as CHECKOUT.
  CHECKOUT

  # For guest and sign up use cases, we need to pass in the API flow ONBOARDING
  ONBOARDING
}

# Encapsulates all properties related to the Consent API response related to user legal consent
type checkoutUserAgreement {
  # A string of the mayor version of the User Agreement
  majorVersion: String!

  # A string of the minor version of the User Agreement
  minorVersion: String!

  # A string of the active url of the User Agreement
  activeUrl: String!

  # A string of the url of the Upcoming Policies
  upcomingUrl: String!
}

# An enumeration of types that deviceType can have.
enum checkoutDeviceType {
  # Mobile
  MOBILE

  # Tablet
  TABLET

  # Desktop
  DESKTOP
}

# Encapsulates all properties related to the app download banner for client rendering
type checkoutAppDownloadBanner {
  # A string of the CSS styles tag
  css: String!

  # A string of the HTML markup
  html: String!

  # A string of JavaScript script tag
  js: String!
}

# Locale type
input checkoutLocaleInput {
  # language
  lang: String

  # country
  country: String
}

# List of all button labels for Smart Payment Buttons
enum checkoutButtonLabels {
  # Paypal
  PAYPAL

  # Checkout
  CHECKOUT

  # Pay
  PAY

  # Buy Now
  BUYNOW

  # Credit: checkout.js v4 only
  CREDIT

  # Installment
  INSTALLMENT

  # Subscribe
  SUBSCRIBE

  # Donate
  DONATE
}

# Encapsulates all button types that can be rendered by the smart payment button
enum checkoutFundingButtonType {
  # PayPal
  paypal

  # Cards
  card

  # PayPal Credit
  credit

  # PayPal Pay Later
  paylater

  # Venmo
  venmo

  # Itau
  itau

  # Sepa
  sepa

  # Ideal
  ideal

  # Bancontact
  bancontact

  # Giropay
  giropay

  # EPS
  eps

  # SOFORT
  sofort

  # MYBANK
  mybank

  # p24
  p24

  # Zimpler
  zimpler

  # WeChat Pay
  wechatpay

  # Blik
  blik

  # Payu
  payu

  # Trustly
  trustly

  # OXXO
  oxxo

  # Boleto
  boleto

  # Boletobancario
  boletobancario

  # Maxima
  maxima

  # Mercadopago
  mercadopago

  # ApplePay
  applepay

  # Multibanco
  multibanco

  # Satispay
  satispay

  # Paidy
  paidy
}

# List of all button layouts for Smart Payment Buttons
enum checkoutButtonLayouts {
  # Vertical
  vertical

  # Horizontal
  horizontal
}

# List of all button sizes for Smart Payment Buttons
enum checkoutButtonSizes {
  # tiny
  tiny

  # small
  small

  # medium
  medium

  # large
  large

  # huge
  huge
}

# Encapsulates all properties related to DeviceInfo.
input checkoutDeviceInfo {
  # Color Depth - window.screen.colorDepth - Number of bits used to represent the
  # color of a single pixel on the screen, or in the buffer when off-screen
  # buffering is enabled.
  colorDepth: String

  # window.screen.height - Vertical resolution of the screen, in pixels
  screenHeight: String

  # window.screen.width - Horizontal resolution of the screen, in pixels
  screenWidth: String

  # window.screen.availHeight - Available vertical resolution of the screen, in pixels
  screenAvailHeight: String

  # window.screen.width - Available horizontal resolution of the screen, in pixels
  screenAvailWidth: String

  # window.devicePixelRatio - Returns the ratio between physical pixels and device independent pixels of the existing display
  devicePixelRatio: String

  # navigator.hardwareConcurrency - Number of logical processors available to run threads on the user’s device
  numCores: String

  # Browser width
  browserWidth: String

  # Browser height
  browserHeight: String

  # Example - fr_FR
  rosettaLanguage: String

  # List Browser plugins. Example - pdf,Shockwave Flash 28.0 r0
  browserPlugins: String
}

# Customization type for checkout
type checkoutCheckoutCustomization {
  # Tagline
  tagline: checkoutElementCustomization

  # Button Text
  buttonText: checkoutElementCustomization

  # Animation Info
  buttonAnimation: checkoutButtonAnimationCustomization
    @deprecated(
      reason: "Renamed to design because some of the designs are not animated."
    )

  # Design Info
  buttonDesign: checkoutButtonDesignCustomization
}

# Customization for an element in checkout (Eg: tagline in a button)
type checkoutElementCustomization {
  # Simple Text
  text: String

  # Tracking details
  tracking: checkoutCustomizationTracking
}

# Tracking for customization
type checkoutCustomizationTracking {
  # Impression URL from MORS
  impression: String

  # Click URL from MORS
  click: String
}

# Customization for an animation in checkout
type checkoutButtonAnimationCustomization {
  # Simple Text
  id: String

  # Simple Text
  text: String

  # Tracking details
  tracking: checkoutCustomizationTracking
}

# Customization for an design in checkout
type checkoutButtonDesignCustomization {
  # Simple Text
  id: String

  # Simple Text
  text: String

  # Tracking details
  tracking: checkoutCustomizationTracking
}

# Interface with the FireBase api
type checkoutFireBase {
  # A user's firebase auth token
  auth(sessionUID: String!): checkoutFireBaseAuth!
}

# FireBase authentication
type checkoutFireBaseAuth {
  # The Firebase project ID
  projectID: String!

  # A client-generated session id for the user
  sessionUID: String!

  # The firebase session token generated for the user
  sessionToken: String!
}

# Schema to do mobile sdk eligibility
type checkoutMobileSDKEligibility {
  # Boolean response conveying eligibility for this flow
  eligible: Boolean!
    @deprecated(
      reason: "Migrating this data into IntegrationSDKEligibility, due to introduction of new mobile SDK integrations, such as Venmo"
    )

  # showing ineligibility reasons in the case eligibility is false
  ineligibilityReason: String!
    @deprecated(
      reason: "Migrating this data into IntegrationSDKEligibility, due to introduction of new mobile SDK integrations, such as Venmo"
    )

  # Paypal mobile SDK specific eligibility response
  paypal: checkoutIntegrationSDKEligibility!

  # Venmo mobile SDK specific eligibility response
  venmo: checkoutIntegrationSDKEligibility!
}

# Integration Specific SDK Eligibility. Currently we support two kind of integrations
# 1. Paypal: Paypal Specific SDK eligibility integration
# 2. Venmo: Venmo Specific SDK eligibility integraion
type checkoutIntegrationSDKEligibility {
  # Boolean response conveying eligibility for this flow
  eligibility: Boolean!

  # showing ineligiblity reasons in the case eligibility returns false
  ineligibilityReason: String!

  # showing ineligiblity reasons error message in the case eligibility raises an error
  ineligibilityErrorMessage: String
}

# Schema to validate merchant as Apple Pay eligible
type checkoutApplePayMerchantSession {
  # Opaque session from Apple
  session: String
}

# The NativeSDKPrivilegedResponse is returned from a query to the field
# `isPrivilegedHostApp`. The clientId sent to that query as a parameter denotes
# whether or not the
type checkoutNativeSDKPrivilegedResponse {
  # A list of NativeSDKPrivilege values denoting the capability of the host app
  privileges: [checkoutNativeSDKPrivilege]!

  # At least one elevated privilege was found for this host
  allowed: Boolean!

  # Should the `allowed` field return false, this field endeavors to explain why
  reasoning: String
}

# This enum declares several different types of privileges we may allow for
# first party vetted host apps on iOS and Android.
enum checkoutNativeSDKPrivilege {
  # Allows the host app to adjust the experience from a UI perspective
  FULL_UI_CUSTOMIZATION

  # Allows the host app to inject networking events on either the inbound or
  # outbound network passes. This would allow talking to the host apps'
  # internal network calls
  FULL_IO_CUSTOMIZATION

  # Allows the host app to integrate with FireBase and or listen in to the
  # payloads being sent back and forth over that bus.
  FULL_FIREBASE
}

# Encapsulates the flow id returned by consumer flow library
type checkoutConsumerFlowId {
  # The flow id
  flowId: String!
}

# Interface for wallet API
type checkoutWallet {
  # Retrieve the details for a bank account.
  #
  # Required Roles: LOGGEDIN
  bank(bankId: String!): checkoutBankAccount!

  # Retrieve the details from a credit card.
  #
  # Required Roles: LOGGEDIN
  card(cardId: String!): checkoutCardDetails!

  # Provides a quicker way to query eligibility data based on a users wallet instruments
  #
  # Required Roles: LOGGEDIN
  flags: checkoutWalletFlags!
}

# The metadata for a particular credit card
type checkoutCardDetails {
  # A unique identifier for the credit card within the PayPal system
  lastFourDigits: String!

  # The card issuer as a CardIssuerType (Ex: 'VISA', 'AMEX', 'MASTER', 'DISCOVER')
  type: checkoutCardIssuerType!
}

# Eligibility flags from the Wallet API
type checkoutWalletFlags {
  # Indicates whether the wallet contains rewards accounts
  areRewardsPresent: Boolean!

  # Indicates whether the user is opt in into full wallet
  fullWalletOptStatus: checkoutFullWalletStatus!
}

# A FullWallet Status type
enum checkoutFullWalletStatus {
  # Full Wallet Opted out
  OPTED_OUT

  # User has not made any decision on FullWallet
  NEW

  # FullWallet Opted In
  OPTED_IN
}

# Encapsulates the data shared between Unified Login and Checkout
type checkoutUnifiedLoginContext {
  # Metadata about the transaction's Checkout experience
  experienceMetadata: checkoutUnifiedLoginContextExperienceMetadata
}

# Encapsulates the metadata relating to Checkout experience from Unified Login
type checkoutUnifiedLoginContextExperienceMetadata {
  # Metadata about onboarding experience if the user sees that flow
  onboardingData: checkoutUnifiedLoginContextOnboardingData
}

# Encapsulates the data relating to onboarding from Unified Login
type checkoutUnifiedLoginContextOnboardingData {
  # Indicates if the Apple Pay button was shown to the user
  applePayButtonSeen: Boolean

  # Email a user entered on the login page
  email: checkoutEmail

  # Whether or not a user already has a full member account
  hasExistingAccount: Boolean

  # Indicates what type of login method a user was presented with on UL
  loginMethod: String

  # Experience the user selected on the log in page (EX: SIGN_UP, GUEST)
  userIntent: checkoutOnboardingExperienceType
}

# An enumeration of Checkout onboarding experiences
enum checkoutOnboardingExperienceType {
  # Optional guest experience
  GUEST

  # Forced sign up
  SIGN_UP
}

# Encapsulates all properties related to an Elmo filter input.
input checkoutElmoFilterInput {
  # The key name of the filter (Ex: 'Country')
  key: String!

  # The value that is associated with the filter key
  value: String!
}

# Encapsulates all properties of an Elmo experiment
type checkoutElmoExperiment {
  # Array of user treatments returned by Elmo
  treatments: [checkoutElmoTreatment]!
}

# Encapsulates all properties for a user treatment for a particular experiment
type checkoutElmoTreatment {
  # Allocation percentage for the returned treatment
  allocationPercentage: Int!

  # ID of the experiment that the returned treatment belongs to
  experimentId: String!

  # Name of the experiment that the returned treatment belongs to
  experimentName: String!

  # List of factors defined for the returned treatment
  factors: [checkoutElmoTreatmentFactor]

  # Hash value
  hashValue: String!

  # ID of the returned treatment
  treatmentId: String!

  # Name of the returned treatment
  treatmentName: String!

  # Version of the experiment the returned treatment belongs to
  version: String!
}

# Encapsulates an Elmo treatment factor, a key-value pair used to provide
# additional configuration.
type checkoutElmoTreatmentFactor {
  # The treatment factor key
  key: String!

  # The treatment factor value
  value: String!
}

# Encapsulates all properties related to an Elmo filter input where values are Real Time values got from an API call.
input checkoutElmoRealTimeFilterInput {
  # The key name of the filter (Ex: 'Country')
  key: String!

  # The value that is associated with the filter key
  value: checkoutElmoRealTimeFilterValues!

  # Additional arguments needed for API call made before calling Elmo
  args: checkoutElmoRealTimeFilterArgs
}

# An enumeration of values for Elmo filters that gets substituted with API call response
enum checkoutElmoRealTimeFilterValues {
  # MERCHANT_ID value will get fetched from getPayee() and the path to value is merchant.accountNumber
  MERCHANT_ID

  # IS_BILLING_AGREEMENT value will be fetched from getIsBillingAgreementFlag call
  # and value is from 'isBillingAgreement' key in response object
  IS_BILLING_AGREEMENT

  # IS_GUEST_ELIGIBLE value will be fetched from getFlowEligibility call and value is from 'guest' key in response object
  IS_GUEST_ELIGIBLE

  # IS_WPS value will be fetched from getApplicationData call and value is from 'flags.is_wps_flow' key in response object
  IS_WPS

  # CHECKOUT_SESSION_TYPE value will be fetched from getCheckoutSessionTypeForElmo call
  CHECKOUT_SESSION_TYPE

  # IS_MERCHANT_IN_CUSTOMER_LIST this will trigger an API call to rpsreadserv to
  # see if merchant id exists in a customer list or not
  IS_MERCHANT_IN_CUSTOMER_LIST

  # IS_EXISTING_MEMBER_FROM_UL_CONTEXT this will call mayfly to get UL context and
  # check for the flag hasExistingAccount on onboardingContext
  IS_EXISTING_MEMBER_FROM_UL_CONTEXT

  # WEASLEY_ELIGIBILITY_FILTERS this will call getFiltersFromJunoCache and populates this as filters to elmo call
  WEASLEY_ELIGIBILITY_FILTERS

  # MERCHANT_IN_CUSTOMER_LIST_NAME this will call dynsegmentationserv/evaluate API
  # to see if merchant belongs to a segment or not
  MERCHANT_IN_CUSTOMER_LIST_NAME
}

# Additional arguments needed for elmo realtime filters can be added here. Every argument has to optional
input checkoutElmoRealTimeFilterArgs {
  # RPS - RealtimeProfileServ Customer List identifier. Eg: CL-1344242
  customerListName: checkoutRpsCustomerList

  # segment - this will be the name of the segement which needs to be mapped to array of customer lists in code
  segmentName: checkoutRpsSegmentName
}

# An enumeration of possible RPS customer list that can be used in xobuyer
enum checkoutRpsCustomerList {
  # weasley - optional guest merchant list
  OPTIONAL_GUEST_MERCHANT_LIST
}

# An enumeration of possible RPS customer list that can be used in xobuyer
enum checkoutRpsSegmentName {
  # weasley - optional guest merchant list
  OPTIONAL_GUEST_MERCHANTS_SEGMENT

  # weasley - real money gaming merchant list
  RMG_MERCHANTS_SEGMENT

  # weasley - signup incentives safe merchant list
  SIGNUP_INCENTIVES_SAFE_MERCHANTS_SEGMENT
}

# The MobileSdkFeatures is returned to query 'mobileSdkFeatures' with the enabled native SDK features for the client.
type checkoutMobileSdkFeatures {
  # the elmo experiment with a list of treatments with feature eligibility
  elmoFeatures: [checkoutElmoTreatment]!
}

# Encapsulates details of the potential funding instrument
type checkoutPotentialCard {
  # Indicates the type of the funding instrument
  type: checkoutFundingOptionType

  # Funding instrument's sub type of it's `type`.
  # (EX: 'CREDIT', 'DEBIT', 'CHECKING', 'SAVINGS').
  instrumentSubType: checkoutFundingInstrumentSubType

  # Expiration date of a card (Ex: '02/2021')
  expirationDate: String

  # Potential card's uuid (Ex: '3d799230-b198-11ea-b3de-0242ac130004')
  id: ID

  # Funding option's brand (Ex: 'AMEX')
  name: String

  # Last digits of a credit card
  lastDigits: String

  # The card art image
  #
  # Takes optional input for image size and type
  image(
    size: checkoutSquareImageSize = S
    type: checkoutImageType = png
  ): checkoutCardImage

  # Funding instrument's issuer product description. This is the card issuer's
  # product and brand information. For Example, Chase Sapphire Reserve.
  issuerProductDescription: String

  # Source variable indicates which flow the user used the card in like, guest or xoom, etc.,.
  source: String
}

# Get a recognized user's smart wallet. This api works:
#
# - 1. Can be used using a orderID and buyer access token from a login session.
# - 2. With either an existing buyer access token, billing agreement, or vault
# - Returns both branded and unbranded FIs
type checkoutSmartWallet {
  # PayPal Smart Funding
  paypal: checkoutSmartWalletFunding!

  # Credit Smart Funding
  credit: checkoutSmartWalletFunding!

  # Card Smart Funding
  card: checkoutSmartWalletFunding!

  # Venmo Smart Funding
  venmo: checkoutSmartWalletFunding!
}

# An funding type within a buyer's smart wallet
type checkoutSmartWalletFunding {
  # List of Smart Wallet funding instruments
  instruments: [checkoutSmartWalletInstrument!]!
}

# An instrument within a buyer's smart wallet
type checkoutSmartWalletInstrument {
  # Instrument type. card / bank / credit / balance
  type: String

  # Label to show for the FI (last-4 / email)
  label: String

  # Logo to show for the FI (e.g. card art url)
  logoUrl: String

  # Instrument ID to use when paying on checkout rails
  instrumentID: String

  # Token ID to use when paying on vault rails
  tokenID: String

  # Card vendor
  vendor: String

  # Can the payment be made in one click
  oneClick: Boolean

  # Buyer access token to use to approve the payment on checkout rails
  accessToken: String

  # Funding source is branded or unbranded
  branded: Boolean

  # Issuer Product Description
  issuerProductDescription: String

  # PlanID associated with this instrument.
  planID: String

  # Secondary instruments associated
  secondaryInstruments: [checkoutSmartWalletSecondaryInstrument!]
}

# A secondary instrument associated with an instrument during planning
type checkoutSmartWalletSecondaryInstrument {
  # Instrument type card / bank / credit / balance
  type: String

  # Label to show for the FI (last-4 / email)
  label: String

  # Logo to show for the FI (e.g. card art url)
  logoUrl: String

  # Instrument ID to use when paying on checkout rails
  instrumentID: String
}

# Response wrapper for validateAddress.
type checkoutValidateAddressResponse {
  # Whether or not an address is valid
  success: Boolean
}

# Encapsulates all properties related to a ShippingAndTaxes from shiptaxcalcserv.
type checkoutShippingAndTaxes {
  # List of shipping and tax charges
  charges: [checkoutShippingAndTaxCharges!]!

  # Whether shipping is supported for this region
  isShippingRegionSupported: Boolean!

  # Shipping options source ('PROFILE' or 'CALLBACK' or 'FALLBACK')
  shippingOptionsSource: checkoutShippingOptionsSource!

  # Whether tax is required for shipping
  isTaxOnShippingRequired: Boolean!

  # Whether shipping options are shown
  shouldShowShippingOptions: Boolean!

  # Whether profile override is allowed
  profileOverrideAllowed: Boolean
}

# Encapsulates all properties related to a ShippingAndTaxCharges from shiptaxcalcserv.
type checkoutShippingAndTaxCharges {
  # Shipping charges
  shipping: checkoutShippingCharges

  # Tax charges
  tax: checkoutTaxCharges
}

# Encapsulates all properties related to a ShippingCharges from shiptaxcalcserv.
type checkoutShippingCharges {
  # Unique identifier for the shipping option
  id: String!

  # Type of shipping method ('SHIPPING' or 'PICKUP')
  type: checkoutShippingMethodType!

  # Default shipping option
  isDefaultShippingOption: Boolean!

  # Whether insurance option is offered
  hasInsurance: Boolean!

  # Display name for shipping option
  label: String

  # Shipping amount for this shipping option
  shippingAmount: checkoutAmount!

  # Insurance amount for this shipping option
  insuranceAmount: checkoutAmount

  # Duration for delivery to arrive (Ex: 3-5 business days)
  deliveryTime: String

  # Type of shipping method needed to update selected shipping method to update the cart
  shippingMethodType: String
}

# Encapsulates all properties related to a TaxCharges from shiptaxcalcserv.
type checkoutTaxCharges {
  # Tax on item amount
  item: checkoutAmount

  # Tax on total amount
  total: checkoutAmount
}

# The shipping options source type
enum checkoutShippingOptionsSource {
  # Shipping charges are calculated from profile or button params
  PROFILE

  # Shipping options are from callback url
  CALLBACK

  # Fallback to button param if calling external url fails
  FALLBACK
}

# Financial Institution
type checkoutFinancialInstitution {
  # Refers to the name of the partner ex: American Express
  name: String!

  # Refers to the partner id that will be used to identify the partner in the flow ex: americanexpress
  identityProvider: String!

  # Reference to an Icon to show next to the institution name in a list
  institutionImage: checkoutInstitutionImage!
}

# Bank Account Input
input checkoutBankAccountInput {
  # The International Bank Account Number for the account
  iban: String

  # The account number of the bank account
  accountNumber: String

  # The routing number for the given bank account
  routingNumber: String

  # The type of bank account (i.e. Checking, Savings, etc.)
  type: checkoutBankAccountType
}

# Buyer's phone contact information (number, countryCode, etc)
input checkoutPhoneInput {
  # An phone type (Ex: 'Work', 'Cell', etc)
  type: checkoutPhoneInputType

  # A phone number (Ex: '8058881234')
  number: String!

  # A phone country code (Ex: '1')
  countryCode: String!
}

# Phone contact "types"
enum checkoutPhoneInputType {
  # Home phone number
  HOME

  # Mobile phone number
  MOBILE

  # Work phone number
  WORK

  # Business phone number
  BUSINESS

  # Customer service phone number
  CUSTOMER_SERVICE
}

# Response wrapper for isGuestMemberBenefitsEligibleResolver.
type checkoutGuestMemberBenefits {
  # whether the data compared matches
  isEligible: Boolean
}

# Response wrapper for ValidatePayees.
type checkoutValidatePayeesResponse {
  # Whether or not the Payees are valid
  success: Boolean

  # The validation error for the call
  error: checkoutValidatePayeesError
}

# Error Response for Validate Payees
type checkoutValidatePayeesError {
  # Severity of the error - either Error or Warning
  severity: String!

  # The string value of the error
  error: String!

  # An optional description of the error
  description: String
}

# Upstream Messaging related properties
type checkoutUpstreamMessaging {
  # Merchant Profile for upstream messaging
  merchantProfile: checkoutMerchantProfile
}

# A profile object that contains merchant specific messaging information
type checkoutMerchantProfile {
  # Merchant Configuration Hash
  hash: String

  # Time to live for the SDK Bundle serving this Merchant
  configTTL: Int
}

# Encapsulates all properties related to Inline Checkout eligibility.
type checkoutInlineCheckoutEligibility {
  # Boolean response conveying eligibility for this flow.
  eligible: Boolean!

  # Reasons for ineligibility in the case eligibility is false.
  ineligibilityReason: String
}

# AuthProviderContext
# Login Context for UL OTP
type checkoutOtpLoginContext {
  # Stringified context for IWC
  context: String!
}

# ApplePay config data
# For ApplePay requests
type checkoutApplepayConfig {
  # A country code that represents the merchant's country (Ex: 'US')
  merchantCountry: checkoutCountryCodes

  # An array of supported card financial instrument (FI) brands
  supportedNetworks: [checkoutApplepaySupportedNetworks]!

  # An array of the payment capabilities that the merchant supports, such as credit or debit.
  merchantCapabilities: [checkoutApplepayMerchantCapabilities]!

  # Merchant eligibility for Apple Pay
  isEligible: Boolean!
}

# An enumeration of all potential payment networks returned for Applepay config
# https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest/1916122-supportednetworks
enum checkoutApplepaySupportedNetworks {
  # amex
  amex

  # cartesBancaires
  cartesBancaires

  # discover
  discover

  # jcb
  jcb

  # maestro
  maestro

  # masterCard
  masterCard

  # visa
  visa
}

# An enumeration of all potential payment networks returned for Applepay config
# https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest/1916123-merchantcapabilities
enum checkoutApplepayMerchantCapabilities {
  # supports3DS
  supports3DS

  # supportsCredit
  supportsCredit

  # supportsDebit
  supportsDebit
}

# Encapsulates all properties related to Checkout Propensity Score.
# Determines the usage propensity in a given session for different categories.
type checkoutCheckoutPropensityScore {
  # Field encapsulating scores for credit related stuff
  creditScore: checkoutCreditScores!

  # Field encapsulating scores for FI related stuff
  fiScore: checkoutFIScores!
}

# Encapsulates all properties related to Credit products related Scores.
# Each property refers to a score determined for a credit related product.
type checkoutCreditScores {
  # Propensity Score for PayPal Credit
  ppc: checkoutCreditProductScoreInfo!

  # Propensity Score for Pay in 4
  pi4: checkoutCreditProductScoreInfo!

  # Propensity Score for Pay Monthly
  paymonthly: checkoutCreditProductScoreInfo!
}

# Contains actual score and metadata
type checkoutCreditProductScoreInfo {
  # Meta data: credit product name associated. Example: PAYPAL_CREDIT, PAY_IN_4, PAY_IN_3
  # Can be used by client for instrumentation purposes, indentification of underlying product for a returned score.
  productName: checkoutCreditProducts!

  # Actual Score
  score: Float
}

# Enums for all Credit related Products
enum checkoutCreditProducts {
  # Paypal Credit
  PAYPAL_CREDIT

  # Pay in 4
  PAY_IN_4

  # Pay Monthly
  PAY_MONTHLY

  # Pay in 3
  PAY_IN_3

  # Pay in 4x
  PAY_IN_4X

  # Pay in 30
  PAY_IN_30
}

# Encapsulates all properties related to FI related scores.
# Each property refers to a score determined in context of an FI.
type checkoutFIScores {
  # Propensity Score for FI Switch Rate
  fiSwitchRateScore: checkoutFIScoreInfo!
}

# Contains actual score and metadata
type checkoutFIScoreInfo {
  # Identifier name for the FI score sent. Example: FI_SWITCH_RATE
  # Can be used by client for instrumentation purposes, indentification of underlying nature or FI type for a returned score.
  productName: checkoutFIProductEnum!

  # Actual Score
  score: Float
}

# Enum for all FI related products
# FI_SWITCH_RATE: Rate at which a buyer switches between different funding instruments in a xo session
enum checkoutFIProductEnum {
  # Depicts FI Switch Rate
  FI_SWITCH_RATE
}

#
type billingQuery {
  # The BillingAgreementContext returns BA context
  billingAgreementContext(
    billingAgreementId: String!
    billingAgreementOptions: billingbillingAgreementContextInput
  ): billingBillingAgreementContext

  # prefill Address
  prefillAddress(address: billingAddressInput!): [billingPrefillAddress]

  # unavailbleCards will return all the cards which are now not available in buyer's wallet
  unavailableCards(billingAgreementId: String!): [billingCard]

  # cardTypes will return the supported card that buyer can add to his account(based on merchant preferrence or country)
  cardTypes(
    billingAgreementId: String!
    country: String!
    ip: String
  ): billingCardTypes

  # cardTypes will return the supported card that buyer can add to his
  # account(based on merchant preferrence or country) from IDS
  cardTypesIDS(
    billingAgreementId: String!
    country: String!
    ip: String
  ): billingCardTypesIDS

  # cardTypesFromBin will return the card corresponding to the given bin)
  cardTypesFromBin(
    billingAgreementId: String!
    country: String!
    bin: String!
  ): [billingBinType]

  # billingAgreement returns the complete information of BillingAgreement irrespective of type(RT/RP/WPS/Subscription)
  billingAgreement(id: String!): billingBillingAgreement

  # billingAgreements returns the list of BillingAgreement irrespective of type(RT/RP/WPS/Subscription)
  billingAgreements(
    input: billingBillingAgreementsInput = {
      pageSize: 20
      page: 1
      statuses: [ACTIVE, SUSPENDED]
    }
  ): billingBillingAgreements

  # experimentation will return all experiments configured for billingnodeserv
  experimentation(
    experimentationInput: billingExperimentationInput
  ): billingExperimentation

  # appData will return parts of the application data
  appData(billingAgreementId: String!): billingApplicationData
}

# Extra options (required for deciding on flags)
input billingbillingAgreementContextInput {
  # the query param in the request named fundingSource (Ex: '&fundingSource=credit')
  fundingSourceQueryParam: String
}

# Encapsulates all properties related to BillingAgreementContext.
# Ex: billingAgreementId, state, flags, etc.
type billingBillingAgreementContext {
  # BillingAgreementId (Ex: '87M2112195988634X')
  billingAgreementId: String!

  # State of billingAgreement (Ex: 'CREATED')
  state: billingBillingAgreementState!

  # Merchant's note to buyer during checkout
  noteToBuyer: String

  # user's action during checkout
  userAction: billingUserAction

  # payment action during checkout
  paymentAction: String

  # billing agreement type (Ex: 'MERCHANT_INITIATED_BILLING')
  type: String

  # billing agreement token
  billingAgreementToken: String

  # billing agreement description
  description: String

  # billing agreement consent code (Ex: 'eBay)
  consentCode: String

  # BillingAgreement flags (Ex: 'isBillingPlanApproved')
  flags: billingBillingAgreementFlags

  # Merchant details (Ex: 'merchantId')
  merchant: billingMerchant

  # Buyer's details (Ex: 'name')
  buyer: billingUser

  # Partner integration information
  partnerIntegration: billingPartnerIntegration

  # Funding options details (Ex: 'futureFundingInstruments')
  fundingOptionsDetails: billingFundingOptionsDetails

  # All offers applicable for the buyer in this flow
  offers: billingOffers

  # List of shipping addresses of buyer
  shippingAddresses: [billingCheckoutShippingAddress]

  # Return url
  returnURL: billingGenericURL

  # Cancel url
  cancelURL: billingGenericURL

  # Billing Intent
  intent: billingIntent

  # Payment experience parameters (Ex: 'is3dSecureAuthenticationSupported')
  paymentExperience: billingPaymentExperience

  # Results of experiments specified
  experiments: billingExperiments

  # Existing Billing Agreement Details
  existingBillingAgreementDetails: billingExistingBillingAgreementDetails

  # CBA flow indicator of token
  cbaFlow: Boolean
}

# An enumeration of types that a BillingAgreementState can be.
# CREATED, APPROVED, SUSPENDED, CANCELLED, or DECLINED
enum billingBillingAgreementState {
  # A CREATED type of BillingAgreementState
  CREATED

  # An APPROVED type of BillingAgreementState
  APPROVED

  # A SUSPENDED type of BillingAgreementState
  SUSPENDED

  # A CANCELLED type of BillingAgreementState
  CANCELLED

  # A DECLINED type of BillingAgreementState
  DECLINED
}

# An enumeration of UserAction at the time of checkout.
enum billingUserAction {
  #
  PAY

  #
  COMMIT
}

# Encapsulates all properties related to BillingAgreementFlags.
# Ex: hideShippingAddress, isLegacyBillingIntegration, isBillingPlanApproved, etc.
type billingBillingAgreementFlags {
  # Show shipping address during checkout or not
  hideShippingAddress: Boolean

  # Billing address consent flag is present or not
  billingAddressConsentFlag: Boolean

  # Processor declined the payment or not
  processorDeclined: Boolean

  # Shipping address is required or not
  isShippingAddressRequired: Boolean

  # Allow buyer to change shipping address or not
  allowShippingAddressChange: Boolean

  # Landing page is login or not
  isLandingPageLogin: Boolean

  # International shipping to be blocked or not
  blockNonDomesticShipping: Boolean

  # Hide soft descriptor or not
  hideSoftDescriptor: Boolean

  # It is allowed to create billing agreement without backup funding source or not
  allowBillingAgreementWithoutBackupFundingSource: Boolean

  # It is legacy billing integration or not
  isLegacyBillingIntegration: Boolean

  # Billing plan is approved or not
  isBillingPlanApproved: Boolean

  # Show PayPal Credit offer banner or not
  showPPCreditOffer: Boolean

  # If the transaction is a second button transaction
  secondBtnTxn: Boolean

  # For MISB, Single Page experience should be shown or not
  isMISBSinglePageExperience: Boolean

  # For MISB/CISB, Single Page experience flag
  isSubsequentFlowSinglePageExperience: Boolean

  # Contextual consent eligibility for PayPal on file experiment
  isContextualConsentEligibilityMet: Boolean
}

# Encapsulates all properties related to a merchant. Ex: merchantId, email
type billingMerchant {
  # Merchant's ID (Ex: '7VJPAEVGH7B6A')
  merchantId: String

  # The country this merchant is located in
  country: billingCountryCodes

  # Merchant's email address.
  email: billingEmail

  # The locale of this merchant
  locale: billingGenericLocale

  # Merchant's logo.
  logo: billingGenericURL

  # Merchant's brand name.
  name: String

  # Bill Pay Integrator Name.
  billPayIntegratorName: String

  # Indicates type of checkout integration
  solution: billingCheckoutSolutionType!

  # Merchant category
  category: billingMerchantCategory
}

# An enumeration of Country Codes by ISO-3166-1 ALPHA-2 standards
enum billingCountryCodes {
  # Afghanistan
  AF

  # Aland Islands
  AX

  # Albania
  AL

  # Algeria
  DZ

  # American Samoa
  AS

  # Andorra
  AD

  # Angola
  AO

  # Anguilla
  AI

  # Antarctica
  AQ

  # Antigua and Barbuda
  AG

  # Argentina
  AR

  # Armenia
  AM

  # Aruba
  AW

  # Australia
  AU

  # Austria
  AT

  # Azerbaijan
  AZ

  # Bahamas
  BS

  # Bahrain
  BH

  # Bangladesh
  BD

  # Barbados
  BB

  # Belarus
  BY

  # Belgium
  BE

  # Belize
  BZ

  # Benin
  BJ

  # Bermuda
  BM

  # Bhutan
  BT

  # Bolivia
  BO

  # Bonaire, Saint Eustatius and Saba
  BQ

  # Bosnia and Herzegovina
  BA

  # Botswana
  BW

  # Bouvet Island
  BV

  # Brazil
  BR

  # British Indian Ocean Territory
  IO

  # British Virgin Islands
  VG

  # Brunei
  BN

  # Bulgaria
  BG

  # Burkina Faso
  BF

  # Burundi
  BI

  # Cambodia
  KH

  # Cameroon
  CM

  # Canada
  CA

  # Cape Verde
  CV

  # Cayman Islands
  KY

  # Central African Republic
  CF

  # Chad
  TD

  # Chile
  CL

  # China
  C2

  # China
  CN

  # Christmas Island
  CX

  # Cocos Islands
  CC

  # Colombia
  CO

  # Comoros
  KM

  # Cook Islands
  CK

  # Costa Rica
  CR

  # Croatia
  HR

  # Cuba
  CU

  # Curacao
  CW

  # Cyprus
  CY

  # Czech Republic
  CZ

  # Democratic Republic of the Congo
  CD

  # Denmark
  DK

  # Djibouti
  DJ

  # Dominica
  DM

  # Dominican Republic
  DO

  # East Timor
  TL

  # Ecuador
  EC

  # Egypt
  EG

  # El Salvador
  SV

  # Equatorial Guinea
  GQ

  # Eritrea
  ER

  # Estonia
  EE

  # Ethiopia
  ET

  # Falkland Islands
  FK

  # Faroe Islands
  FO

  # Fiji
  FJ

  # Finland
  FI

  # France
  FR

  # French Guiana
  GF

  # French Polynesia
  PF

  # French Southern Territories
  TF

  # Gabon
  GA

  # Gambia
  GM

  # Georgia
  GE

  # Germany
  DE

  # Ghana
  GH

  # Gibraltar
  GI

  # Greece
  GR

  # Greenland
  GL

  # Grenada
  GD

  # Guadeloupe
  GP

  # Guam
  GU

  # Guatemala
  GT

  # Guernsey
  GG

  # Guinea
  GN

  # Guinea-Bissau
  GW

  # Guyana
  GY

  # Haiti
  HT

  # Heard Island and McDonald Islands
  HM

  # Honduras
  HN

  # Hong Kong
  HK

  # Hungary
  HU

  # Iceland
  IS

  # India
  IN

  # Indonesia
  ID

  # Iran
  IR

  # Iraq
  IQ

  # Ireland
  IE

  # Isle of Man
  IM

  # Israel
  IL

  # Italy
  IT

  # Ivory Coast
  CI

  # Jamaica
  JM

  # Japan
  JP

  # Jersey
  JE

  # Jordan
  JO

  # Kazakhstan
  KZ

  # Kenya
  KE

  # Kiribati
  KI

  # Kosovo
  XK

  # Kuwait
  KW

  # Kyrgyzstan
  KG

  # Laos
  LA

  # Latvia
  LV

  # Lebanon
  LB

  # Lesotho
  LS

  # Liberia
  LR

  # Libya
  LY

  # Liechtenstein
  LI

  # Lithuania
  LT

  # Luxembourg
  LU

  # Macao
  MO

  # Macedonia
  MK

  # Madagascar
  MG

  # Malawi
  MW

  # Malaysia
  MY

  # Maldives
  MV

  # Mali
  ML

  # Malta
  MT

  # Marshall Islands
  MH

  # Martinique
  MQ

  # Mauritania
  MR

  # Mauritius
  MU

  # Mayotte
  YT

  # Mexico
  MX

  # Micronesia
  FM

  # Moldova
  MD

  # Monaco
  MC

  # Mongolia
  MN

  # Montenegro
  ME

  # Montserrat
  MS

  # Morocco
  MA

  # Mozambique
  MZ

  # Myanmar
  MM

  # Namibia
  NA

  # Nauru
  NR

  # Nepal
  NP

  # Netherlands
  NL

  # Netherlands Antilles
  AN

  # New Caledonia
  NC

  # New Zealand
  NZ

  # Nicaragua
  NI

  # Niger
  NE

  # Nigeria
  NG

  # Niue
  NU

  # Norfolk Island
  NF

  # North Korea
  KP

  # Northern Mariana Islands
  MP

  # Norway
  NO

  # Oman
  OM

  # Pakistan
  PK

  # Palau
  PW

  # Palestinian Territory
  PS

  # Panama
  PA

  # Papua New Guinea
  PG

  # Paraguay
  PY

  # Peru
  PE

  # Philippines
  PH

  # Pitcairn
  PN

  # Poland
  PL

  # Portugal
  PT

  # Puerto Rico
  PR

  # Qatar
  QA

  # Republic of the Congo
  CG

  # Reunion
  RE

  # Romania
  RO

  # Russia
  RU

  # Rwanda
  RW

  # Saint Barthelemy
  BL

  # Saint Helena
  SH

  # Saint Kitts and Nevis
  KN

  # Saint Lucia
  LC

  # Saint Martin
  MF

  # Saint Pierre and Miquelon
  PM

  # Saint Vincent and the Grenadines
  VC

  # Samoa
  WS

  # San Marino
  SM

  # Sao Tome and Principe
  ST

  # Saudi Arabia
  SA

  # Senegal
  SN

  # Serbia
  RS

  # Serbia and Montenegro
  CS

  # Seychelles
  SC

  # Sierra Leone
  SL

  # Singapore
  SG

  # Sint Maarten
  SX

  # Slovakia
  SK

  # Slovenia
  SI

  # Solomon Islands
  SB

  # Somalia
  SO

  # South Africa
  ZA

  # South Georgia and the South Sandwich Islands
  GS

  # South Korea
  KR

  # South Sudan
  SS

  # Spain
  ES

  # Sri Lanka
  LK

  # Sudan
  SD

  # Suriname
  SR

  # Svalbard and Jan Mayen
  SJ

  # Swaziland
  SZ

  # Sweden
  SE

  # Switzerland
  CH

  # Syria
  SY

  # Taiwan
  TW

  # Tajikistan
  TJ

  # Tanzania
  TZ

  # Thailand
  TH

  # Togo
  TG

  # Tokelau
  TK

  # Tonga
  TO

  # Trinidad and Tobago
  TT

  # Tunisia
  TN

  # Turkey
  TR

  # Turkmenistan
  TM

  # Turks and Caicos Islands
  TC

  # Tuvalu
  TV

  # U.S. Virgin Islands
  VI

  # Uganda
  UG

  # Ukraine
  UA

  # United Arab Emirates
  AE

  # United Kingdom
  GB

  # United States
  US

  # United States Minor Outlying Islands
  UM

  # Uruguay
  UY

  # Uzbekistan
  UZ

  # Vanuatu
  VU

  # Vatican
  VA

  # Venezuela
  VE

  # Vietnam
  VN

  # Wallis and Futuna
  WF

  # Western Sahara
  EH

  # Yemen
  YE

  # Zambia
  ZM

  # Zimbabwe
  ZW
}

# Encapsulates all properties related to an email. Ex: url, width, height
type billingEmail {
  # The local-part of the e-mail address (Ex: 'user')
  localPart: String

  # The domain of the e-mail address (Ex: domain.com)
  domainPart: String

  # The full e-mail address (Ex: user@domain.com)
  stringValue: String
}

# Encapsulates all properties related to a locale. GenericLocale should be used
# for most use cases. CheckoutLocale should be used for Checkout specific use
# cases. Ex: country, language, directionality, etc.
type billingGenericLocale implements billingLocale {
  # A locale's country (Ex: 'US')
  country: String

  # A locale's language (Ex: 'en')
  language: String

  # A locale's culture (Ex: 'en-US')
  culture: String

  # A locale's locale (Ex: 'en_US')
  locale: String

  # A locale's directionality (Ex: 'ltr')
  directionality: billingDirectionality
}

# The Locale interface encapsulates all properties related to a locale.
# Ex: country, language, directionality, etc.
interface billingLocale {
  # A locale's country (Ex: 'US')
  country: String

  # A locale's language (Ex: 'en')
  language: String

  # A locale's culture (Ex: 'en-US')
  culture: String

  # A locale's locale (Ex: 'en_US')
  locale: String

  # A locale's directionality (Ex: 'ltr')
  directionality: billingDirectionality
}

# An enumeration of values that language directionality can be. LTR or RTL
enum billingDirectionality {
  # Left-to-right
  LTR

  # Right-to-left
  RTL
}

# Encapsulates all properties related to a URL.
# Ex: protocol, host, port, hostname, query, href, etc.
# See https://nodejs.org/api/url.html#url_class_url for more details.
type billingGenericURL implements billingURL {
  # Protocol property of the URL (Ex: https:)
  protocol: String

  # If true, two forward slashes are required following the colon in the protocol
  slashes: Boolean

  # Username/password portion of the URL (Ex: user:pass)
  auth: String

  # Full lower-cased host portion of the URL (Ex: google.com:8000)
  host: String

  # Numeric port portion of the URL (Ex: 8000)
  port: String

  # Hostname portion of the URL.  Does not contain a port. (Ex: google.com)
  hostname: String

  # Fragment portion of the URL including the leading ASCII hash (#) character. (Ex: #hash)
  hash: String

  # Search property consists of the entire 'query string' portion of the URL,
  # including the leading ASCII question mark (?) character. (Ex: ?key=value)
  search: String

  # Query string of the URL.  Does not include the leading question mark (?) character. (Ex: key=value)
  query: String

  #
  queryParams: billingJSON

  # Path portion of the URL, but does not include the query string. (Ex: /path)
  pathname: String

  # Path portion of the URL which includes the query string. (Ex: /path?key=value)
  path: String

  # The serialized, full URL with all properties included. (Ex: https://google.com/path?key=value#hash)
  href: String
}

# Encapsulates all properties related to a URL.
# Ex: protocol, host, port, hostname, query, href, etc.
# See https://nodejs.org/api/url.html#url_class_url for more details.
interface billingURL {
  # Protocol property of the URL (Ex: https:)
  protocol: String

  # If true, two forward slashes are required following the colon in the protocol
  slashes: Boolean

  # Username/password portion of the URL (Ex: user:pass)
  auth: String

  # Full lower-cased host portion of the URL (Ex: google.com:8000)
  host: String

  # Numeric port portion of the URL (Ex: 8000)
  port: String

  # Hostname portion of the URL.  Does not contain a port. (Ex: google.com)
  hostname: String

  # Fragment portion of the URL including the leading ASCII hash (#) character. (Ex: #hash)
  hash: String

  # Search property consists of the entire 'query string' portion of the URL,
  # including the leading ASCII question mark (?) character. (Ex: ?key=value)
  search: String

  # Query string of the URL.  Does not include the leading question mark (?) character. (Ex: key=value)
  query: String

  #
  queryParams: billingJSON

  # Path portion of the URL, but does not include the query string. (Ex: /path)
  pathname: String

  # Path portion of the URL which includes the query string. (Ex: /path?key=value)
  path: String

  # The serialized, full URL with all properties included. (Ex: https://google.com/path?key=value#hash)
  href: String
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar billingJSON

# Types of checkout integration
enum billingCheckoutSolutionType {
  # Buyer must have a PayPal account to check out.
  MARK

  # Buyer can check out without creating a PayPal account. This is referred to as PayPal Account Optional.
  SOLE

  #
  SHORTCUT
}

# An enumeration of merchant category types.
enum billingMerchantCategory {
  # ALLOWED_GAMING
  ALLOWED_GAMING
}

# Encapsulates all properties related to a User.
# Ex: Name, Addresses, Profile Photos, etc.
# Average SLA response time - 70ms
#
# Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
type billingUser {
  # User ID (or an encrypted account number) Average SLA response time - 70ms
  userId: String

  # A User's addresses, an Array of GenericAddress types.
  # Optionally, you can query by address type (AddressType).
  # Otherwise, all addresses are returned.
  # Average SLA response time - 70ms
  addresses(type: billingAddressType): [billingGenericAddress]

  # A User's email address. Average SLA response time - 70ms
  email: billingEmail

  # A user's locale. Average SLA response time - 70ms
  locale: billingGenericLocale

  # A User's name. Average SLA response time - 70ms
  name: billingPersonName

  # A User's phone numbers, an Array of GenericPhone types.
  # Optionally, you can query by phone type (PhoneType).
  # Otherwise, all phone numbers are returned.
  # Average SLA response time - 70ms
  phones: [billingGenericPhone]

  # A User's profile image, a ProfileImage type.
  # You can query by width, height, or type (ProfileImageType).
  # Average SLA response time - 80ms
  profileImage(
    width: Int
    height: Int
    type: billingProfileImageType
  ): billingProfileImage

  # A User's profile images, an Array of ProfileImage types.
  # Average SLA response time - 80ms
  profileImages: [billingProfileImage]

  # Encapsulates all properties related to a User's auth.
  # Ex: Access token
  auth: billingAuth

  # User is eligible to hold paypal balance or not
  eligibleToHoldBalance: Boolean
}

# An enumeration of types that an Address can be. PROFILE, SHIPPING, BUSINESS, etc.
enum billingAddressType {
  # An address associated with a user profile
  PROFILE

  # A shipping address
  SHIPPING

  # A business address
  BUSINESS

  # A drop-off address
  DROP_OFF

  # A verisign address
  VERISIGN

  # A prior/inactive address
  PRIOR

  # A home or work address
  HOME_OR_WORK

  # A gift address
  GIFT
}

# Encapsulates all properties related to a generic address.
# Ex: line1, city, state, postalCode, fullAddress, isDefaultBilling, etc.
type billingGenericAddress {
  # An Address ID (Ex: '285166')
  addressId: String

  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String

  # An Address second line street address (Ex: 'Apt 123')
  line2: String

  # An Address city (Ex: 'San Jose')
  city: String

  # An Address state/province (Ex: 'CA')
  state: String

  # An Address postal code (Ex: '95131')
  postalCode: String

  # An Address on a single line (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String

  # An Address two-letter country code (Ex: 'US')
  country: String

  # An Address is selected. If you are listing out addresses in a UI, and need to
  # show that an address is selected, use this property.
  isSelected: Boolean

  # If an Address is the primary address
  isPrimary: Boolean

  # If an Address is the default billing address
  isDefaultBilling: Boolean

  # If an Address is the default shipping address
  isDefaultShipping: Boolean

  # Type of Address (Ex: 'SHIPPING').  See AddressType enum.
  type: billingAddressType
}

# Encapsulates all properties related to a person's name.
# Ex: givenName, middleName, familyName, fullName, etc.
type billingPersonName {
  # A person's salutation (Ex: 'Mr')
  salutation: String

  # A person's given name, or first name (Ex: 'William')
  givenName: String

  # A person's middle name (Ex: 'Alan')
  middleName: String

  # A person's family name, or last name (Ex: 'Doe')
  familyName: String

  # A person's suffix (Ex: 'Jr')
  suffix: String

  # A person's full name (Ex: 'Mr. William Alan Doe, Jr.')
  fullName: String
}

# Encapsulates all properties related to a generic phone number.
# Ex: countryCode, nationalNumber, type, national, international, etc.
type billingGenericPhone {
  # A country code associated with a phone number (Ex: '1')
  countryCode: String

  # An unformatted phone number (Ex: '2015550123')
  number: String

  # A national representation of a phone number (Ex: '(201) 555-0123')
  national: String

  # A national (obscured) representation of a phone number (Ex: '(2**) ***-0123')
  nationalObscured: String

  # An international representation of a phone number (Ex: '+1 201-555-0123')
  international: String

  # An E164 representation of a phone number (Ex: '+12015550123')
  e164: String

  # An RFC3966 representation of a phone number (Ex: 'tel:+1-201-555-0123')
  rfc3966: String

  # Whether or not a phone is marked as active
  isActive: Boolean

  # Whether or not a phone is marked as primary
  isPrimary: Boolean

  # Type of phone (Ex: 'MOBILE').  See PhoneType enum.
  type: billingPhoneType
}

# An enumeration of types that an Phone can be. MAIN, WORK, OTHER, FAX
enum billingPhoneType {
  # Phone is a main phone
  MAIN

  # Phone is a work phone
  WORK

  # Phone is a fax phone
  FAX

  # Phone is another type of phone
  OTHER

  # Mobile phone
  MOBILE
}

# An enumeration of types that ProfileImage can have.
#
# See: https://engineering.paypalcorp.com/confluence/display/PayPalMediaService/Image+Request+Metadata+Data#ImageRequestMetadataData-ImageIds
enum billingProfileImageType {
  # 32x32
  XXS

  # 64x64
  XS

  # 96x96
  S

  # 200x200
  M

  # 300x300
  L

  # 400x400
  XL

  # 500x500
  XXL

  # 800x800
  XXXL

  # 96x96
  SIZE_0

  # 400x400
  SIZE_1

  # 200x200
  SIZE_2

  # 800x800
  SIZE_3

  # 640x480
  SIZE_4

  # 100x75
  SIZE_5

  # 70x70
  SIZE_6

  # 150x150
  SIZE_7

  # 400x300
  SIZE_8

  # 200x150
  SIZE_9

  # 9999x9999
  SIZE_10

  # 310x90
  SIZE_11

  # 500x500
  SIZE_12

  # 120x42
  SIZE_13

  # 64x64
  SIZE_14

  # 225x125
  SIZE_15

  # 400x300
  SIZE_16

  # 80x80
  SIZE_17

  # 800x600
  SIZE_20

  # 60x60
  SIZE_22

  # 80x80
  SIZE_23

  # 298x298
  SIZE_24

  # 140x140
  SIZE_26

  # 180x60
  SIZE_28

  # 900x300
  SIZE_29

  # 300x115
  SIZE_30

  # 300x225
  SIZE_31

  # 1600x1600
  SIZE_32

  # 48x48
  SIZE_33

  # 50x50
  SIZE_34

  # 300x300
  SIZE_35

  # 150x40
  SIZE_36

  # 175x175
  SIZE_37

  # 115x115
  SIZE_38

  # 32x32
  SIZE_39

  # 80x60
  SIZE_40

  # 467x467
  SIZE_41

  # 225x70
  SIZE_42

  # 221x330
  SIZE_43

  # 425x34
  SIZE_44

  # 1200x1200
  SIZE_45

  # 623x290
  SIZE_47

  # 1024x1024
  SIZE_48

  # 200x170
  SIZE_49

  # 100x85
  SIZE_50

  # 90x90
  SIZE_51

  # 132x123
  SIZE_52

  # 190x100
  SIZE_53

  # 122x122
  SIZE_54

  # 286x214
  SIZE_55

  # 100x100
  SIZE_56

  # 1600x1600
  SIZE_57

  # 640x640
  SIZE_58

  # 960x960
  SIZE_59

  # 225x225
  SIZE_62

  # 300x120
  SIZE_65

  # 82x35
  SIZE_66

  # 728x90
  SIZE_67

  # 256x35
  SIZE_68

  # 120x60
  SIZE_69

  # 64x35
  SIZE_70

  # 55x55
  SIZE_71

  # 500x375
  SIZE_72

  # 65x65
  SIZE_73

  # 135x115
  SIZE_74

  # 430x325
  SIZE_75

  # 400x320
  SIZE_76

  # 72x54
  SIZE_77

  # 75x56
  SIZE_78

  # 320x240
  SIZE_79

  # 600x450
  SIZE_80

  # 92x72
  SIZE_81

  # 147x147
  SIZE_82

  # 358x358
  SIZE_83

  # 498x498
  SIZE_84

  # 726x726
  SIZE_85

  # 70x53
  SIZE_87

  # 175x130
  SIZE_88

  # 600x500
  SIZE_89

  # 220x220
  SIZE_90

  # 276x276
  SIZE_91

  # 560x420
  SIZE_92

  # 360x480
  SIZE_93

  # 280x210
  SIZE_94

  # 180x240
  SIZE_95

  # 205x75
  SIZE_96

  # 90x90
  SIZE_97

  # 180x170
  SIZE_98

  # 650x412
  SIZE_100

  # 107x88
  SIZE_101

  # 247x187
  SIZE_102

  # 180x180
  SIZE_103

  # 720x215
  SIZE_104

  # 980x340
  SIZE_105

  # 160x160
  SIZE_106

  # 1000x1000
  SIZE_107

  # 250x90
  SIZE_109

  # 462x360
  SIZE_110

  # 225x155
  SIZE_111

  # 225x195
  SIZE_112

  # 450x450
  SIZE_113

  # 67x67
  SIZE_114

  # 216x216
  SIZE_115

  # 250x250
  SIZE_116

  # 190x190
  SIZE_117

  # 275x275
  SIZE_118

  # 110x110
  SIZE_119

  # 170x170
  SIZE_120

  # 135x135
  SIZE_121

  # 440x420
  SIZE_134

  # 275x375
  SIZE_135

  # 120x80
  SIZE_136

  # 200x64
  SIZE_137

  # 200x42
  SIZE_138

  # 380x380
  SIZE_139

  # 1134x700
  SIZE_140

  # 156x156
  SIZE_141

  # 112x76
  SIZE_142
}

# Encapsulates all properties related to a profile image.
# Ex: url, profileImageType, width, height
type billingProfileImage implements billingImage {
  # A profile image's URL.  A URL type.
  url: billingGenericURL

  # A profile image's type. A ProfileImageType type.
  type: billingProfileImageType

  # A profile image's width
  width: String

  # A profile image's height
  height: String
}

# The Image interface encapsulates all properties related to an image.
# Ex: url, width, height
interface billingImage {
  # An Image's URL.
  url: billingGenericURL

  # The width of the image
  width: String

  # The height of the image
  height: String
}

# Encapsulates all properties related to a User's auth.
# Ex: Access token
# Average SLA response time - x ms
#
# Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
type billingAuth {
  #
  accessToken: String
}

# Different kind of partner integration supported, as of now only one
enum billingPartnerIntegration {
  #
  BTVZERO
}

# Encapsulates all properties related to FundingOptionsDetails.
# Ex: futureFundingOptions, futureFundingOptions.
type billingFundingOptionsDetails {
  # Future funding options that can be used for subsequent payments
  futureFundingOptions: [billingFundingTool!]

  # Funding options which are not allowed for this flow because of risk or some card expired etc
  disallowedFundingOptions: [billingDisallowedFundingOption]

  # creditInstrumentsDisallowed for the flow
  disallowedFundingTypes: [billingDisallowedFundingType]
}

# Encapsulates all properties related to a FundingInstrument.
# Ex: name, type, lastDigits, amount, etc.
# As of now Balance accounts and rewards are not mapped
type billingFundingTool {
  # Funding option's ID (Ex: 'BA8JUE35JC6JBU4')
  # This differs from ID because ID will sometimes have an extra
  # keyword appended
  fundingOptionId: String

  # Funding option's name (Ex: 'BANK OF AMERICA')
  name: String

  # NickName for the given Funding Option (Ex: 'AMEX Travel Card' for 'American Express Card ending in xxxx')
  nickName: String

  # Funding option's full name (Ex: 'American Express' for 'AMEX')
  formattedName: String

  # Funding option's amount.
  amount: billingAmount

  # Classification of funding instrument
  type: billingFundingInstrumentType!

  # Subclassification of funding instrument
  subtype: billingFundingInstrumentSubType!

  # Funding option's currency conversion information
  currencyConversion: billingCheckoutCurrencyConversion

  # If a funding option is preferred by the user
  isPreferred: Boolean

  # If a funding option is selected by the user
  isSelected: Boolean!

  # If a funding option is a stcky FI
  isSticky: Boolean!

  # Last digits of a credit card
  lastDigits: String

  # constraint for smart$ auth
  constraint: billingConstraint

  # The backup to this funding option.
  # Only applicable to some funding option types.
  backupOption: billingBackupOption

  # issuer details for this funding option
  # EX: CHASE PAY NET information
  issuer: billingIssuer

  # The capabilities of this funding option.
  # Only applicable to card funding option types.
  capabilities: [billingCapability]

  # The card art details for card.
  # Only applicable to card funding option types.
  cardArtDetails: billingCardArtDetails

  # Shows the relations between the card and the external isusers
  linkedNetworks: [billingJSON]

  # The personalized attribution message for the card.
  # Only applicable if the attribution message is configured.
  personalizedAttributions: [billingPersonalizedAttribution]

  # 3DS (2.0) contingency data for associated FI
  threeDSContingencyData: billingThreeDSContingency
}

# Encapsulates all properties related to an Amount.
# Ex: currencySymbol, currencyValue, currencyCode, etc.
type billingAmount {
  # Amount's currency code (Ex: 'USD')
  currencyCode: String

  # Amount's formatted currency symbol and value (Ex: '$0.01')
  currencyFormat: String

  # Amount's formatted currency symbol, value, and code (Ex: '$0.01 USD')
  currencyFormatSymbolISOCurrency: String

  # Amount's currency symbol (Ex: '$')
  currencySymbol: String

  # Amount's currency value (Ex: '0.01')
  currencyValue: String
}

# Types of FundingInstrument
enum billingFundingInstrumentType {
  #
  BANK

  #
  CARD

  #
  BALANCE

  #
  CREDIT
}

# An enumeration of types that a FundingInstrumentSubType can be.
# CREATED, APPROVED, SUSPENDED, CANCELLED, or DECLINED
enum billingFundingInstrumentSubType {
  # For Checking bank account
  CHECKING

  # For Savings bank account
  SAVINGS

  # For Wallet balance
  BALANCE

  # For Credit card
  CREDIT

  # For Debit card
  DEBIT

  # For PayPal credit
  PAYPAL

  # For prepaid card
  PREPAID

  #
  MERCHANT

  # For bank accounts
  ACCOUNT_TYPE

  # Default subtype
  UNKNOWN
}

# Encapsulates all properties related to a CheckoutCurrencyConversion.
# Ex: from, to, rate, isReadOnly, etc.
type billingCheckoutCurrencyConversion {
  # What the currency is converted from.
  from: billingAmount

  # What the currency is converted to.
  to: billingAmount

  # The currency conversion rate.
  rate: String

  # The currency conversion rate spread.
  spread: String

  # Whether or not a user can change a conversion type.
  isReadOnly: Boolean

  # Date of validity.  The date that the conversion rate was issued.
  issuedDate: billingGenericDate

  # Type of currency conversion rate.
  type: billingCheckoutCurrencyConversionType

  # The cart total with the currency conversion rate applied.
  convertedCartTotal: billingAmount
}

# Encapsulates many ways that a date can be formatted. Ex: E, Hm, Ms, etc.
type billingGenericDate {
  # Fri
  E: String

  # Fri 14:10
  EHm: String

  # Fri 14:10:10
  EHms: String

  # 21 Fri
  Ed: String

  # Fri 2:10 PM
  Ehm: String

  # Fri 2:10:10 PM
  Ehms: String

  # 2014 AD
  Gy: String

  # Mar 2014 AD
  GyMMM: String

  # Fri, 21 Mar 2014 AD
  GyMMMEd: String

  # Mar 21, 2014 AD
  GyMMMd: String

  # 14
  H: String

  # 14:10
  Hm: String

  # 14:10:10
  Hms: String

  # 3
  M: String

  # Fri, 3/21
  MEd: String

  # Mar
  MMM: String

  # Fri, Mar 21
  MMMEd: String

  # March 21
  MMMMd: String

  # Mar 21
  MMMd: String

  # Mar 21
  MMMdd: String

  # March 21
  MMMMdd: String

  # 3/21
  Md: String

  # 21
  d: String

  # 2 PM
  h: String

  # 2:10 PM
  hm: String

  # 2:10:10 PM
  hms: String

  # 10:10
  ms: String

  # 2014
  y: String

  # 3/2014
  yM: String

  # 03/2014
  yMM: String

  # Fri, 3/21/2014
  yMEd: String

  # Mar 2014
  yMMM: String

  # Fri, Mar 21, 2014
  yMMMEd: String

  # Mar 21, 2014
  yMMMd: String

  # 3/21/2014
  yMd: String

  # 03/21/2014
  yMMdd: String

  # Q1 2014
  yQQQ: String

  # 1st quarter 2014
  yQQQQ: String

  # March 2014
  yyyyMMMM: String

  # Thursday, September 28, 2017 at 5:32:00 PM Pacific Daylight Time
  dateTimeFull: String

  # September 28, 2017 at 5:32:00 PM PDT
  dateTimeLong: String

  # Sep 28, 2017, 5:32:00 PM
  dateTimeMedium: String

  # 9/28/17, 5:32 PM
  dateTimeShort: String

  # 5:32:00 PM Pacific Daylight Time
  timeFull: String

  # 5:32:00 PM PDT
  timeLong: String

  # 5:32:00 PM
  timeMedium: String

  # 5:32 PM
  timeShort: String

  # Thursday, September 28, 2017
  dateFull: String

  # September 28, 2017
  dateLong: String

  # Sep 28, 2017
  dateMedium: String

  # 9/28/17
  dateShort: String

  # September 28, 2017 at 5:32 PM
  dateLongTimeShort: String

  # Thursday, September 28, 2017 at 5:32:00 PM
  dateFullTimeMedium: String

  # Thursday, September 28, 2017 at 5:32 PM
  dateFullTimeShort: String
}

# An enumeration of types that CheckoutCurrencyConversion can have.  PAYPAL, VENDOR
enum billingCheckoutCurrencyConversionType {
  # PayPal conversion rate
  PAYPAL

  # Vendor conversion rate
  VENDOR
}

# Encapsulates all properties related to constraint on fi.
# EX(Constarint for AUTH)
type billingConstraint {
  # amount of constraint
  amount: billingAmount

  # type for constraint.(EX: 'AUTH')
  type: String
}

# Encapsulates all properties related to a backup funding option.
# Ex: name, type, lastDigits, etc.
type billingBackupOption {
  # Funding option's ID (Ex: 'BA8JUE35JC6JBU4')
  fundingOptionId: String!

  # Name of back up funding option (Ex: 'BANK OF AMERICA')
  name: String!

  # Last digits of a credit card
  lastDigits: String
}

# Encapsulates all properties related to an issuer.
# Ex: name, formattedName, description, etc.
type billingIssuer {
  # issuer's name (Ex: 'CHASE PAY NET')
  name: String

  # issuer's formatted name (Ex: 'Chase')
  formattedName: String

  # issuer's product description (Ex: 'Chase Visa Credit Card')
  description: String
}

# Encapsulates all properties related to capability of fi.
type billingCapability {
  # name of capability (EX: 'DEBIT')
  name: String!

  # network contingencies for capability.
  networkContingencies: [billingNetworkContingency]
}

# Encapsulates all properties related to capability of fi.
type billingNetworkContingency {
  # name of contingency (EX: 'VISA')
  network: String
}

# Encapsulates all properties related to card art.
# Ex: cdnLinkPath, mimeType.
type billingCardArtDetails {
  # base cdn link path
  cdnLinkPath: String

  # original MIME type
  mimeType: String
}

# Encapsulated the attribution message for a fi.
type billingPersonalizedAttribution {
  # The id of the message.
  id: String

  # The attribution message rank that is given by MORS.For a given instrument
  # configured list of messages, the rank defines the highest in order of relevance
  rank: Int

  # The attribution message that is configured.
  message: String
}

# Encapsulates all properties related to a ThreeDomainSecureResolutionContingency type
type billingThreeDSContingency {
  # Resolution contingency name (Ex: 'PAYER_ACTION_REQUIRED')
  name: String

  # Resolution cause for current contingency (Ex: 'NEED_3D_SECURE_AUTHENTICATION')
  causeName: String!
}

# Encapsulates all properties related to DisallowedFundingOption.
type billingDisallowedFundingOption {
  # Disallowed funding option's reason (Ex: 'card expired')
  reason: String!

  # Funding option that is disallowed
  fundingOption: billingFundingTool
}

# Encapsulates all properties related to DisallowedFundingOption.
type billingDisallowedFundingType {
  # Disallowed funding option's type (Ex: 'CARD', 'BANK')
  type: billingFundingInstrumentType!

  # SubType for the disallowed funding option type (Ex: 'DEBIT', 'DEBIT')
  subType: billingFundingInstrumentSubType!

  # Names of the disallowed fundtion option type (Ex: ['Amex'], ['ALL'])
  names: [billingDisallowedFundingInstrumentName!]
}

# An enumeration of FundingInstrument names that are disallowed.
# ALL
enum billingDisallowedFundingInstrumentName {
  # ALL the instrument names
  ALL
}

# Encapsulates all types of offers applicable for this flow.
# Ex: creditOffers
type billingOffers {
  #
  creditOffers: [billingCreditOffer]
}

# Encapsulates all properties related to a credit offer fetched from MORS.
type billingCreditOffer {
  # A marketing offer's reference ID.
  referenceId: String

  # Rank of this specific offer within the overall list.  Rank will not necessarily
  # be consecutive if other touchpoints had higher priorities.
  rank: Int

  # A marketing offer's content.
  # An object of key/values that are relevant to a campaign.
  content: billingJSON

  # Utilities for tracking this offer and the user's interaction with it.
  trackingDetails: billingMorsMRTrackingDetails
}

# Utilities for tracking a message recommendation and the user's interaction with it.
# These will be used as src attribute of a hidden image in frontend for tracking.
type billingMorsMRTrackingDetails {
  # Url used for impression tracking
  impressionUrl: billingGenericURL

  # URL used for click tracking
  clickUrl: billingGenericURL

  # URL used for dismiss tracking
  dismissUrl: billingGenericURL
}

# Encapsulates all properties related to a generic address.
# Ex: line1, city, state, postalCode, fullAddress, etc.
type billingCheckoutShippingAddress implements billingAddress {
  # An Address ID (Ex: '285166')
  addressId: String

  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String

  # An Address second line street address (Ex: 'Apt 123')
  line2: String

  # An Address city (Ex: 'San Jose')
  city: String

  # An Address state/province (Ex: 'CA')
  state: String

  # An Address postal code (Ex: '95131')
  postalCode: String

  # An Address two-letter country code (Ex: 'US')
  country: String

  # An Address on a single line
  # (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String

  # If an Address is the default shipping address
  isDefaultShipping: Boolean @deprecated

  # If an Address is the default shipping address
  isDefault: Boolean

  # If an Address is the primary address
  isPrimary: Boolean

  # An Address is selected. If you are listing out addresses in a UI, and
  # need to show that an address is selected, use this property.
  isSelected: Boolean

  # An Address is disabled for transaction
  disableForTransaction: Boolean

  # The type of Address (Ex: 'BILLING')
  type: billingAddressType

  # The normalization status of Address (Required for Brazil)
  normalizationStatus: billingNormalizationAddressStatus

  # A name associated with the address
  name: billingPersonName

  # A full name associated with an Address, as a String (Ex: 'John Doe')
  fullName: String @deprecated
}

# The Address interface encapsulates all properties related to an address. Ex: addressId
interface billingAddress {
  # An Address ID
  addressId: String
}

# An enumeration of shipping address normalization status.
enum billingNormalizationAddressStatus {
  #
  UNKNOWN

  #
  UNNORMALIZED_USER_PREFERRED

  #
  NORMALIZED

  #
  UNNORMALIZED
}

# An enumeration of types that a BillingIntent can be.
# VAULT
enum billingIntent {
  # VAULT integration
  VAULT

  # All Other integrations
  OTHER
}

# Encapsulates all properties related to PaymentExperience.
type billingPaymentExperience {
  # Payment experience (Ex: 'HERMES')
  paymentExperience: String

  # Payment experience form factor
  paymentExperienceFormFactor: String

  # 3d authentication is supported or not
  is3dSecureAuthenticationSupported: String
}

# Encapsulates all the Experiments.
type billingExperiments {
  # rt_opt_ba_text experiment
  rtOptBaText: String

  # rt_opt_ryp_comprehension experiment
  rtOptRypComprehension: String
}

# Encapsulates all properties of existing billing agreement Id.
# Ex: balancePreference, stickyFundingOptionId, billingAgreementId
type billingExistingBillingAgreementDetails {
  # Billing Agreement Id
  id: String

  # Sticky fuding option Id of the Billing Agreement
  stickyFundingOptionId: String

  # Balance Preference of the Billing Agreement
  balancePreference: billingBalancePreference
}

# An enumeration of types that a BalancePreference can be.
# OPT_IN or OPT_OUT
enum billingBalancePreference {
  # If Buyer chooses to use Balance for BA payments
  OPT_IN

  # If Buyer chooses not to use Balance for BA payments
  OPT_OUT
}

# Buyer address (required for validating, normalizing address)
input billingAddressInput {
  # first line street address (Ex: '2211 North 1st St')
  line1: String!

  # second line street address (Ex: 'Apt 123')
  line2: String

  # building name (required for prefill)
  buildingName: String

  # city (Ex: 'San Jose')
  city: String

  # state/province (Ex: 'CA')
  state: String

  # postal code (Ex: '95131')
  postcode: String

  # two-letter country code (Ex: 'US')
  country: String!

  # required for BR address
  streetNumber: String

  # required for BR address
  neighborhood: String
}

# Buyer address
type billingPrefillAddress {
  # first line street address (Ex: '2211 North 1st St')
  line1: String

  # second line street address (Ex: 'Apt 123')
  line2: String

  # city (Ex: 'San Jose')
  city: String

  # state/province (Ex: 'CA')
  state: String

  # postal code (Ex: '95131')
  postcode: String

  # two-letter country code (Ex: 'US')
  country: String

  # required for BR address
  streetNumber: String

  # required for BR address
  neighborhood: String

  # delivery addresses of buyer
  deliveryAddresses: [billingJSON]
}

# Card input type represents for a card
# issuer: card.issuer is not mapped yet. If we need in frontend. we can map
type billingCard {
  # last digits of the card. (Ex: '1111')
  lastDigits: String!

  # type of the card. (Ex: 'CREDIT'/'DEBIT')
  type: String

  # name of the card. (Ex: 'VISA')
  name: String

  # NickName for the given Funding Option (Ex: 'AMEX Travel Card' for 'American Express Card ending in xxxx')
  nickName: String

  # Expiration date of the card
  expirationDate: String

  # billing address attached to the card
  billingAddress: billingCardBillingAddress
}

# Encapsulates all properties related to an address.
# Ex: line1, city, state, postalCode, etc.
type billingCardBillingAddress implements billingAddress {
  # An Address ID (Ex: '285166')
  addressId: String

  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String

  # An Address second line street address (Ex: 'Apt 123')
  line2: String

  # An Address city (Ex: 'San Jose')
  city: String

  # An Address state/province (Ex: 'CA')
  state: String

  # An Address postal code (Ex: '95131')
  postalCode: String

  # An Address two-letter country code (Ex: 'US')
  country: String
}

# Represents the all card types for a particular merchant
type billingCardTypes {
  # allowed card types
  allowed: [String]!

  # disallowed card types
  disallowed: [String]

  # subTypes (Ex: 'DEBIT')
  subTypes: [String]
}

# Represents the all card types for a particular merchant
type billingCardTypesIDS {
  # allowed card types
  allowed: [billingCardLogoInfo]!

  # disallowed card types
  disallowed: [String]

  # subTypes (Ex: 'DEBIT')
  subTypes: [String]
}

# Card logo information
type billingCardLogoInfo {
  # card brand name
  brand: String

  # logo of the brand
  brandLogo: billingCardArtDetails

  # card issuers
  issuerCardArts: [billingIssuerCardArt]
}

# Encapsulates all properties related to an issuer.
# Ex: name, formattedName, description, etc.
type billingIssuerCardArt {
  # issuer's name (Ex: 'ITAU')
  name: String

  # issuer rank
  rank: Int

  # logo of the issuer
  issuerLogo: billingCardArtDetails
}

# Represents the all card types for a particular merchant
type billingBinType {
  # type (EX: 'VISA')
  type: String!

  # subType (Ex: 'CREDIT')
  subType: String
}

# This type will represent billing agreement in PayPal system.
# This will support all type of billing agreements: Subscriptions, Recurring Payments, Reference Transactions
type billingBillingAgreement {
  # Billing agreement ID or Subscription ID generated by PayPal
  id: String!

  # The tokenized payment source to fund a payment.
  externalId: billingExternalId

  # The status of the token created
  status: billingBillingAgreementStatus!

  # The reason or notes for the status of the billing agreement/subscription
  statusChangeNote: String

  # Type of billing agreement
  type: billingBillingAgreementType

  # The type of billing consent
  consentType: billingConsentType

  # The date and time when status was updated. Internet date and time format.
  # Seconds are required while fractional seconds are optional.
  statusUpdateTime: billingDateTime

  # Description to be shown to consumer on paypal.com
  description: String

  # The intent for agreement creation
  intent: billingCreationIntent

  # Business entity details associated with an agreement
  businessEntity: billingBusinessEntity

  # The shipping details.
  shipping: billingShippingDetails

  # Custom attributes to be associated with the agreement
  payeeDefinedFields: [billingPayeeDefinedFields]

  # Payment preference for billing agreement
  paymentPreference: billingBillingAgreementPaymentPreference

  # The start date for billing agreement.This regular expression does not validate all dates.
  # For example, February 31 is valid and nothing is known about leap years.
  # Pattern: ^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$
  startDate: billingDateTime

  # The end date for billing agreement.This regular expression does not validate all dates.
  # For example, February 31 is valid and nothing is known about leap years.
  # Pattern: ^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$
  endDate: billingDateTime

  # The customer who approves and pays for the order. The customer is also known as the payer or subscriber.
  payer: billingPayer

  # The merchant who receives the funds and fulfills the order. The merchant is also known as the payee.
  payee: billingPayee

  # Details of a product
  product: billingProduct

  # Plan defines pricing and billing cycle details for agreements
  plan: billingPlan

  # Consumer/Buyer funding Options detail
  fundingOptionDetail: billingFundingOptionDetail

  # The quantity of the product in the subscription/billing agreement
  quantity: Int

  # The billing details for the agreement. If the agreement was or is active, these fields are populated.
  billingInfo: billingBillingInfo

  # Indicates whether the subscription auto-renews after the billing cycles complete.
  autoRenewal: Boolean

  # The update time for billing agreement/subscription.This regular expression does not validate all dates.
  # For example, February 31 is valid and nothing is known about leap years.
  # Pattern: ^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$
  updateTime: billingDateTime

  # The date and time when agreement was created. Internet date and time format.
  createTime: billingDateTime

  # This field will tell what all operations are allowed on this agreement
  supportedOperations: [billingSupportedOperationType]
}

# The tokenized payment source to fund a payment.
type billingExternalId {
  # The PayPal-generated ID for the token.
  id: String

  # The tokenization method that generated the ID.
  type: billingExternalIdType
}

# The tokenization method that generated the ID.
# NONCE, PAYMENT_METHOD_TOKEN, BILLING_AGREEMENT or FUNDING_OPTION_ID
enum billingExternalIdType {
  #
  NONCE

  #
  PAYMENT_METHOD_TOKEN

  #
  BILLING_AGREEMENT

  #
  FUNDING_OPTION_ID
}

# This enum indicates what is the current status of billing agreement
# "ACTIVE": "The Billing Agreement is active and can be used for a purchase"
# "CANCELLED": "The billing agreement is canceled"
# "SUSPENDED": "The billing agreement is suspened due to dispute / consumer preference"
# "APPROVAL_PENDING": "The agreement is created but not yet approved by the buyer."
# "APPROVED": "The buyer has approved the agreement."
# "EXPIRED": "The agreement is expired."
enum billingBillingAgreementStatus {
  #
  ACTIVE

  #
  CANCELLED

  #
  SUSPENDED

  #
  APPROVAL_PENDING

  #
  APPROVED

  #
  EXPIRED

  #
  CANCELLATION_PENDING
}

# Type of billing agreement.
# "REFERENCE_TRANSACTION": "Reference transaction. This includes MIB, MISB, CIB"
# "SUBSCRIPTION": "This indicate subscriptions create as par part of v1/subscriptions or new subscription product"
# "LEGACY_SUBSCRIPTION": "To indicate WPS_SUBSCRIPTION"
# "RECURRING_PAYMENTS": "Indicates recurring payments"
enum billingBillingAgreementType {
  #
  REFERENCE_TRANSACTION

  #
  SUBSCRIPTION

  #
  WPS_SUBSCRIPTION

  #
  RECURRING_PAYMENTS
}

# Types of BillingConsent
enum billingConsentType {
  # All flavours of Reference transaction and Merchant Managed Payments.
  BILLING_AGREEMENTS

  # All integrations of Payment Management Payments including NVP RP, REST V1 RP,
  # Subscriptions V1, WPS Subscriptions, Auto Billing and Instalment Plan.
  BILLING_SUBSCRIPTIONS
}

# The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
# Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
#
# minLength: 20
# maxLength: 64
# pattern: ^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$
scalar billingDateTime

# This enum indicates the intent for agreement creation
# "TOKENIZED_WALLET": "The agreement will be used for instore tokenization"
# "IDENTITY_LINKING": "The agreement will be used for unified account linking"
# "VAULT": "The agreement will be issued as used as a Payment method token"
# "BILLING_AGREEMENTS": "The agreement issued will be used as Reference Transaction Agreement"
# "VZERO": "The billing agreements those are created as VZERO(Ex: For brainTree)"
enum billingCreationIntent {
  #
  LEGACY

  #
  TOKENIZED_WALLET

  #
  IDENTITY_LINKING

  #
  VAULT

  #
  BILLING_AGREEMENTS

  #
  VZERO

  #
  REST
}

# Business entity details associated with an agreement
type billingBusinessEntity {
  # The business entity type with which the buyer is getting in agreement with
  type: billingBusinessEntityType

  # The model of the business entity for which agreement will be used for
  model: billingBusinessModel
}

# This enum indicates the initiator for payment calls on this Payment token
# "MERCHANT": "The actual owner of the Payment token will be using for charging"
# "CHANNEL": "The PayPal Payment Token will be used for transferring funds to a third party"
enum billingBusinessEntityType {
  #
  MERCHANT

  #
  CHANNEL
}

# The type of business model PayPal Payment Token will be used for
# "B2B": "The PayPal Payment Token will be used for B2B business model. Default value is B2B"
# "B2C": "The PayPal Payment Token will be used for B2C business model"
enum billingBusinessModel {
  #
  B2B

  #
  B2C
}

# The shipping details.
type billingShippingDetails {
  # The name of the party. When the party is a person, the party's full name.
  name: String

  # An array of shipping options that the payee or merchant offers to the payer to ship or pick up their items
  options: [billingShippingDetailsOption]

  # The portable international postal address.
  address: billingAddressPortable

  # The currency and amount for a financial transaction, such as a balance or payment due.
  # Use this if options is empty
  shippingAmount: billingMoney
}

# The options that the payee or merchant offers to the payer to ship or pick up their items.
type billingShippingDetailsOption {
  # A unique ID that identifies a payer-selected shipping option. Max Length: 127
  id: String

  # A description that the payer sees, which helps them choose an appropriate shipping option.
  # For example, `Free Shipping`, `USPS Priority Shipping`.
  # Localize this description to the payer's locale.
  label: String

  # The method by which the payer wants to get their items.
  type: billingShippingDetailsOptionType

  # The currency and amount for a financial transaction, such as a balance or payment due.
  amount: billingMoney

  # If the API request sets `selected = true`, it represents the shipping option that the payee or merchant expects
  # to be pre-selected for the payer when they first view the `shipping.options` in the PayPal Checkout experience.
  # As part of the response if a `shipping.option` contains `selected=true`, it represents the shipping option that
  # the payer selected during the course of checkout with PayPal.
  # Only one `shipping.option` can be set to `selected=true`.
  selected: Boolean
}

# The method by which the payer wants to get their items.
# "SHIPPING": "The payer intends to receive the items at a specified address."
# "PICKUP": "The payer intends to pick up the items at a specified address. For example, a store address."
enum billingShippingDetailsOptionType {
  #
  SHIPPING

  #
  PICKUP
}

# The currency and amount for a financial value-related field. For example, balance or payment due.
type billingMoney {
  # The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency.
  currencyCode: billingCurrencyCode!

  # The value, which might be:<ul><li>An integer for currencies like `JPY` that
  # are not typically fractional.</li><li>A decimal fraction for currencies like
  # `TND` that are subdivided into thousandths.</li></ul>For the required number
  # of decimal places for a currency code, see [Currency codes - ISO
  # 4217](https://www.iso.org/iso-4217-currency-codes.html).
  value: String!
}

# The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency.
# minLength: 3
# maxLength: 3
scalar billingCurrencyCode

# The portable international postal address.
# Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata),
# and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
type billingAddressPortable {
  # The first line of the address. For example, number, street, and so on. For
  # example, `173 Drury Lane`. Required for data entry and compliance and risk
  # checks. Must contain the full address.
  addressLine1: String

  # Optional. The second line of the address. For example, suite, apartment number, and so on.
  addressLine2: String

  # Optional. The third line of the address, if needed. Examples include street
  # complement for Brazil, direction text such as `next to Walmart`, or landmark
  # in Indian address.
  addressLine3: String

  # The neighborhood, ward, or district. Smaller than `admin_area_level_3` or
  # `sub_locality`. Value is:<ul><li>The postal sorting code for
  # Guernsey and many French territories, such as French Guiana.</li><li>The
  # fine-grained administrative levels in China.</li></ul>
  adminArea4: String

  # A sub-locality, suburb, neighborhood, or district. Smaller than
  # `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or
  # neighborhood.</li><li>India. Sub-locality or district. Street name information
  # is not always available but a sub-locality or district can be a very small
  # area.</li></ul>
  adminArea3: String

  # A city, town, or village. Smaller than `admin_area_level_1`.
  adminArea2: String

  # The highest level sub-division in a country, which is usually a province,
  # state, or ISO-3166-2 subdivision. Format for postal delivery. For example,
  # `CA` and not `California`. Value, by country, is:<ul><li>UK. A
  # county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A
  # prefecture.</li><li>Switzerland. A kanton.</li></ul>
  adminArea1: String

  # The postal code, which is the zip code or equivalent. Typically required for
  # countries with a postal code or an equivalent. See [postal
  # code](https://en.wikipedia.org/wiki/Postal_code).
  postalCode: String

  # The [two-character ISO 3166-1
  # code](/docs/integration/direct/rest/country-codes/) that identifies the
  # country or region.<blockquote><strong>Note:</strong> The country code for
  # Great Britain is <code>GB</code> and not <code>UK</code> as used in the
  # top-level domain names for that country. Use the `C2` country code for China
  # worldwide for comparable uncontrolled price (CUP) method, bank card, and
  # cross-border transactions.</blockquote>
  countryCode: billingCountryCode!

  # The non-portable additional address details that are sometimes needed for
  # compliance, risk, or other scenarios where fine-grain address information
  # might be needed. Not portable with common third party and opensource.
  # Redundant with core fields. For example, `address_portable.address_line_1` is
  # usually a combination of `address_details.street_number` and `street_name` and `street_type`.
  addressDetails: billingAddressDetails
}

# The [two-character ISO 3166-1 code](/docs/integration/direct/rest/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
scalar billingCountryCode

# The non-portable additional address details that are sometimes needed for
# compliance, risk, or other scenarios where fine-grain address information might
# be needed. Not portable with common third party and opensource. Redundant with
# core fields. For example, `address_portable.address_line_1` is usually a
# combination of `address_details.street_number` and `street_name` and `street_type`.
type billingAddressDetails {
  # The street number.
  streetNumber: String

  # The street name. Just `Drury` in `Drury Lane`.
  streetName: String

  # The street type of the address. For example, `Street`, `Lane`, `Boulevard`, `Court`, and so on.
  streetType: String

  # The delivery service. Post office box, bag number, or post office name.
  deliveryService: String

  #  A named locations that represents the premise. Usually a building name or
  #  number or collection of buildings with a common name or number. For example,
  # <code>Craven House</code>.
  buildingName: String

  # The first-order entity below a named building or location that represents the
  # sub-premise. Usually a single building within a collection of buildings with a
  # common name. Can be a flat, storey, floor, room, or apartment.
  subBuilding: String
}

# Payee defined Fields to be associated to an agreement
type billingPayeeDefinedFields {
  # The custom attribute key
  # Min Length: 1
  # Max Length: 30
  key: billingPayeeDefinedFieldKey

  # The value for the custom attribute
  value: String
}

# The custom attribute key
# "CUSTOM": "Merchant side custom identifier for the agreement"
# "CUSTOMER_ID": "Merchant side identifier of the customer"
enum billingPayeeDefinedFieldKey {
  #
  CUSTOM

  #
  CUSTOMER_ID
}

# Payment preference for billing agreement
# "INSTANT": "Only Instant payments are allowed on this agreement"
# "ANY": "Pending & Instant both payments are allowed on this agreement"
enum billingBillingAgreementPaymentPreference {
  #
  INSTANT

  #
  ANY
}

# User defined Fields to be associated to an agreement
type billingPayer {
  # The name of the consumer.
  name: billingName!

  # The internationalized email address.
  emailAddress: billingEmailAddress

  # The PayPal payer ID, which is a masked version of the PayPal account number intended for use with third parties.
  # The account number is reversibly encrypted and a proprietary variant of Base32 is used to encode the result.
  payerId: billingPayerId

  # The phone information.
  phone: String

  # The tax ID of the customer. The customer is also known as the payer. Both `tax_id` and `tax_id_type` are required.
  taxInfo: billingTaxInfo

  # The portable international postal address.
  address: billingAddressPortable
}

# The name of the party.
type billingName {
  # The prefix, or title, to the party name.
  prefix: String

  # The party's given, or first, name. Required if the party is a person.
  givenName: String

  # The party's surname or family name. Also known as the last name. Required if
  # the party is a person. Use also to store multiple surnames including the
  # matronymic, or mother's, surname.
  surname: String

  # The party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name.
  middleName: String

  # The suffix for the party's name.
  suffix: String

  # The party's alternate name. Can be a business name, nickname, or any other
  # name that cannot be split into first, last name. Required for a business party name.
  alternateFullName: String
}

# The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign.
# However, the generally accepted maximum length for an email address is 254 characters.
# The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
#
# minLength: 3
# maxLength: 254
# pattern: ^.+@[^\"\\-].+$
scalar billingEmailAddress

# The PayPal payer ID, which is a masked version of the PayPal account number intended for use with third parties.
# The account number is reversibly encrypted and a proprietary variant of Base32 is used to encode the result.
#
# minLength: 13
# maxLength: 13
# pattern: ^[2-9A-HJ-NP-Z]{13}$
scalar billingPayerId

# The tax ID of the customer. The customer is also known as the payer. Both taxId` and taxIdType are required.
type billingTaxInfo {
  # The customer's tax ID. Supported for the PayPal payment method only.
  # Typically, the tax ID is 11 characters long for individuals and 14 characters long for businesses.
  taxId: String!

  # The customer's tax ID type. Supported for the PayPal payment method only.
  taxIdType: billingTaxIdType!
}

# The customer's tax ID type. Supported for the PayPal payment method only.
#  "BR_CPF": "The individual tax ID type."
#  "BR_CNPJ": "The business tax ID type."
enum billingTaxIdType {
  #
  BR_CPF

  #
  BR_CNPJ
}

# The merchant who receives the funds and fulfills the order. The merchant is also known as the payee.
type billingPayee {
  # The internationalized email address.
  businessEmail: billingEmailAddress

  # The business website.
  businessSite: billingGenericURL

  # The PayPal payer ID, which is a masked version of the PayPal account number intended for use with third parties.
  # The account number is reversibly encrypted and a proprietary variant of Base32 is used to encode the result.
  merchantId: String

  # The name of the merchant. Appears to the customer in checkout, payment
  # transactions, email receipts, and transaction history.
  brandName: String

  # Business phone number
  businessPhone: billingPhone
}

# The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
type billingPhone {
  # The country calling code (CC), in its canonical international [E.164 numbering
  # plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of
  # the CC and the national number must not be greater than 15 digits. The
  # national number consists of a national destination code (NDC) and subscriber number (SN).
  countryCode: String

  # The national number, in its canonical international [E.164 numbering plan
  # format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the
  # country calling code (CC) and the national number must not be greater than 15
  # digits. The national number consists of a national destination code (NDC) and
  # subscriber number (SN).
  nationalNumber: String

  # The extension number.
  extensionNumber: String
}

# Details of a product
type billingProduct {
  # The ID of the product.
  # Min Length: 6
  # Max Length: 50
  id: String!

  # The product name.
  # Min Length: 1
  # Max Length: 127
  name: String!

  # The product description.
  # Min Length: 1
  # Max Length: 256
  description: String

  # The product type. Indicates whether the product is physical or digital goods, or a service.
  type: billingProductType

  #
  plans: [billingPlan]

  # The product category.
  category: billingProductCategory

  # The image URL for the product.
  imageUrl: billingGenericURL

  # The home page URL for the product.
  homeUrl: billingGenericURL

  # The date and time, in [Internet date and time format]
  createTime: billingDateTime

  # The date and time, in [Internet date and time format](
  updateTime: billingDateTime

  # The Product attributes associated to this Agreement. This field is Internal and its for v2 RT billingAgreement
  attributes: billingProductAttributes
}

# The product type. Indicates whether the product is physical or digital goods, or a service.
#  "PHYSICAL": "Physical goods"
#  "DIGITAL": "Digital goods"
#  "SERVICE": "Product representing a service. Example: Tech Support"
enum billingProductType {
  #
  PHYSICAL

  #
  DIGITAL

  #
  SERVICE
}

# Plan defines pricing and billing cycle details for agreements
type billingPlan {
  # The unique PayPal-generated ID for the plan.
  id: String

  # The plan name.
  name: String

  # Indicates if this is the selected plan
  selected: Boolean

  # State of plan
  state: billingPlanState

  # Description of plan
  description: String

  # Plan usage type, which indicates the billing pattern.
  usageType: billingPlanUsageType

  # Billing cycles in a plan
  billingCycles: [billingPlanBillingCycle]

  # The payment preferences for a agreement.
  paymentPreferences: billingPlanPaymentPreferences

  # The tax details.
  taxes: billingTaxes

  # Indicates whether you can subscribe to this plan by providing a quantity for the goods or service.
  quantitySupported: Boolean

  # The date and time when plan was created. Internet date and time format.
  # Seconds are required while fractional seconds are optional.
  createTime: billingDateTime

  # The date and time when plan was updated. Internet date and time format.
  # Seconds are required while fractional seconds are optional.
  updateTime: billingDateTime
}

# This enum indicates the initial state of the plan. Allowed input values are CREATED and ACTIVE.
# "CREATED": "The plan was created. You cannot create subscriptions for a plan in this state."
# "INACTIVE": "The plan is inactive."
# "ACTIVE": "The plan is active. You can only create subscriptions for a plan in this state."
enum billingPlanState {
  #
  CREATED

  #
  INACTIVE

  #
  ACTIVE
}

# The plan type, which indicates the billing pattern.
#  "LICENSED": "A licensed plan. Has a fixed billing amount."
#  "METERED": "A metered plan. Billed based on service consumption."
enum billingPlanUsageType {
  #
  LICENSED

  #
  METERED
}

# The billing cycle details.
type billingPlanBillingCycle {
  # The status of current cycle
  status: billingPlanBillingCycleStatus

  # The pricing scheme details.
  pricingScheme: billingPricingScheme

  # The frequency of the billing cycle.
  frequency: billingPlanBillingCycleFrequency

  # The tenure type of the billing cycle.
  tenureType: billingTenureType

  # The order in which this cycle is to run among other billing cycles.
  # For example, a trial billing cycle has a `sequence` of `1` while a regular billing cycle has a `sequence` of `2`,
  # so that trial cycle runs before the regular cycle.
  sequence: Int

  # The number of billing cycles that have completed.
  # Minimum: 0
  # Maximum: 9999
  cyclesCompleted: Int

  # The number of billing cycles that remain.
  # Minimum: 0
  # Maximum: 9999
  cyclesRemaining: Int

  # The number of times this billing cycle runs.
  # Minimum: 1
  # Maximum: 999
  totalCycles: Int
}

# This enum indicates what is the current status of billing plan cycle
# "ACTIVE": "The plan cycle is active"
# "PENDING": "The plan cycle hasn't yet started"
# "COMPLETED": "The plan cycle is completed"
enum billingPlanBillingCycleStatus {
  #
  ACTIVE

  #
  PENDING

  #
  COMPLETED
}

# The billing cycle details.
type billingPricingScheme {
  # The version of the pricing scheme.
  version: Int

  # The status of the pricing scheme.
  state: billingPricingSchemeState

  # The currency and amount for a financial transaction, such as a balance or payment due.
  fixedPrice: billingMoney

  # The pricing model for tiered plan. The `tiers` parameter is required.
  tierMode: billingPricingSchemeTierMode

  # An array of pricing tiers which are used for billing volume/graduated plans. tier_mode field has to be specified.
  tiers: [billingPricingSchemeTier]

  # The roll-out strategy for a pricing scheme update.
  # After the pricing update, all new agreements are based on this pricing scheme and
  # the values in this object determine the behavior for the existing agreements.
  rollOutStrategy: billingPricingSchemeRollOutStrategy

  # The date and time, in seconds are required while fractional seconds are optional.
  createTime: billingDateTime

  # The date and time, in seconds are required while fractional seconds are optional.
  updateTime: billingDateTime
}

# The plan type, which indicates the billing pattern.
# "IN_PROGRESS": "The pricing scheme change is in progress."
# "ACTIVE": "The pricing scheme change is active."
# "INACTIVE": "The pricing scheme is inactive."
enum billingPricingSchemeState {
  #
  IN_PROGRESS

  #
  ACTIVE

  #
  INACTIVE
}

# The pricing model for tiered plan. The `tiers` parameter is required.
# "VOLUME": "A volume-tiered model."
# "GRADUATED": "A graduated-tiered model."
enum billingPricingSchemeTierMode {
  #
  VOLUME

  #
  GRADUATED
}

# The pricing tier details.
type billingPricingSchemeTier {
  # The starting quantity for the tier.
  startingQuantity: String

  # The status of the pricing scheme.
  endingQuantity: String

  # The currency and amount for a financial transaction, such as a balance or payment due.
  amount: billingMoney
}

# The roll-out strategy for a pricing scheme update.
# After the pricing update, all new agreements are based on this pricing scheme and the values in this
# object determine the behavior for the existing agreements.
type billingPricingSchemeRollOutStrategy {
  # The date and time, in seconds are required while fractional seconds are optional
  effectiveTime: String

  # The date and time, in seconds are required while fractional seconds are optional
  processChangeFrom: String
}

# The billing cycle details.
type billingPlanBillingCycleFrequency {
  # The interval at which the agreement is charged or billed.
  intervalUnit: billingFrequencyIntervalUnit

  # he number of intervals after which a subscriber is billed.
  # For example, if the interval_unit is DAY with an interval_count of 2, the agreement is billed once every two days.
  # Minimum: 1
  # Maximum Days: 365
  # Maximum Week: 52
  # Maximum Month: 12
  # Maximum Year: 1
  intervalCount: Int
}

# The interval at which the subscription is charged or billed.
# "DAY": "A daily billing cycle."
# "WEEK": "A weekly billing cycle."
# "SEMI_MONTH": "A monthly billing cycle."
# "MONTH": "A monthly billing cycle."
# "YEAR": "A yearly billing cycle."
enum billingFrequencyIntervalUnit {
  #
  DAY

  #
  WEEK

  #
  SEMI_MONTH

  #
  MONTH

  #
  YEAR
}

# The tenure type of the billing cycle.
# "REGULAR": "A regular billing cycle."
# "TRIAL": "A trial billing cycle."
enum billingTenureType {
  #
  REGULAR

  #
  TRIAL
}

# The payment preferences for an agreement.
type billingPlanPaymentPreferences {
  # A pre- or post-paid service.
  serviceType: billingServiceType

  # Indicates whether to automatically bill the outstanding amount in the next billing cycle.
  autoBillOutstanding: Boolean

  # The currency and amount for a financial transaction, such as a balance or payment due.
  setupFee: billingMoney

  # The action to take on the subscription if the initial payment for the setup fails.
  setupFeeFailureAction: billingSetupFeeFailureAction

  # The maximum number of payment failures before an agreement is suspended.
  # For example, if `payment_failure_threshold` is `2`, the agreement
  # automatically updates to the `SUSPEND` state if two consecutive payments fail.
  # Minimum: 0
  # Maximum: 999
  paymentFailureThreshold: Int
}

# The type of service BA will be used for
# "PREPAID": "The billing agreement will be used for prepaid business"
# "POSTPAID": "The billing agreement will be used for postpaid business"
# "UNKNOWN": "When we don't know the business type"
enum billingServiceType {
  #
  PREPAID

  #
  POSTPAID

  #
  UNKNOWN
}

# The action to take on the subscription if the initial payment for the setup fails.
# "CONTINUE": "Continues the subscription if the initial payment for the setup fails."
# "CANCEL": "Cancels the subscription if the initial payment for the setup fails."
enum billingSetupFeeFailureAction {
  #
  CONTINUE

  #
  CANCEL
}

# The tax details.
type billingTaxes {
  # The percentage, as a fixed-point, signed decimal number. For example, define a 19.99% interest rate as 19.99
  percentage: String

  # Indicates whether the tax was already included in the billing amount.
  inclusive: Boolean
}

# The product category
#  "AC_REFRIGERATION_REPAIR": "A/C, Refrigeration Repair"
#  "ACADEMIC_SOFTWARE": "Academic Software"
#  "ACCESSORIES": "Accessories"
#  "ACCOUNTING": "Accounting"
#  "ADULT": "Adult"
#  "ADVERTISING": "Advertising"
#  "AFFILIATED_AUTO_RENTAL": "Affiliated Auto Rental"
#  "AGENCIES": "Agencies"
#  "AGGREGATORS": "Aggregators"
#  "AGRICULTURAL_COOPERATIVE_FOR_MAIL_ORDER": "Agricultural Cooperative for Mail Order"
#  "AIR_CARRIERS_AIRLINES": "Air Carriers, Airlines"
#  "AIRLINES": "Airlines"
#  "AIRPORTS_FLYING_FIELDS": "Airports, Flying Fields"
#  "ALCOHOLIC_BEVERAGES": "Alcoholic Beverages"
#  "AMUSEMENT_PARKS_CARNIVALS": "Amusement Parks/Carnivals"
#  "ANIMATION": "Animation"
#  "ANTIQUES": "Antiques"
#  "APPLIANCES": "Appliances"
#  "AQUARIAMS_SEAQUARIUMS_DOLPHINARIUMS": "Aquariams Seaquariums Dolphinariums"
#  "ARCHITECTURAL_ENGINEERING_AND_SURVEYING_SERVICES": "Architectural,Engineering,And Surveying Services"
#  "ART_AND_CRAFT_SUPPLIES": "Art & Craft Supplies"
#  "ART_DEALERS_AND_GALLERIES": "Art dealers and galleries"
#  "ARTIFACTS_GRAVE_RELATED_AND_NATIVE_AMERICAN_CRAFTS": "Artifacts, Grave related, and Native American Crafts"
#  "ARTS_AND_CRAFTS": "Arts and crafts"
#  "ARTS_CRAFTS_AND_COLLECTIBLES": "Arts, crafts, and collectibles"
#  "AUDIO_BOOKS": "Audio books"
#  "AUTO_ASSOCIATIONS_CLUBS": "Auto Associations/Clubs"
#  "AUTO_DEALER_USED_ONLY": "Auto dealer - used only"
#  "AUTO_RENTALS": "Auto Rentals"
#  "AUTO_SERVICE": "Auto service"
#  "AUTOMATED_FUEL_DISPENSERS": "Automated Fuel Dispensers"
#  "AUTOMOBILE_ASSOCIATIONS": "Automobile Associations"
#  "AUTOMOTIVE": "Automotive"
#  "AUTOMOTIVE_REPAIR_SHOPS_NON_DEALER": "Automotive Repair Shops - Non-Dealer"
#  "AUTOMOTIVE_TOP_AND_BODY_SHOPS": "Automotive Top And Body Shops"
#  "AVIATION": "Aviation"
#  "BABIES_CLOTHING_AND_SUPPLIES": "Babies Clothing & Supplies"
#  "BABY": "Baby"
#  "BANDS_ORCHESTRAS_ENTERTAINERS": "Bands,Orchestras,Entertainers"
#  "BARBIES": "Barbies"
#  "BATH_AND_BODY": "Bath and body"
#  "BATTERIES": "Batteries"
#  "BEAN_BABIES": "Bean Babies"
#  "BEAUTY": "Beauty"
#  "BEAUTY_AND_FRAGRANCES": "Beauty and fragrances"
#  "BED_AND_BATH": "Bed & Bath"
#  "BICYCLE_SHOPS_SALES_AND_SERVICE": "Bicycle Shops-Sales And Service"
#  "BICYCLES_AND_ACCESSORIES": "Bicycles & Accessories"
#  "BILLIARD_POOL_ESTABLISHMENTS": "Billiard/Pool Establishments"
#  "BOAT_DEALERS": "Boat Dealers"
#  "BOAT_RENTALS_AND_LEASING": "Boat Rentals And Leasing"
#  "BOATING_SAILING_AND_ACCESSORIES": "Boating, sailing and accessories"
#  "BOOKS": "Books"
#  "BOOKS_AND_MAGAZINES": "Books and magazines"
#  "BOOKS_MANUSCRIPTS": "Books, Manuscripts"
#  "BOOKS_PERIODICALS_AND_NEWSPAPERS": "Books, Periodicals And Newspapers"
#  "BOWLING_ALLEYS": "Bowling Alleys"
#  "BULLETIN_BOARD": "Bulletin board"
#  "BUS_LINE": "Bus line"
#  "BUS_LINES_CHARTERS_TOUR_BUSES": "Bus Lines,Charters,Tour Buses"
#  "BUSINESS": "Business"
#  "BUSINESS_AND_SECRETARIAL_SCHOOLS": "Business and secretarial schools"
#  "BUYING_AND_SHOPPING_SERVICES_AND_CLUBS": "Buying And Shopping Services And Clubs"
#  "CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO_SERVICES":
# "Cable,Satellite,And Other Pay Television And Radio Services"
#  "CABLE_SATELLITE_AND_OTHER_PAY_TV_AND_RADIO": "Cable, satellite, and other pay TV and radio"
#  "CAMERA_AND_PHOTOGRAPHIC_SUPPLIES": "Camera and photographic supplies"
#  "CAMERAS": "Cameras"
#  "CAMERAS_AND_PHOTOGRAPHY": "Cameras & Photography"
#  "CAMPER_RECREATIONAL_AND_UTILITY_TRAILER_DEALERS": "Camper,Recreational And Utility Trailer Dealers"
#  "CAMPING_AND_OUTDOORS": "Camping and outdoors"
#  "CAMPING_AND_SURVIVAL": "Camping & Survival"
#  "CAR_AND_TRUCK_DEALERS": "Car And Truck Dealers"
#  "CAR_AND_TRUCK_DEALERS_USED_ONLY": "Car And Truck Dealers - Used Only"
#  "CAR_AUDIO_AND_ELECTRONICS": "Car Audio & Electronics"
#  "CAR_RENTAL_AGENCY": "Car rental agency"
#  "CATALOG_MERCHANT": "Catalog Merchant"
#  "CATALOG_RETAIL_MERCHANT": "Catalog/Retail Merchant"
#  "CATERING_SERVICES": "Catering services"
#  "CHARITY": "Charity"
#  "CHECK_CASHIER": "Check Cashier"
#  "CHILD_CARE_SERVICES": "Child Care Services"
#  "CHILDREN_BOOKS": "Children Books"
#  "CHIROPODISTS_PODIATRISTS": "Chiropodists/Podiatrists"
#  "CHIROPRACTORS": "Chiropractors"
#  "CIGAR_STORES_AND_STANDS": "Cigar Stores And Stands"
#  "CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS": "Civic, Social, Fraternal Associations"
#  "CIVIL_SOCIAL_FRAT_ASSOCIATIONS": "Civil/Social/Frat Associations"
#  "CLOTHING": "Clothing"
#  "CLOTHING_ACCESSORIES_AND_SHOES": "Clothing, accessories, and shoes"
#  "CLOTHING_RENTAL": "Clothing Rental"
#  "COFFEE_AND_TEA": "Coffee and tea"
#  "COIN_OPERATED_BANKS_AND_CASINOS": "Coin Operated Banks & Casinos"
#  "COLLECTIBLES": "Collectibles"
#  "COLLECTION_AGENCY": "Collection agency"
#  "COLLEGES_AND_UNIVERSITIES": "Colleges and universities"
#  "COMMERCIAL_EQUIPMENT": "Commercial Equipment"
#  "COMMERCIAL_FOOTWEAR": "Commercial Footwear"
#  "COMMERCIAL_PHOTOGRAPHY": "Commercial photography"
#  "COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS": "Commercial photography, art, and graphics"
#  "COMMERCIAL_SPORTS_PROFESSIONA": "Commercial Sports/Professiona"
#  "COMMODITIES_AND_FUTURES_EXCHANGE": "Commodities and futures exchange"
#  "COMPUTER_AND_DATA_PROCESSING_SERVICES": "Computer and data processing services"
#  "COMPUTER_HARDWARE_AND_SOFTWARE": "Computer Hardware & Software"
#  "COMPUTER_MAINTENANCE_REPAIR_AND_SERVICES_NOT_ELSEWHERE_CLAS": "Computer
# Maintenance, Repair And Services Not Elsewhere Clas"
#  "CONSTRUCTION": "Construction"
#  "CONSTRUCTION_MATERIALS_NOT_ELSEWHERE_CLASSIFIED": "Construction Materials Not Elsewhere Classified"
#  "CONSULTING_SERVICES": "Consulting services"
#  "CONSUMER_CREDIT_REPORTING_AGENCIES": "Consumer Credit Reporting Agencies"
#  "CONVALESCENT_HOMES": "Convalescent Homes"
#  "COSMETIC_STORES": "Cosmetic Stores"
#  "COUNSELING_SERVICES_DEBT_MARRIAGE_PERSONAL": "Counseling Services--Debt,Marriage,Personal"
#  "COUNTERFEIT_CURRENCY_AND_STAMPS": "Counterfeit Currency and Stamps"
#  "COUNTERFEIT_ITEMS": "Counterfeit Items"
#  "COUNTRY_CLUBS": "Country Clubs"
#  "COURIER_SERVICES": "Courier services"
#  "COURIER_SERVICES_AIR_AND_GROUND_AND_FREIGHT_FORWARDERS": "Courier Services-Air And Ground,And Freight Forwarders"
#  "COURT_COSTS_ALIMNY_CHILD_SUPT": "Court Costs/Alimny/Child Supt"
#  "COURT_COSTS_INCLUDING_ALIMONY_AND_CHILD_SUPPORT_COURTS_OF_LAW": "Court Costs,
# Including Alimony and Child Support - Courts of Law"
#  "CREDIT_CARDS": "Credit Cards"
#  "CREDIT_UNION": "Credit union"
#  "CULTURE_AND_RELIGION": "Culture & Religion"
#  "DAIRY_PRODUCTS_STORES": "Dairy Products Stores"
#  "DANCE_HALLS_STUDIOS_AND_SCHOOLS": "Dance Halls,Studios,And Schools"
#  "DECORATIVE": "Decorative"
#  "DENTAL": "Dental"
#  "DENTISTS_AND_ORTHODONTISTS": "Dentists And Orthodontists"
#  "DEPARTMENT_STORES": "Department Stores"
#  "DESKTOP_PCS": "Desktop PCs"
#  "DEVICES": "Devices"
#  "DIECAST_TOYS_VEHICLES": "Diecast, Toys Vehicles"
#  "DIGITAL_GAMES": "Digital games"
#  "DIGITAL_MEDIA_BOOKS_MOVIES_MUSIC": "Digital media,books,movies,music"
#  "DIRECT_MARKETING": "Direct Marketing"
#  "DIRECT_MARKETING_CATALOG_MERCHANT": "Direct Marketing - Catalog Merchant"
#  "DIRECT_MARKETING_INBOUND_TELE": "Direct Marketing - Inbound Tele"
#  "DIRECT_MARKETING_OUTBOUND_TELE": "Direct Marketing - Outbound Tele"
#  "DIRECT_MARKETING_SUBSCRIPTION": "Direct Marketing - Subscription"
#  "DISCOUNT_STORES": "Discount Stores"
#  "DOOR_TO_DOOR_SALES": "Door-To-Door Sales"
#  "DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY": "Drapery, window covering, and upholstery"
#  "DRINKING_PLACES": "Drinking Places"
#  "DRUGSTORE": "Drugstore"
#  "DURABLE_GOODS": "Durable goods"
#  "ECOMMERCE_DEVELOPMENT": "eCommerce Development"
#  "ECOMMERCE_SERVICES": "eCommerce Services"
#  "EDUCATIONAL_AND_TEXTBOOKS": "Educational and textbooks"
#  "ELECTRIC_RAZOR_STORES": "Electric Razor Stores"
#  "ELECTRICAL_AND_SMALL_APPLIANCE_REPAIR": "Electrical and small appliance repair"
#  "ELECTRICAL_CONTRACTORS": "Electrical Contractors"
#  "ELECTRICAL_PARTS_AND_EQUIPMENT": "Electrical Parts and Equipment"
#  "ELECTRONIC_CASH": "Electronic Cash"
#  "ELEMENTARY_AND_SECONDARY_SCHOOLS": "Elementary and secondary schools"
#  "EMPLOYMENT": "Employment"
#  "ENTERTAINERS": "Entertainers"
#  "ENTERTAINMENT_AND_MEDIA": "Entertainment and media"
#  "EQUIP_TOOL_FURNITURE_AND_APPLIANCE_RENTAL_AND_LEASING": "Equip, Tool, Furniture, And Appliance Rental And Leasing"
#  "ESCROW": "Escrow"
#  "EVENT_AND_WEDDING_PLANNING": "Event & Wedding Planning"
#  "EXERCISE_AND_FITNESS": "Exercise and fitness"
#  "EXERCISE_EQUIPMENT": "Exercise Equipment"
#  "EXTERMINATING_AND_DISINFECTING_SERVICES": "Exterminating and disinfecting services"
#  "FABRICS_AND_SEWING": "Fabrics & Sewing"
#  "FAMILY_CLOTHING_STORES": "Family Clothing Stores"
#  "FASHION_JEWELRY": "Fashion jewelry"
#  "FAST_FOOD_RESTAURANTS": "Fast Food Restaurants"
#  "FICTION_AND_NONFICTION": "Fiction and nonfiction"
#  "FINANCE_COMPANY": "Finance company"
#  "FINANCIAL_AND_INVESTMENT_ADVICE": "Financial and investment advice"
#  "FINANCIAL_INSTITUTIONS_MERCHANDISE_AND_SERVICES": "Financial Institutions - Merchandise And Services"
#  "FIREARM_ACCESSORIES": "Firearm accessories"
#  "FIREARMS_WEAPONS_AND_KNIVES": "Firearms, Weapons and Knives"
#  "FIREPLACE_AND_FIREPLACE_SCREENS": "Fireplace, and fireplace screens"
#  "FIREWORKS": "Fireworks"
#  "FISHING": "Fishing"
#  "FLORISTS": "Florists"
#  "FLOWERS": "Flowers"
#  "FOOD_DRINK_AND_NUTRITION": "Food, Drink & Nutrition"
#  "FOOD_PRODUCTS": "Food Products"
#  "FOOD_RETAIL_AND_SERVICE": "Food retail and service"
#  "FRAGRANCES_AND_PERFUMES": "Fragrances and perfumes"
#  "FREEZER_AND_LOCKER_MEAT_PROVISIONERS": "Freezer and Locker Meat Provisioners"
#  "FUEL_DEALERS_FUEL_OIL_WOOD_AND_COAL": "Fuel Dealers-Fuel Oil, Wood & Coal"
#  "FUEL_DEALERS_NON_AUTOMOTIVE": "Fuel Dealers - Non Automotive"
#  "FUNERAL_SERVICES_AND_CREMATORIES": "Funeral Services & Crematories"
#  "FURNISHING_AND_DECORATING": "Furnishing & Decorating"
#  "FURNITURE": "Furniture"
#  "FURRIERS_AND_FUR_SHOPS": "Furriers and Fur Shops"
#  "GADGETS_AND_OTHER_ELECTRONICS": "Gadgets & other electronics"
#  "GAMBLING": "Gambling"
#  "GAME_SOFTWARE": "Game Software"
#  "GAMES": "Games"
#  "GARDEN_SUPPLIES": "Garden supplies"
#  "GENERAL": "General"
#  "GENERAL_CONTRACTORS": "General contractors"
#  "GENERAL_GOVERNMENT": "General - Government"
#  "GENERAL_SOFTWARE": "General - Software"
#  "GENERAL_TELECOM": "General - Telecom"
#  "GIFTS_AND_FLOWERS": "Gifts and flowers"
#  "GLASS_PAINT_AND_WALLPAPER_STORES": "Glass,Paint,And Wallpaper Stores"
#  "GLASSWARE_CRYSTAL_STORES": "Glassware, Crystal Stores"
#  "GOVERNMENT": "Government"
#  "GOVERNMENT_IDS_AND_LICENSES": "Government IDs and Licenses"
#  "GOVERNMENT_LICENSED_ON_LINE_CASINOS_ON_LINE_GAMBLING": "Government Licensed On-Line Casinos - On-Line Gambling"
#  "GOVERNMENT_OWNED_LOTTERIES": "Government-Owned Lotteries"
#  "GOVERNMENT_SERVICES": "Government services"
#  "GRAPHIC_AND_COMMERCIAL_DESIGN": "Graphic & Commercial Design"
#  "GREETING_CARDS": "Greeting Cards"
#  "GROCERY_STORES_AND_SUPERMARKETS": "Grocery Stores & Supermarkets"
#  "HARDWARE_AND_TOOLS": "Hardware & Tools"
#  "HARDWARE_EQUIPMENT_AND_SUPPLIES": "Hardware, Equipment, and Supplies"
#  "HAZARDOUS_RESTRICTED_AND_PERISHABLE_ITEMS": "Hazardous, Restricted and Perishable Items"
#  "HEALTH_AND_BEAUTY_SPAS": "Health and beauty spas"
#  "HEALTH_AND_NUTRITION": "Health & Nutrition"
#  "HEALTH_AND_PERSONAL_CARE": "Health and personal care"
#  "HEARING_AIDS_SALES_AND_SUPPLIES": "Hearing Aids Sales and Supplies"
#  "HEATING_PLUMBING_AC": "Heating, Plumbing, AC"
#  "HIGH_RISK_MERCHANT": "High Risk Merchant"
#  "HIRING_SERVICES": "Hiring services"
#  "HOBBIES_TOYS_AND_GAMES": "Hobbies, Toys & Games"
#  "HOME_AND_GARDEN": "Home and garden"
#  "HOME_AUDIO": "Home Audio"
#  "HOME_DECOR": "Home decor"
#  "HOME_ELECTRONICS": "Home Electronics"
#  "HOSPITALS": "Hospitals"
#  "HOTELS_MOTELS_INNS_RESORTS": "Hotels/Motels/Inns/Resorts"
#  "HOUSEWARES": "Housewares"
#  "HUMAN_PARTS_AND_REMAINS": "Human Parts and Remains"
#  "HUMOROUS_GIFTS_AND_NOVELTIES": "Humorous Gifts & Novelties"
#  "HUNTING": "Hunting"
#  "IDS_LICENSES_AND_PASSPORTS": "IDs, licenses, and passports"
#  "ILLEGAL_DRUGS_AND_PARAPHERNALIA": "Illegal Drugs & Paraphernalia"
#  "INDUSTRIAL": "Industrial"
#  "INDUSTRIAL_AND_MANUFACTURING_SUPPLIES": "Industrial and manufacturing supplies"
#  "INSURANCE_AUTO_AND_HOME": "Insurance - auto and home"
#  "INSURANCE_DIRECT": "Insurance - Direct"
#  "INSURANCE_LIFE_AND_ANNUITY": "Insurance - life and annuity"
#  "INSURANCE_SALES_UNDERWRITING": "Insurance Sales/Underwriting"
#  "INSURANCE_UNDERWRITING_PREMIUMS": "Insurance Underwriting, Premiums"
#  "INTERNET_AND_NETWORK_SERVICES": "Internet & Network Services"
#  "INTRA_COMPANY_PURCHASES": "Intra-Company Purchases"
#  "LABORATORIES_DENTAL_MEDICAL": "Laboratories-Dental/Medical"
#  "LANDSCAPING": "Landscaping"
#  "LANDSCAPING_AND_HORTICULTURAL_SERVICES": "Landscaping And Horticultural Services"
#  "LAUNDRY_CLEANING_SERVICES": "Laundry, Cleaning Services"
#  "LEGAL": "Legal"
#  "LEGAL_SERVICES_AND_ATTORNEYS": "Legal services and attorneys"
#  "LOCAL_DELIVERY_SERVICE": "Local delivery service"
#  "LOCKSMITH": "Locksmith"
#  "LODGING_AND_ACCOMMODATIONS": "Lodging and accommodations"
#  "LOTTERY_AND_CONTESTS": "Lottery and contests"
#  "LUGGAGE_AND_LEATHER_GOODS": "Luggage and leather goods"
#  "LUMBER_AND_BUILDING_MATERIALS": "Lumber & Building Materials"
#  "MAGAZINES": "Magazines"
#  "MAINTENANCE_AND_REPAIR_SERVICES": "Maintenance and repair services"
#  "MAKEUP_AND_COSMETICS": "Makeup and cosmetics"
#  "MANUAL_CASH_DISBURSEMENTS": "Manual Cash Disbursements"
#  "MASSAGE_PARLORS": "Massage Parlors"
#  "MEDICAL": "Medical"
#  "MEDICAL_AND_PHARMACEUTICAL": "Medical & Pharmaceutical"
#  "MEDICAL_CARE": "Medical care"
#  "MEDICAL_EQUIPMENT_AND_SUPPLIES": "Medical equipment and supplies"
#  "MEDICAL_SERVICES": "Medical Services"
#  "MEETING_PLANNERS": "Meeting Planners"
#  "MEMBERSHIP_CLUBS_AND_ORGANIZATIONS": "Membership clubs and organizations"
#  "MEMBERSHIP_COUNTRY_CLUBS_GOLF": "Membership/Country Clubs/Golf"
#  "MEMORABILIA": "Memorabilia"
#  "MEN_AND_BOY_CLOTHING_AND_ACCESSORY_STORES": "Men's And Boy's Clothing And Accessory Stores"
#  "MEN_CLOTHING": "Men's Clothing"
#  "MERCHANDISE": "Merchandise"
#  "METAPHYSICAL": "Metaphysical"
#  "MILITARIA": "Militaria"
#  "MILITARY_AND_CIVIL_SERVICE_UNIFORMS": "Military and civil service uniforms"
#  "MISC_AUTOMOTIVE_AIRCRAFT_AND_FARM_EQUIPMENT_DEALERS": "Misc Automotive,Aircraft,And Farm Equipment Dealers"
#  "MISC_GENERAL_MERCHANDISE": "Misc General Merchandise"
#  "MISCELLANEOUS_GENERAL_SERVICES": "Miscellaneous General Services"
#  "MISCELLANEOUS_REPAIR_SHOPS_AND_RELATED_SERVICES": "Miscellaneous Repair Shops And Related Services"
#  "MODEL_KITS": "Model Kits"
#  "MONEY_TRANSFER_MEMBER_FINANCIAL_INSTITUTION": "Money Transfer - Member Financial Institution"
#  "MONEY_TRANSFER_MERCHANT": "Money Transfer--Merchant"
#  "MOTION_PICTURE_THEATERS": "Motion Picture Theaters"
#  "MOTOR_FREIGHT_CARRIERS_AND_TRUCKING": "Motor Freight Carriers & Trucking"
#  "MOTOR_HOME_AND_RECREATIONAL_VEHICLE_RENTAL": "Motor Home And Recreational Vehicle Rental"
#  "MOTOR_HOMES_DEALERS": "Motor Homes Dealers"
#  "MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS": "Motor Vehicle Supplies and New Parts"
#  "MOTORCYCLE_DEALERS": "Motorcycle Dealers"
#  "MOTORCYCLES": "Motorcycles"
#  "MOVIE": "Movie"
#  "MOVIE_TICKETS": "Movie tickets"
#  "MOVING_AND_STORAGE": "Moving and storage"
#  "MULTI_LEVEL_MARKETING": "Multi-level marketing"
#  "MUSIC_CDS_CASSETTES_AND_ALBUMS": "Music - CDs, cassettes and albums"
#  "MUSIC_STORE_INSTRUMENTS_AND_SHEET_MUSIC": "Music store - instruments and sheet music"
#  "NETWORKING": "Networking"
#  "NEW_AGE": "New Age"
#  "NEW_PARTS_AND_SUPPLIES_MOTOR_VEHICLE": "New parts and supplies - motor vehicle"
#  "NEWS_DEALERS_AND_NEWSTANDS": "News Dealers and Newstands"
#  "NON_DURABLE_GOODS": "Non-durable goods"
#  "NON_FICTION": "Non-Fiction"
#  "NON_PROFIT_POLITICAL_AND_RELIGION": "Non-Profit, Political & Religion"
#  "NONPROFIT": "Nonprofit"
#  "NOVELTIES": "Novelties"
#  "OEM_SOFTWARE": "Oem Software"
#  "OFFICE_SUPPLIES_AND_EQUIPMENT": "Office Supplies and Equipment"
#  "ONLINE_DATING": "Online Dating"
#  "ONLINE_GAMING": "Online gaming"
#  "ONLINE_GAMING_CURRENCY": "Online gaming currency"
#  "ONLINE_SERVICES": "online services"
#  "OOUTBOUND_TELEMARKETING_MERCH": "Ooutbound Telemarketing Merch"
#  "OPHTHALMOLOGISTS_OPTOMETRIST": "Ophthalmologists/Optometrist"
#  "OPTICIANS_AND_DISPENSING": "Opticians And Dispensing"
#  "ORTHOPEDIC_GOODS_PROSTHETICS": "Orthopedic Goods/Prosthetics"
#  "OSTEOPATHS": "Osteopaths"
#  "OTHER": "Other"
#  "PACKAGE_TOUR_OPERATORS": "Package Tour Operators"
#  "PAINTBALL": "Paintball"
#  "PAINTS_VARNISHES_AND_SUPPLIES": "Paints, Varnishes, and Supplies"
#  "PARKING_LOTS_AND_GARAGES": "Parking Lots & Garages"
#  "PARTS_AND_ACCESSORIES": "Parts and accessories"
#  "PAWN_SHOPS": "Pawn Shops"
#  "PAYCHECK_LENDER_OR_CASH_ADVANCE": "Paycheck lender or cash advance"
#  "PERIPHERALS": "Peripherals"
#  "PERSONALIZED_GIFTS": "Personalized Gifts"
#  "PET_SHOPS_PET_FOOD_AND_SUPPLIES": "Pet shops, pet food, and supplies"
#  "PETROLEUM_AND_PETROLEUM_PRODUCTS": "Petroleum and Petroleum Products"
#  "PETS_AND_ANIMALS": "Pets and animals"
#  "PHOTOFINISHING_LABORATORIES_PHOTO_DEVELOPING": "Photofinishing Laboratories,Photo Developing"
#  "PHOTOGRAPHIC_STUDIOS_PORTRAITS": "Photographic studios - portraits"
#  "PHOTOGRAPHY": "Photography"
#  "PHYSICAL_GOOD": "Physical Good"
#  "PICTURE_VIDEO_PRODUCTION": "Picture/Video Production"
#  "PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS": "Piece Goods Notions and Other Dry Goods"
#  "PLANTS_AND_SEEDS": "Plants and Seeds"
#  "PLUMBING_AND_HEATING_EQUIPMENTS_AND_SUPPLIES": "Plumbing & Heating Equipments & Supplies"
#  "POLICE_RELATED_ITEMS": "Police-Related Items"
#  "POLITICAL_ORGANIZATIONS": "Politcal Organizations"
#  "POSTAL_SERVICES_GOVERNMENT_ONLY": "Postal Services - Government Only"
#  "POSTERS": "Posters"
#  "PREPAID_AND_STORED_VALUE_CARDS": "Prepaid and stored value cards"
#  "PRESCRIPTION_DRUGS": "Prescription Drugs"
#  "PROMOTIONAL_ITEMS": "Promotional Items"
#  "PUBLIC_WAREHOUSING_AND_STORAGE": "Public Warehousing and Storage"
#  "PUBLISHING_AND_PRINTING": "Publishing and printing"
#  "PUBLISHING_SERVICES": "Publishing Services"
#  "RADAR_DECTORS": "Radar Dectors"
#  "RADIO_TELEVISION_AND_STEREO_REPAIR": "Radio, television, and stereo repair"
#  "REAL_ESTATE": "Real Estate"
#  "REAL_ESTATE_AGENT": "Real estate agent"
#  "REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS": "Real Estate Agents And Managers - Rentals"
#  "RELIGION_AND_SPIRITUALITY_FOR_PROFIT": "Religion and spirituality for profit"
#  "RELIGIOUS": "Religious"
#  "RELIGIOUS_ORGANIZATIONS": "Religious Organizations"
#  "REMITTANCE": "Remittance"
#  "RENTAL_PROPERTY_MANAGEMENT": "Rental property management"
#  "RESIDENTIAL": "Residential"
#  "RETAIL": "Retail"
#  "RETAIL_FINE_JEWELRY_AND_WATCHES": "Retail - fine jewelry and watches"
#  "REUPHOLSTERY_AND_FURNITURE_REPAIR": "Reupholstery and furniture repair"
#  "RINGS": "Rings"
#  "ROOFING_SIDING_SHEET_METAL": "Roofing/Siding, Sheet Metal"
#  "RUGS_AND_CARPETS": "Rugs & Carpets"
#  "SCHOOLS_AND_COLLEGES": "Schools and Colleges"
#  "SCIENCE_FICTION": "Science Fiction"
#  "SCRAPBOOKING": "Scrapbooking"
#  "SCULPTURES": "Sculptures"
#  "SECURITIES_BROKERS_AND_DEALERS": "Securities - Brokers And Dealers"
#  "SECURITY_AND_SURVEILLANCE": "Security and surveillance"
#  "SECURITY_AND_SURVEILLANCE_EQUIPMENT": "Security and surveillance equipment"
#  "SECURITY_BROKERS_AND_DEALERS": "Security brokers and dealers"
#  "SEMINARS": "Seminars"
#  "SERVICE_STATIONS": "Service Stations"
#  "SERVICES": "Services"
#  "SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES": "Sewing,Needlework,Fabric And Piece Goods Stores"
#  "SHIPPING_AND_PACKING": "Shipping & Packaging"
#  "SHOE_REPAIR_HAT_CLEANING": "Shoe Repair/Hat Cleaning"
#  "SHOE_STORES": "Shoe Stores"
#  "SHOES": "Shoes"
#  "SNOWMOBILE_DEALERS": "Snowmobile Dealers"
#  "SOFTWARE": "Software"
#  "SPECIALTY_AND_MISC_FOOD_STORES": "Specialty and misc food stores"
#  "SPECIALTY_CLEANING_POLISHING_AND_SANITATION_PREPARATIONS": "Specialty Cleaning, Polishing And Sanitation Preparations"
#  "SPECIALTY_OR_RARE_PETS": "Specialty or rare pets"
#  "SPORT_GAMES_AND_TOYS": "Sport games and toys"
#  "SPORTING_AND_RECREATIONAL_CAMPS": "Sporting And Recreational Camps"
#  "SPORTING_GOODS": "Sporting Goods"
#  "SPORTS_AND_OUTDOORS": "Sports and outdoors"
#  "SPORTS_AND_RECREATION": "Sports & Recreation"
#  "STAMP_AND_COIN": "Stamp and coin"
#  "STATIONARY_PRINTING_AND_WRITING_PAPER": "Stationary, printing, and writing paper"
#  "STENOGRAPHIC_AND_SECRETARIAL_SUPPORT_SERVICES": "Stenographic and secretarial support services"
#  "STOCKS_BONDS_SECURITIES_AND_RELATED_CERTIFICATES": "Stocks, Bonds, Securities and Related Certificates"
#  "STORED_VALUE_CARDS": "Stored Value Cards"
#  "SUPPLIES": "Supplies"
#  "SUPPLIES_AND_TOYS": "Supplies & Toys"
#  "SURVEILLANCE_EQUIPMENT": "Surveillance Equipment"
#  "SWIMMING_POOLS_AND_SPAS": "Swimming Pools & Spas"
#  "SWIMMING_POOLS_SALES_SUPPLIES_SERVICES": "Swimming Pools-Sales,Supplies,Services"
#  "TAILORS_AND_ALTERATIONS": "Tailors and alterations"
#  "TAX_PAYMENTS": "Tax Payments"
#  "TAX_PAYMENTS_GOVERNMENT_AGENCIES": "Tax Payments - Government Agencies"
#  "TAXICABS_AND_LIMOUSINES": "Taxicabs and limousines"
#  "TELECOMMUNICATION_SERVICES": "Telecommunication Services"
#  "TELEPHONE_CARDS": "Telephone Cards"
#  "TELEPHONE_EQUIPMENT": "Telephone Equipment"
#  "TELEPHONE_SERVICES": "Telephone Services"
#  "THEATER": "Theater"
#  "TIRE_RETREADING_AND_REPAIR": "Tire Retreading and Repair"
#  "TOLL_OR_BRIDGE_FEES": "Toll or Bridge Fees"
#  "TOOLS_AND_EQUIPMENT": "Tools and equipment"
#  "TOURIST_ATTRACTIONS_AND_EXHIBITS": "Tourist Attractions And Exhibits"
#  "TOWING_SERVICE": "Towing service"
#  "TOYS_AND_GAMES": "Toys and games"
#  "TRADE_AND_VOCATIONAL_SCHOOLS": "Trade And Vocational Schools"
#  "TRADEMARK_INFRINGEMENT": "Trademark Infringement"
#  "TRAILER_PARKS_AND_CAMPGROUNDS": "Trailer Parks And Campgrounds"
#  "TRAINING_SERVICES": "Training services"
#  "TRANSPORTATION_SERVICES": "Transportation Services"
#  "TRAVEL": "Travel"
#  "TRUCK_AND_UTILITY_TRAILER_RENTALS": "Truck And Utility Trailer Rentals"
#  "TRUCK_STOP": "Truck Stop"
#  "TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES": "Typesetting, Plate Making, and Related Services"
#  "USED_MERCHANDISE_AND_SECONDHAND_STORES": "Used Merchandise And Secondhand Stores"
#  "USED_PARTS_MOTOR_VEHICLE": "Used parts - motor vehicle"
#  "UTILITIES": "Utilities"
#  "UTILITIES_ELECTRIC_GAS_WATER_SANITARY": "Utilities - Electric,Gas,Water,Sanitary"
#  "VARIETY_STORES": "Variety Stores"
#  "VEHICLE_SALES": "Vehicle sales"
#  "VEHICLE_SERVICE_AND_ACCESSORIES": "Vehicle service and accessories"
#  "VIDEO_EQUIPMENT": "Video Equipment"
#  "VIDEO_GAME_ARCADES_ESTABLISH": "Video Game Arcades/Establish"
#  "VIDEO_GAMES_AND_SYSTEMS": "Video Games & Systems"
#  "VIDEO_TAPE_RENTAL_STORES": "Video Tape Rental Stores"
#  "VINTAGE_AND_COLLECTIBLE_VEHICLES": "Vintage and Collectible Vehicles"
#  "VINTAGE_AND_COLLECTIBLES": "Vintage and collectibles"
#  "VITAMINS_AND_SUPPLEMENTS": "Vitamins & Supplements"
#  "VOCATIONAL_AND_TRADE_SCHOOLS": "Vocational and trade schools"
#  "WATCH_CLOCK_AND_JEWELRY_REPAIR": "Watch, clock, and jewelry repair"
#  "WEB_HOSTING_AND_DESIGN": "Web hosting and design"
#  "WELDING_REPAIR": "Welding Repair"
#  "WHOLESALE_CLUBS": "Wholesale Clubs"
#  "WHOLESALE_FLORIST_SUPPLIERS": "Wholesale Florist Suppliers"
#  "WHOLESALE_PRESCRIPTION_DRUGS": "Wholesale Prescription Drugs"
#  "WILDLIFE_PRODUCTS": "Wildlife Products"
#  "WIRE_TRANSFER": "Wire Transfer"
#  "WIRE_TRANSFER_AND_MONEY_ORDER": "Wire transfer and money order"
#  "WOMEN_ACCESSORY_SPECIALITY": "Women's Accessory/Speciality"
#  "WOMEN_CLOTHING": "Women's clothing"
enum billingProductCategory {
  #
  AC_REFRIGERATION_REPAIR

  #
  ACADEMIC_SOFTWARE

  #
  ACCESSORIES

  #
  ACCOUNTING

  #
  ADULT

  #
  ADVERTISING

  #
  AFFILIATED_AUTO_RENTAL

  #
  AGENCIES

  #
  AGGREGATORS

  #
  AGRICULTURAL_COOPERATIVE_FOR_MAIL_ORDER

  #
  AIR_CARRIERS_AIRLINES

  #
  AIRLINES

  #
  AIRPORTS_FLYING_FIELDS

  #
  ALCOHOLIC_BEVERAGES

  #
  AMUSEMENT_PARKS_CARNIVALS

  #
  ANIMATION

  #
  ANTIQUES

  #
  APPLIANCES

  #
  AQUARIAMS_SEAQUARIUMS_DOLPHINARIUMS

  #
  ARCHITECTURAL_ENGINEERING_AND_SURVEYING_SERVICES

  #
  ART_AND_CRAFT_SUPPLIES

  #
  ART_DEALERS_AND_GALLERIES

  #
  ARTIFACTS_GRAVE_RELATED_AND_NATIVE_AMERICAN_CRAFTS

  #
  ARTS_AND_CRAFTS

  #
  ARTS_CRAFTS_AND_COLLECTIBLES

  #
  AUDIO_BOOKS

  #
  AUTO_ASSOCIATIONS_CLUBS

  #
  AUTO_DEALER_USED_ONLY

  #
  AUTO_RENTALS

  #
  AUTO_SERVICE

  #
  AUTOMATED_FUEL_DISPENSERS

  #
  AUTOMOBILE_ASSOCIATIONS

  #
  AUTOMOTIVE

  #
  AUTOMOTIVE_REPAIR_SHOPS_NON_DEALER

  #
  AUTOMOTIVE_TOP_AND_BODY_SHOPS

  #
  AVIATION

  #
  BABIES_CLOTHING_AND_SUPPLIES

  #
  BABY

  #
  BANDS_ORCHESTRAS_ENTERTAINERS

  #
  BARBIES

  #
  BATH_AND_BODY

  #
  BATTERIES

  #
  BEAN_BABIES

  #
  BEAUTY

  #
  BEAUTY_AND_FRAGRANCES

  #
  BED_AND_BATH

  #
  BICYCLE_SHOPS_SALES_AND_SERVICE

  #
  BICYCLES_AND_ACCESSORIES

  #
  BILLIARD_POOL_ESTABLISHMENTS

  #
  BOAT_DEALERS

  #
  BOAT_RENTALS_AND_LEASING

  #
  BOATING_SAILING_AND_ACCESSORIES

  #
  BOOKS

  #
  BOOKS_AND_MAGAZINES

  #
  BOOKS_MANUSCRIPTS

  #
  BOOKS_PERIODICALS_AND_NEWSPAPERS

  #
  BOWLING_ALLEYS

  #
  BULLETIN_BOARD

  #
  BUS_LINE

  #
  BUS_LINES_CHARTERS_TOUR_BUSES

  #
  BUSINESS

  #
  BUSINESS_AND_SECRETARIAL_SCHOOLS

  #
  BUYING_AND_SHOPPING_SERVICES_AND_CLUBS

  #
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO_SERVICES

  #
  CABLE_SATELLITE_AND_OTHER_PAY_TV_AND_RADIO

  #
  CAMERA_AND_PHOTOGRAPHIC_SUPPLIES

  #
  CAMERAS

  #
  CAMERAS_AND_PHOTOGRAPHY

  #
  CAMPER_RECREATIONAL_AND_UTILITY_TRAILER_DEALERS

  #
  CAMPING_AND_OUTDOORS

  #
  CAMPING_AND_SURVIVAL

  #
  CAR_AND_TRUCK_DEALERS

  #
  CAR_AND_TRUCK_DEALERS_USED_ONLY

  #
  CAR_AUDIO_AND_ELECTRONICS

  #
  CAR_RENTAL_AGENCY

  #
  CATALOG_MERCHANT

  #
  CATALOG_RETAIL_MERCHANT

  #
  CATERING_SERVICES

  #
  CHARITY

  #
  CHECK_CASHIER

  #
  CHILD_CARE_SERVICES

  #
  CHILDREN_BOOKS

  #
  CHIROPODISTS_PODIATRISTS

  #
  CHIROPRACTORS

  #
  CIGAR_STORES_AND_STANDS

  #
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS

  #
  CIVIL_SOCIAL_FRAT_ASSOCIATIONS

  #
  CLOTHING

  #
  CLOTHING_ACCESSORIES_AND_SHOES

  #
  CLOTHING_RENTAL

  #
  COFFEE_AND_TEA

  #
  COIN_OPERATED_BANKS_AND_CASINOS

  #
  COLLECTIBLES

  #
  COLLECTION_AGENCY

  #
  COLLEGES_AND_UNIVERSITIES

  #
  COMMERCIAL_EQUIPMENT

  #
  COMMERCIAL_FOOTWEAR

  #
  COMMERCIAL_PHOTOGRAPHY

  #
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS

  #
  COMMERCIAL_SPORTS_PROFESSIONA

  #
  COMMODITIES_AND_FUTURES_EXCHANGE

  #
  COMPUTER_AND_DATA_PROCESSING_SERVICES

  #
  COMPUTER_HARDWARE_AND_SOFTWARE

  #
  COMPUTER_MAINTENANCE_REPAIR_AND_SERVICES_NOT_ELSEWHERE_CLAS

  #
  CONSTRUCTION

  #
  CONSTRUCTION_MATERIALS_NOT_ELSEWHERE_CLASSIFIED

  #
  CONSULTING_SERVICES

  #
  CONSUMER_CREDIT_REPORTING_AGENCIES

  #
  CONVALESCENT_HOMES

  #
  COSMETIC_STORES

  #
  COUNSELING_SERVICES_DEBT_MARRIAGE_PERSONAL

  #
  COUNTERFEIT_CURRENCY_AND_STAMPS

  #
  COUNTERFEIT_ITEMS

  #
  COUNTRY_CLUBS

  #
  COURIER_SERVICES

  #
  COURIER_SERVICES_AIR_AND_GROUND_AND_FREIGHT_FORWARDERS

  #
  COURT_COSTS_ALIMNY_CHILD_SUPT

  #
  COURT_COSTS_INCLUDING_ALIMONY_AND_CHILD_SUPPORT_COURTS_OF_LAW

  #
  CREDIT_CARDS

  #
  CREDIT_UNION

  #
  CULTURE_AND_RELIGION

  #
  DAIRY_PRODUCTS_STORES

  #
  DANCE_HALLS_STUDIOS_AND_SCHOOLS

  #
  DECORATIVE

  #
  DENTAL

  #
  DENTISTS_AND_ORTHODONTISTS

  #
  DEPARTMENT_STORES

  #
  DESKTOP_PCS

  #
  DEVICES

  #
  DIECAST_TOYS_VEHICLES

  #
  DIGITAL_GAMES

  #
  DIGITAL_MEDIA_BOOKS_MOVIES_MUSIC

  #
  DIRECT_MARKETING

  #
  DIRECT_MARKETING_CATALOG_MERCHANT

  #
  DIRECT_MARKETING_INBOUND_TELE

  #
  DIRECT_MARKETING_OUTBOUND_TELE

  #
  DIRECT_MARKETING_SUBSCRIPTION

  #
  DISCOUNT_STORES

  #
  DOOR_TO_DOOR_SALES

  #
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY

  #
  DRINKING_PLACES

  #
  DRUGSTORE

  #
  DURABLE_GOODS

  #
  ECOMMERCE_DEVELOPMENT

  #
  ECOMMERCE_SERVICES

  #
  EDUCATIONAL_AND_TEXTBOOKS

  #
  ELECTRIC_RAZOR_STORES

  #
  ELECTRICAL_AND_SMALL_APPLIANCE_REPAIR

  #
  ELECTRICAL_CONTRACTORS

  #
  ELECTRICAL_PARTS_AND_EQUIPMENT

  #
  ELECTRONIC_CASH

  #
  ELEMENTARY_AND_SECONDARY_SCHOOLS

  #
  EMPLOYMENT

  #
  ENTERTAINERS

  #
  ENTERTAINMENT_AND_MEDIA

  #
  EQUIP_TOOL_FURNITURE_AND_APPLIANCE_RENTAL_AND_LEASING

  #
  ESCROW

  #
  EVENT_AND_WEDDING_PLANNING

  #
  EXERCISE_AND_FITNESS

  #
  EXERCISE_EQUIPMENT

  #
  EXTERMINATING_AND_DISINFECTING_SERVICES

  #
  FABRICS_AND_SEWING

  #
  FAMILY_CLOTHING_STORES

  #
  FASHION_JEWELRY

  #
  FAST_FOOD_RESTAURANTS

  #
  FICTION_AND_NONFICTION

  #
  FINANCE_COMPANY

  #
  FINANCIAL_AND_INVESTMENT_ADVICE

  #
  FINANCIAL_INSTITUTIONS_MERCHANDISE_AND_SERVICES

  #
  FIREARM_ACCESSORIES

  #
  FIREARMS_WEAPONS_AND_KNIVES

  #
  FIREPLACE_AND_FIREPLACE_SCREENS

  #
  FIREWORKS

  #
  FISHING

  #
  FLORISTS

  #
  FLOWERS

  #
  FOOD_DRINK_AND_NUTRITION

  #
  FOOD_PRODUCTS

  #
  FOOD_RETAIL_AND_SERVICE

  #
  FRAGRANCES_AND_PERFUMES

  #
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS

  #
  FUEL_DEALERS_FUEL_OIL_WOOD_AND_COAL

  #
  FUEL_DEALERS_NON_AUTOMOTIVE

  #
  FUNERAL_SERVICES_AND_CREMATORIES

  #
  FURNISHING_AND_DECORATING

  #
  FURNITURE

  #
  FURRIERS_AND_FUR_SHOPS

  #
  GADGETS_AND_OTHER_ELECTRONICS

  #
  GAMBLING

  #
  GAME_SOFTWARE

  #
  GAMES

  #
  GARDEN_SUPPLIES

  #
  GENERAL

  #
  GENERAL_CONTRACTORS

  #
  GENERAL_GOVERNMENT

  #
  GENERAL_SOFTWARE

  #
  GENERAL_TELECOM

  #
  GIFTS_AND_FLOWERS

  #
  GLASS_PAINT_AND_WALLPAPER_STORES

  #
  GLASSWARE_CRYSTAL_STORES

  #
  GOVERNMENT

  #
  GOVERNMENT_IDS_AND_LICENSES

  #
  GOVERNMENT_LICENSED_ON_LINE_CASINOS_ON_LINE_GAMBLING

  #
  GOVERNMENT_OWNED_LOTTERIES

  #
  GOVERNMENT_SERVICES

  #
  GRAPHIC_AND_COMMERCIAL_DESIGN

  #
  GREETING_CARDS

  #
  GROCERY_STORES_AND_SUPERMARKETS

  #
  HARDWARE_AND_TOOLS

  #
  HARDWARE_EQUIPMENT_AND_SUPPLIES

  #
  HAZARDOUS_RESTRICTED_AND_PERISHABLE_ITEMS

  #
  HEALTH_AND_BEAUTY_SPAS

  #
  HEALTH_AND_NUTRITION

  #
  HEALTH_AND_PERSONAL_CARE

  #
  HEARING_AIDS_SALES_AND_SUPPLIES

  #
  HEATING_PLUMBING_AC

  #
  HIGH_RISK_MERCHANT

  #
  HIRING_SERVICES

  #
  HOBBIES_TOYS_AND_GAMES

  #
  HOME_AND_GARDEN

  #
  HOME_AUDIO

  #
  HOME_DECOR

  #
  HOME_ELECTRONICS

  #
  HOSPITALS

  #
  HOTELS_MOTELS_INNS_RESORTS

  #
  HOUSEWARES

  #
  HUMAN_PARTS_AND_REMAINS

  #
  HUMOROUS_GIFTS_AND_NOVELTIES

  #
  HUNTING

  #
  IDS_LICENSES_AND_PASSPORTS

  #
  ILLEGAL_DRUGS_AND_PARAPHERNALIA

  #
  INDUSTRIAL

  #
  INDUSTRIAL_AND_MANUFACTURING_SUPPLIES

  #
  INSURANCE_AUTO_AND_HOME

  #
  INSURANCE_DIRECT

  #
  INSURANCE_LIFE_AND_ANNUITY

  #
  INSURANCE_SALES_UNDERWRITING

  #
  INSURANCE_UNDERWRITING_PREMIUMS

  #
  INTERNET_AND_NETWORK_SERVICES

  #
  INTRA_COMPANY_PURCHASES

  #
  LABORATORIES_DENTAL_MEDICAL

  #
  LANDSCAPING

  #
  LANDSCAPING_AND_HORTICULTURAL_SERVICES

  #
  LAUNDRY_CLEANING_SERVICES

  #
  LEGAL

  #
  LEGAL_SERVICES_AND_ATTORNEYS

  #
  LOCAL_DELIVERY_SERVICE

  #
  LOCKSMITH

  #
  LODGING_AND_ACCOMMODATIONS

  #
  LOTTERY_AND_CONTESTS

  #
  LUGGAGE_AND_LEATHER_GOODS

  #
  LUMBER_AND_BUILDING_MATERIALS

  #
  MAGAZINES

  #
  MAINTENANCE_AND_REPAIR_SERVICES

  #
  MAKEUP_AND_COSMETICS

  #
  MANUAL_CASH_DISBURSEMENTS

  #
  MASSAGE_PARLORS

  #
  MEDICAL

  #
  MEDICAL_AND_PHARMACEUTICAL

  #
  MEDICAL_CARE

  #
  MEDICAL_EQUIPMENT_AND_SUPPLIES

  #
  MEDICAL_SERVICES

  #
  MEETING_PLANNERS

  #
  MEMBERSHIP_CLUBS_AND_ORGANIZATIONS

  #
  MEMBERSHIP_COUNTRY_CLUBS_GOLF

  #
  MEMORABILIA

  #
  MEN_AND_BOY_CLOTHING_AND_ACCESSORY_STORES

  #
  MEN_CLOTHING

  #
  MERCHANDISE

  #
  METAPHYSICAL

  #
  MILITARIA

  #
  MILITARY_AND_CIVIL_SERVICE_UNIFORMS

  #
  MISC_AUTOMOTIVE_AIRCRAFT_AND_FARM_EQUIPMENT_DEALERS

  #
  MISC_GENERAL_MERCHANDISE

  #
  MISCELLANEOUS_GENERAL_SERVICES

  #
  MISCELLANEOUS_REPAIR_SHOPS_AND_RELATED_SERVICES

  #
  MODEL_KITS

  #
  MONEY_TRANSFER_MEMBER_FINANCIAL_INSTITUTION

  #
  MONEY_TRANSFER_MERCHANT

  #
  MOTION_PICTURE_THEATERS

  #
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING

  #
  MOTOR_HOME_AND_RECREATIONAL_VEHICLE_RENTAL

  #
  MOTOR_HOMES_DEALERS

  #
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS

  #
  MOTORCYCLE_DEALERS

  #
  MOTORCYCLES

  #
  MOVIE

  #
  MOVIE_TICKETS

  #
  MOVING_AND_STORAGE

  #
  MULTI_LEVEL_MARKETING

  #
  MUSIC_CDS_CASSETTES_AND_ALBUMS

  #
  MUSIC_STORE_INSTRUMENTS_AND_SHEET_MUSIC

  #
  NETWORKING

  #
  NEW_AGE

  #
  NEW_PARTS_AND_SUPPLIES_MOTOR_VEHICLE

  #
  NEWS_DEALERS_AND_NEWSTANDS

  #
  NON_DURABLE_GOODS

  #
  NON_FICTION

  #
  NON_PROFIT_POLITICAL_AND_RELIGION

  #
  NONPROFIT

  #
  NOVELTIES

  #
  OEM_SOFTWARE

  #
  OFFICE_SUPPLIES_AND_EQUIPMENT

  #
  ONLINE_DATING

  #
  ONLINE_GAMING

  #
  ONLINE_GAMING_CURRENCY

  #
  ONLINE_SERVICES

  #
  OOUTBOUND_TELEMARKETING_MERCH

  #
  OPHTHALMOLOGISTS_OPTOMETRIST

  #
  OPTICIANS_AND_DISPENSING

  #
  ORTHOPEDIC_GOODS_PROSTHETICS

  #
  OSTEOPATHS

  #
  OTHER

  #
  PACKAGE_TOUR_OPERATORS

  #
  PAINTBALL

  #
  PAINTS_VARNISHES_AND_SUPPLIES

  #
  PARKING_LOTS_AND_GARAGES

  #
  PARTS_AND_ACCESSORIES

  #
  PAWN_SHOPS

  #
  PAYCHECK_LENDER_OR_CASH_ADVANCE

  #
  PERIPHERALS

  #
  PERSONALIZED_GIFTS

  #
  PET_SHOPS_PET_FOOD_AND_SUPPLIES

  #
  PETROLEUM_AND_PETROLEUM_PRODUCTS

  #
  PETS_AND_ANIMALS

  #
  PHOTOFINISHING_LABORATORIES_PHOTO_DEVELOPING

  #
  PHOTOGRAPHIC_STUDIOS_PORTRAITS

  #
  PHOTOGRAPHY

  #
  PHYSICAL_GOOD

  #
  PICTURE_VIDEO_PRODUCTION

  #
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS

  #
  PLANTS_AND_SEEDS

  #
  PLUMBING_AND_HEATING_EQUIPMENTS_AND_SUPPLIES

  #
  POLICE_RELATED_ITEMS

  #
  POLITICAL_ORGANIZATIONS

  #
  POSTAL_SERVICES_GOVERNMENT_ONLY

  #
  POSTERS

  #
  PREPAID_AND_STORED_VALUE_CARDS

  #
  PRESCRIPTION_DRUGS

  #
  PROMOTIONAL_ITEMS

  #
  PUBLIC_WAREHOUSING_AND_STORAGE

  #
  PUBLISHING_AND_PRINTING

  #
  PUBLISHING_SERVICES

  #
  RADAR_DECTORS

  #
  RADIO_TELEVISION_AND_STEREO_REPAIR

  #
  REAL_ESTATE

  #
  REAL_ESTATE_AGENT

  #
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS

  #
  RELIGION_AND_SPIRITUALITY_FOR_PROFIT

  #
  RELIGIOUS

  #
  RELIGIOUS_ORGANIZATIONS

  #
  REMITTANCE

  #
  RENTAL_PROPERTY_MANAGEMENT

  #
  RESIDENTIAL

  #
  RETAIL

  #
  RETAIL_FINE_JEWELRY_AND_WATCHES

  #
  REUPHOLSTERY_AND_FURNITURE_REPAIR

  #
  RINGS

  #
  ROOFING_SIDING_SHEET_METAL

  #
  RUGS_AND_CARPETS

  #
  SCHOOLS_AND_COLLEGES

  #
  SCIENCE_FICTION

  #
  SCRAPBOOKING

  #
  SCULPTURES

  #
  SECURITIES_BROKERS_AND_DEALERS

  #
  SECURITY_AND_SURVEILLANCE

  #
  SECURITY_AND_SURVEILLANCE_EQUIPMENT

  #
  SECURITY_BROKERS_AND_DEALERS

  #
  SEMINARS

  #
  SERVICE_STATIONS

  #
  SERVICES

  #
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES

  #
  SHIPPING_AND_PACKING

  #
  SHOE_REPAIR_HAT_CLEANING

  #
  SHOE_STORES

  #
  SHOES

  #
  SNOWMOBILE_DEALERS

  #
  SOFTWARE

  #
  SPECIALTY_AND_MISC_FOOD_STORES

  #
  SPECIALTY_CLEANING_POLISHING_AND_SANITATION_PREPARATIONS

  #
  SPECIALTY_OR_RARE_PETS

  #
  SPORT_GAMES_AND_TOYS

  #
  SPORTING_AND_RECREATIONAL_CAMPS

  #
  SPORTING_GOODS

  #
  SPORTS_AND_OUTDOORS

  #
  SPORTS_AND_RECREATION

  #
  STAMP_AND_COIN

  #
  STATIONARY_PRINTING_AND_WRITING_PAPER

  #
  STENOGRAPHIC_AND_SECRETARIAL_SUPPORT_SERVICES

  #
  STOCKS_BONDS_SECURITIES_AND_RELATED_CERTIFICATES

  #
  STORED_VALUE_CARDS

  #
  SUPPLIES

  #
  SUPPLIES_AND_TOYS

  #
  SURVEILLANCE_EQUIPMENT

  #
  SWIMMING_POOLS_AND_SPAS

  #
  SWIMMING_POOLS_SALES_SUPPLIES_SERVICES

  #
  TAILORS_AND_ALTERATIONS

  #
  TAX_PAYMENTS

  #
  TAX_PAYMENTS_GOVERNMENT_AGENCIES

  #
  TAXICABS_AND_LIMOUSINES

  #
  TELECOMMUNICATION_SERVICES

  #
  TELEPHONE_CARDS

  #
  TELEPHONE_EQUIPMENT

  #
  TELEPHONE_SERVICES

  #
  THEATER

  #
  TIRE_RETREADING_AND_REPAIR

  #
  TOLL_OR_BRIDGE_FEES

  #
  TOOLS_AND_EQUIPMENT

  #
  TOURIST_ATTRACTIONS_AND_EXHIBITS

  #
  TOWING_SERVICE

  #
  TOYS_AND_GAMES

  #
  TRADE_AND_VOCATIONAL_SCHOOLS

  #
  TRADEMARK_INFRINGEMENT

  #
  TRAILER_PARKS_AND_CAMPGROUNDS

  #
  TRAINING_SERVICES

  #
  TRANSPORTATION_SERVICES

  #
  TRAVEL

  #
  TRUCK_AND_UTILITY_TRAILER_RENTALS

  #
  TRUCK_STOP

  #
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES

  #
  USED_MERCHANDISE_AND_SECONDHAND_STORES

  #
  USED_PARTS_MOTOR_VEHICLE

  #
  UTILITIES

  #
  UTILITIES_ELECTRIC_GAS_WATER_SANITARY

  #
  VARIETY_STORES

  #
  VEHICLE_SALES

  #
  VEHICLE_SERVICE_AND_ACCESSORIES

  #
  VIDEO_EQUIPMENT

  #
  VIDEO_GAME_ARCADES_ESTABLISH

  #
  VIDEO_GAMES_AND_SYSTEMS

  #
  VIDEO_TAPE_RENTAL_STORES

  #
  VINTAGE_AND_COLLECTIBLE_VEHICLES

  #
  VINTAGE_AND_COLLECTIBLES

  #
  VITAMINS_AND_SUPPLEMENTS

  #
  VOCATIONAL_AND_TRADE_SCHOOLS

  #
  WATCH_CLOCK_AND_JEWELRY_REPAIR

  #
  WEB_HOSTING_AND_DESIGN

  #
  WELDING_REPAIR

  #
  WHOLESALE_CLUBS

  #
  WHOLESALE_FLORIST_SUPPLIERS

  #
  WHOLESALE_PRESCRIPTION_DRUGS

  #
  WILDLIFE_PRODUCTS

  #
  WIRE_TRANSFER

  #
  WIRE_TRANSFER_AND_MONEY_ORDER

  #
  WOMEN_ACCESSORY_SPECIALITY

  #
  WOMEN_CLOTHING
}

# The Product attributes associated to this Agreement. This field is Internal and its for v2 RT billingAgreement
type billingProductAttributes {
  # Merchant side identifier for the product code associated with the agreement,
  # To create a new product code; reach out to your PayPal account manager
  code: String

  # The pattern in which the consent will be used for charging the buyers.
  chargePattern: billingChargePattern
}

# Types of ChargePatterns
# The pattern in which the consent will be used for charging the buyers.
enum billingChargePattern {
  # On-demand instant payments – non-recurring , pre-paid, variable amount, variable frequency.
  IMMEDIATE

  # Pay upfront fixed or variable amount on a fixed date before the goods/service is delivered.
  RECURRING_PREPAID
}

# Details of customer's default and alternate funding Options
type billingFundingOptionDetail {
  # Detail of customer's sticky FI and balance
  defaultFundingOptions: [billingFundingOption]

  # Detail of customer's all FI (out of these he can choose one which will be charged for the agreement)
  fundingOptions: [billingFundingOption]
}

# Encapsulates all properties related to a FundingOption.
# Ex: name, type, lastDigits, amount, etc.
# As of now Balance accounts and rewards are not mapped
type billingFundingOption {
  # Funding Option's ID (Ex: 'BA8JUE35JC6JBU4')
  # This differs from ID because ID will sometimes have an extra
  # keyword appended
  fundingOptionId: String

  # Funding Option's name (Ex: 'BANK OF AMERICA')
  name: String

  # NickName for the given Funding Option (Ex: 'AMEX Travel Card' for 'American Express Card ending in xxxx')
  nickName: String

  # Funding Option's full name (Ex: 'American Express' for 'AMEX')
  formattedName: String

  # Funding Option's amount.
  amount: billingMoney

  # Classification of funding Option
  type: billingFundingOptionType

  # Subclassification of funding Option
  subtype: billingFundingOptionSubType

  # preferred currency conversion of funding Option
  currencyConversionPreference: billingCurrencyConversionType

  # If a user is allowed to change currencyConversionPreference of funding Option
  currencyConversionApplicable: Boolean

  # If a funding Option is preferred by the user
  preferred: Boolean

  # Last digits of a credit card
  lastDigits: String

  # The backup to this funding option.
  # Only applicable to some funding option types.
  backupOption: billingBackupOption

  # fundingOption contingency with issue and resolution
  contingencies: [billingContingency]

  # additional constraints for fundingOption like CIT
  constraints: [billingFundingOptionConstraint]
}

# Types of FundingOption
enum billingFundingOptionType {
  #
  BANK

  #
  CARD

  #
  PAYPAL

  #
  CREDIT
}

# An enumeration of types that a FundingOptionSubType can be.
# CREATED, APPROVED, SUSPENDED, CANCELLED, or DECLINED
enum billingFundingOptionSubType {
  # For Checking bank account
  CHECKING

  # For Savings bank account
  SAVINGS

  # For Wallet balance
  BALANCE

  # For Credit card or paypal credit
  CREDIT

  # For Debit card
  DEBIT

  # For prepaid card
  PREPAID

  # For gift card
  GIFT

  #
  MERCHANT

  # Default subtype
  UNKNOWN

  # For Custom bank account
  CUSTOM

  # For Normal bank account
  NORMAL

  # For Bill Me Later
  BILL_ME_LATER

  # For PayPal Smart Connect
  PAYPAL_SMART_CONNECT

  # For EBAY MasterCard
  EBAY_MASTERCARD

  # For PayPal Extras MasterCard
  PAYPAL_EXTRAS_MASTERCARD
}

# An enumeration of types that a CurrencyConversionType can be.
# PAYPAL or VENDOR
enum billingCurrencyConversionType {
  #
  PAYPAL

  #
  VENDOR
}

# Contingency with issue and resolution
type billingContingency {
  # The name of the contingency triggered
  name: String

  # The associated issue for this contingency.
  issue: String

  # The action required to resolve the contingency
  resolutions: [billingContingencyResolution]
}

# The action required to resolve the contingency
type billingContingencyResolution {
  # The name of the resolution
  name: String

  # The additional information required to resolve the contingency.
  context: billingContingencyContext
}

# The context containing information required to resolve contingency
type billingContingencyContext {
  # The reference id
  referenceId: String

  # Device data Collection URL
  deviceDataCollectionUrl: billingGenericURL

  # Issuer
  issuer: String

  # Organization Unit Id
  organizationUnitId: String

  # Validity Duration
  validityDuration: billingTimeDuration

  # Reason
  reason: String

  # Skip 3ds Enforcement
  skipThreeDSEnforcement: Boolean

  # Source
  source: String
}

# The [ISO-8601-formatted](https://www.iso.org/standard/40874.html) length of time in years, months, weeks, days, hours, minutes, and seconds.<blockquote><strong>Note:</strong> The format is <code>P<var>y</var>Y<var>m</var>M<var>d</var>DT<var>h</var>H<var>m</var>M<var>s</var>S</code>.
# When an amount is zero, you can omit it. Because week cannot co-exist with other time components in ISO-8601 duration, specify <code>P7D</code>.
# Make provisions to incorporate the effects of daylight savings time.</blockquote><br/>For more information, see [durations](https://en.wikipedia.org/wiki/ISO_8601#Durations).
#
# pattern: ^P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+S)?)?$
scalar billingTimeDuration

# Encapsulates all properties related to a FundingOption Constraint.
type billingFundingOptionConstraint {
  # Type of constraint like CIT, SMART_AUTH
  type: String

  # Amount
  amount: billingMoney
}

# The billing details for the billing agreement. If the billing agreement was or is active, these fields are populated.
type billingBillingInfo {
  # The currency and total amount for all the transactions till now .
  totalBilledAmount: billingMoney

  # The currency and amount for a financial transaction, such as a balance or payment due.
  outstandingBalance: billingMoney

  # The details for the last payment of the subscription.
  lastPayment: billingMoney

  # The date and time, in [Internet date and time format]
  lastPaymentTime: billingDateTime

  # The date and time, in [Internet date and time format]
  nextPaymentTime: billingDateTime

  # The details for the next payment of the subscription.
  nextPayment: billingMoney

  # The date and time, in [Internet date and time format]
  finalPaymentTime: billingDateTime

  # The time duration for delayed cancellation
  cancellationDelay: billingTimeDuration

  # The number of consecutive payment failures.
  # Resets to `0` after a successful payment. If this reaches the `payment_failure_threshold` value,
  # the subscription updates to the `SUSPENDED` state.
  # Minimum: 0
  # Maximum: 999
  failedPaymentsCount: Int

  # The usage limits associated with the agreement
  usageLimits: billingUsageLimits
}

# The usage limits associated with the agreement
type billingUsageLimits {
  # The maximum currency and amount for a transaction
  maxAmountPerCycle: billingMoney

  # The frequency of the terms reset cycle.
  cycleFrequency: billingPlanBillingCycleFrequency

  # Max number of payments that can be done on the agreement in provided cycle
  maxPaymentPerCycle: String

  # The minimum threshold amount for a transaction
  minThresholdAmount: billingMoney
}

# An enumeration for all the supported operation types.
# CANCEL or CHANGE_FUNDING_OPTION
enum billingSupportedOperationType {
  #
  CANCEL

  #
  CHANGE_FUNDING_OPTION

  #
  UPDATE_BALANCE_PREFERENCE
}

# The number of records in a page and page number to be retrieved.
input billingBillingAgreementsInput {
  # Number of records to be retrieved in one page
  pageSize: Int = 20

  # The page number to be retrieved
  page: Int = 1

  # Search list of agreements which has funding option set to this default funding option.
  defaultFundingOption: billingDefaultFundingOptionInput

  # Filter the agreements based on statuses
  statuses: [billingBillingAgreementStatus] = [ACTIVE, SUSPENDED]
}

# Encapsulates all properties related to a Searching for a default funding option.
input billingDefaultFundingOptionInput {
  # Funding Option's ID (Ex: 'CC-BA8JUE35JC6JBU4')
  fundingOptionId: String!

  # Classification of funding Option
  type: billingFundingOptionType!
}

# Aggregate list of all billing agreements.
type billingBillingAgreements {
  # The list of billing agreements
  agreements: [billingBillingAgreement]

  # The pagination info.
  pageInfo: billingPaginationInfo
}

# The pagination details.
type billingPaginationInfo {
  # The total number of items in the full result list.
  totalItems: Int

  # How many pages are available, in total.
  totalPages: Int

  # A non-zero integer representing the page of the results.
  page: Int

  # A non-negative, non-zero integer indicating the maximum number of results to return at one time.
  perPage: Int

  # When paginating forwards, are there more items?.
  hasNextPage: Boolean

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean
}

# Experimentation Input
# TODO: Add all the filters we want to support here
input billingExperimentationInput {
  # Buyer country
  country: String

  # Billing Agreement Id
  billingAgreementId: String

  # experiment names
  names: [String]

  # experiment filters
  filters: [billingJSON]

  # Encrypted ID
  uid: String
}

# Encapsulates all properties related to experimentation
type billingExperimentation {
  # get all treatments
  treatments: billingJSON
}

#
type billingApplicationData {
  #
  paypalClientMetadataId: String
}

# An enumeration of Country Codes by ISO-3166-1 ALPHA-2 standards
enum CountryCodes {
  # Afghanistan
  AF

  # Aland Islands
  AX

  # Albania
  AL

  # Algeria
  DZ

  # American Samoa
  AS

  # Andorra
  AD

  # Angola
  AO

  # Anguilla
  AI

  # Antarctica
  AQ

  # Antigua and Barbuda
  AG

  # Argentina
  AR

  # Armenia
  AM

  # Aruba
  AW

  # Australia
  AU

  # Austria
  AT

  # Azerbaijan
  AZ

  # Bahamas
  BS

  # Bahrain
  BH

  # Bangladesh
  BD

  # Barbados
  BB

  # Belarus
  BY

  # Belgium
  BE

  # Belize
  BZ

  # Benin
  BJ

  # Bermuda
  BM

  # Bhutan
  BT

  # Bolivia
  BO

  # Bonaire, Saint Eustatius and Saba
  BQ

  # Bosnia and Herzegovina
  BA

  # Botswana
  BW

  # Bouvet Island
  BV

  # Brazil
  BR

  # British Indian Ocean Territory
  IO

  # British Virgin Islands
  VG

  # Brunei
  BN

  # Bulgaria
  BG

  # Burkina Faso
  BF

  # Burundi
  BI

  # Cambodia
  KH

  # Cameroon
  CM

  # Canada
  CA

  # Cape Verde
  CV

  # Cayman Islands
  KY

  # Central African Republic
  CF

  # Chad
  TD

  # Chile
  CL

  # China
  C2

  # China
  CN

  # Christmas Island
  CX

  # Cocos Islands
  CC

  # Colombia
  CO

  # Comoros
  KM

  # Cook Islands
  CK

  # Costa Rica
  CR

  # Croatia
  HR

  # Cuba
  CU

  # Curacao
  CW

  # Cyprus
  CY

  # Czech Republic
  CZ

  # Democratic Republic of the Congo
  CD

  # Denmark
  DK

  # Djibouti
  DJ

  # Dominica
  DM

  # Dominican Republic
  DO

  # East Timor
  TL

  # Ecuador
  EC

  # Egypt
  EG

  # El Salvador
  SV

  # Equatorial Guinea
  GQ

  # Eritrea
  ER

  # Estonia
  EE

  # Ethiopia
  ET

  # Falkland Islands
  FK

  # Faroe Islands
  FO

  # Fiji
  FJ

  # Finland
  FI

  # France
  FR

  # French Guiana
  GF

  # French Polynesia
  PF

  # French Southern Territories
  TF

  # Gabon
  GA

  # Gambia
  GM

  # Georgia
  GE

  # Germany
  DE

  # Ghana
  GH

  # Gibraltar
  GI

  # Greece
  GR

  # Greenland
  GL

  # Grenada
  GD

  # Guadeloupe
  GP

  # Guam
  GU

  # Guatemala
  GT

  # Guernsey
  GG

  # Guinea
  GN

  # Guinea-Bissau
  GW

  # Guyana
  GY

  # Haiti
  HT

  # Heard Island and McDonald Islands
  HM

  # Honduras
  HN

  # Hong Kong
  HK

  # Hungary
  HU

  # Iceland
  IS

  # India
  IN

  # Indonesia
  ID

  # Iran
  IR

  # Iraq
  IQ

  # Ireland
  IE

  # Isle of Man
  IM

  # Israel
  IL

  # Italy
  IT

  # Ivory Coast
  CI

  # Jamaica
  JM

  # Japan
  JP

  # Jersey
  JE

  # Jordan
  JO

  # Kazakhstan
  KZ

  # Kenya
  KE

  # Kiribati
  KI

  # Kosovo
  XK

  # Kuwait
  KW

  # Kyrgyzstan
  KG

  # Laos
  LA

  # Latvia
  LV

  # Lebanon
  LB

  # Lesotho
  LS

  # Liberia
  LR

  # Libya
  LY

  # Liechtenstein
  LI

  # Lithuania
  LT

  # Luxembourg
  LU

  # Macao
  MO

  # Macedonia
  MK

  # Madagascar
  MG

  # Malawi
  MW

  # Malaysia
  MY

  # Maldives
  MV

  # Mali
  ML

  # Malta
  MT

  # Marshall Islands
  MH

  # Martinique
  MQ

  # Mauritania
  MR

  # Mauritius
  MU

  # Mayotte
  YT

  # Mexico
  MX

  # Micronesia
  FM

  # Moldova
  MD

  # Monaco
  MC

  # Mongolia
  MN

  # Montenegro
  ME

  # Montserrat
  MS

  # Morocco
  MA

  # Mozambique
  MZ

  # Myanmar
  MM

  # Namibia
  NA

  # Nauru
  NR

  # Nepal
  NP

  # Netherlands
  NL

  # Netherlands Antilles
  AN

  # New Caledonia
  NC

  # New Zealand
  NZ

  # Nicaragua
  NI

  # Niger
  NE

  # Nigeria
  NG

  # Niue
  NU

  # Norfolk Island
  NF

  # North Korea
  KP

  # Northern Mariana Islands
  MP

  # Norway
  NO

  # Oman
  OM

  # Pakistan
  PK

  # Palau
  PW

  # Palestinian Territory
  PS

  # Panama
  PA

  # Papua New Guinea
  PG

  # Paraguay
  PY

  # Peru
  PE

  # Philippines
  PH

  # Pitcairn
  PN

  # Poland
  PL

  # Portugal
  PT

  # Puerto Rico
  PR

  # Qatar
  QA

  # Republic of the Congo
  CG

  # Reunion
  RE

  # Romania
  RO

  # Russia
  RU

  # Rwanda
  RW

  # Saint Barthelemy
  BL

  # Saint Helena
  SH

  # Saint Kitts and Nevis
  KN

  # Saint Lucia
  LC

  # Saint Martin
  MF

  # Saint Pierre and Miquelon
  PM

  # Saint Vincent and the Grenadines
  VC

  # Samoa
  WS

  # San Marino
  SM

  # Sao Tome and Principe
  ST

  # Saudi Arabia
  SA

  # Senegal
  SN

  # Serbia
  RS

  # Serbia and Montenegro
  CS

  # Seychelles
  SC

  # Sierra Leone
  SL

  # Singapore
  SG

  # Sint Maarten
  SX

  # Slovakia
  SK

  # Slovenia
  SI

  # Solomon Islands
  SB

  # Somalia
  SO

  # South Africa
  ZA

  # South Georgia and the South Sandwich Islands
  GS

  # South Korea
  KR

  # South Sudan
  SS

  # Spain
  ES

  # Sri Lanka
  LK

  # Sudan
  SD

  # Suriname
  SR

  # Svalbard and Jan Mayen
  SJ

  # Swaziland
  SZ

  # Sweden
  SE

  # Switzerland
  CH

  # Syria
  SY

  # Taiwan
  TW

  # Tajikistan
  TJ

  # Tanzania
  TZ

  # Thailand
  TH

  # Togo
  TG

  # Tokelau
  TK

  # Tonga
  TO

  # Trinidad and Tobago
  TT

  # Tunisia
  TN

  # Turkey
  TR

  # Turkmenistan
  TM

  # Turks and Caicos Islands
  TC

  # Tuvalu
  TV

  # U.S. Virgin Islands
  VI

  # Uganda
  UG

  # Ukraine
  UA

  # United Arab Emirates
  AE

  # United Kingdom
  GB

  # United States
  US

  # United States Minor Outlying Islands
  UM

  # Uruguay
  UY

  # Uzbekistan
  UZ

  # Vanuatu
  VU

  # Vatican
  VA

  # Venezuela
  VE

  # Vietnam
  VN

  # Wallis and Futuna
  WF

  # Western Sahara
  EH

  # Yemen
  YE

  # Zambia
  ZM

  # Zimbabwe
  ZW
}

# Possible languages that xo-content may return
enum CheckoutContentLanguageCode {
  # Arabic
  ar

  # Belarusian
  be

  # Bulgarian
  bg

  # Bengali
  bn

  # Catalan
  ca

  # Czech
  cs

  # Welsh
  cy

  # Danish
  da

  # German
  de

  # Greek
  el

  # English
  en

  # Spanish
  es

  # Estonian
  et

  # Basque
  eu

  # Finnish
  fi

  # French
  fr

  # Galician
  gl

  # Hebrew
  he

  # Hindi
  hi

  # Croatian
  hr

  # Hungarian
  hu

  # Indonesian
  id

  # Icelandic
  is

  # Italian
  it

  # Japanese
  ja

  # Georgian
  ka

  # Kazakh
  kk

  # Khmer
  km

  # Korean
  ko

  # Lithuanian
  lt

  # Latvian
  lv

  # Macedonian
  mk

  # Mongolian
  mn

  # Marathi
  mr

  # Malay
  ms

  # Dutch
  nl

  # Norwegian
  no

  # Punjabi
  pa

  # Polish
  pl

  # Portuguese
  pt

  # Romanian
  ro

  # Russian
  ru

  # Sinhala
  si

  # Slovak
  sk

  # Slovenian
  sl

  # Albanian
  sq

  # Swedish
  sv

  # Swahili
  sw

  # Tamil
  ta

  # Telugu
  te

  # Thai
  th

  # Tagalog
  tl

  # Turkish
  tr

  # Ukrainian
  uk

  # Urdu
  ur

  # Vietnamese
  vi

  # Chinese
  zh
}

# GeoLocation - latitude,longitude without space eg: 37.377089,-121.922733
scalar GeoLocation

# GAAC - Google Address Auto Complete
# Place type is the search criteria for google places API
# Mostly for PayPal usecase it will be 'address' type
enum GooglePlacesType {
  # search places which may not be precise address or establishment
  GEOCODE

  # search by precise address
  ADDRESS

  # search by business establishment
  ESTABLISHMENT

  # search by city postal_code country and few more address fields
  REGIONS

  # search by locality or administrative_area_level_3
  CITIES
}

# GAAC - Google Address Auto Complete
# Response of google api call to get address auto suggestion based on line1 of address field
type AddressAutoComplete {
  # Suggestions is an array of object with placeId and addressText
  suggestions: [AddressAutoCompleteElement]
}

# GAAC - Google Address Auto Complete
# each address format of GAAC should be this format for frontends to process
type AddressAutoCompleteElement {
  # addressText is a plain text full address
  addressText: String

  # mainText is usually first line of address with which user input is matched
  # 2211 North first street
  mainText: String

  # placeId is a unique identifier of addressText, and it can be used to get normalized address from google
  placeId: ID

  # secondaryText is usually city state country separated by comma
  # San Jose, CA, USA
  secondaryText: String
}

# GAAC - Google Address Auto Complete
# Address response based on a place id - basically this is google returned address elements
type AddressForPlaceId {
  # address mapping from google places api response
  # we are having address key to create a griffin mapped google response
  # In future if we need any google specific fields then we can add a new key
  # with name additionalAddressFields or something similar
  #
  # If state is missing in GenericAddress then it means google returned state
  # did not match the griffin state list we have for a country
  address: GenericAddress
}

# Encapsulates all properties related to a generic address.
# Ex: line1, city, state, postalCode, fullAddress, isDefaultBilling, etc.
type GenericAddress implements Address {
  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine1 instead for portable format."
    )

  # An Address second line street address (Ex: 'Apt 123')
  line2: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine2 instead for portable format."
    )

  # An Address city (Ex: 'San Jose')
  city: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea2 instead for portable format."
    )

  # An Address state/province (Ex: 'CA')
  state: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea1 instead for portable format."
    )

  # An Address postal code (Ex: '95131')
  postalCode: String

  # An Address two-letter country code (Ex: 'US')
  country: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use countryCode instead"
    )

  # An Address on a single line (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String

  # Portable address: An address first line street address
  addressLine1: String

  # Portable address: An address second line street address
  addressLine2: String

  # Portable address: An address third line street address
  addressLine3: String

  # Portable address: An address first line admin area
  adminArea1: String

  # Portable address: An address second line admin area
  adminArea2: String

  # Portable address: An address third line admin area
  adminArea3: String

  # Portable address: An address forth line admin area
  adminArea4: String

  # Portable address: An address two-letter country code
  countryCode: String
}

# The Address interface encapsulates all properties related to an address.
interface Address {
  # A billing address first line street address (Ex: '2211 North 1st St')
  line1: String

  # A billing address second line street address (Ex: 'Apt 123')
  line2: String

  # A billing address city (Ex: 'San Jose')
  city: String

  # A billing address state/province (Ex: 'CA')
  state: String

  # A billing address postal code (Ex: '95131')
  postalCode: String

  # A billing address two-letter country code (Ex: 'US')
  country: String

  # A billing address on a single line
  # (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String
}

# Allows you to query for card metadata
type CardMeta {
  # Allows you to query for card definitions.
  #
  # cardNumber - a partial or full card number for which to retrieve definitions
  # countryCode - a country code that represents the user's country (e.g. 'US')
  #
  # If a countryCode is not provided, it will be detected based on the request.
  #
  # Required Roles: None
  definitions: [CardDefinition]!

  # Returns the cobrand of the card if the card is cobranded (e.g. DISNEY_CREDIT)
  cobrand: String
}

# Encapsulates key metadata for a particular card.
type CardDefinition {
  # The card issuer as a CardIssuerType (e.g. 'VISA', 'DISCOVER')
  brand: CardIssuerType!

  # The classification(s) for the card (e.g. 'CREDIT_CARD', 'DEBIT_CARD')
  classifications: [InstrumentClassification]!

  # The card issuer's country code
  countryCode: CountryCodes!

  # The card's currency code
  currencyCode: SupportedCountryCurrencies!

  # The available method(s) for confirming the card (e.g. 'ONE_TIME_PASSWORD_CONFIRMATION')
  confirmationMethods: [String]!
}

# An enumeration of credit card issuers that a card can have.
# VISA, MASTER_CARD, AMEX, etc
enum CardIssuerType {
  # American Express
  AMEX

  # Visa
  VISA

  # Mastercard
  MASTER_CARD

  # Diners Club
  DINERS

  # Discover
  DISCOVER

  # Maestro
  MAESTRO

  # JCB
  JCB

  # CB Nationale
  CB_NATIONALE

  # Cofinoga
  COFINOGA

  # Cetelem
  CETELEM

  # Cofidis
  COFIDIS

  # Elo
  ELO

  # Hiper
  HIPER

  # Hipercard
  HIPERCARD

  # UnionPay
  CHINA_UNION_PAY

  # RuPay
  RUPAY

  # Eftpos
  EFTPOS
}

# An enumeration of instrument classifications supported by PayPal
enum InstrumentClassification {
  # Bank account
  BANK

  # Co-branded credit card
  CO_BRANDED_CREDIT_CARD

  # Credit card
  CREDIT_CARD

  # Line of credit offered by PayPal
  CREDIT_LINE

  # Debit card
  DEBIT_CARD

  # External wallet account
  EXTERNAL_WALLET

  # Gift card
  GIFT_CARD

  # Balance
  HOLDING

  # PayPal-issued prepaid card
  PAYPAL_PREPAID_CARD

  # Prepaid card
  PREPAID_CARD

  # Credit card issued by a merchant
  PRIVATE_LABEL_CREDIT_CARD

  # Rewards currency
  REWARDS

  # Merchant specific balance, pay after delivery, etc.
  TAB

  # UNKNOWN
  UNKNOWN
}

# An enumeration of supported country currencies that CurrencyConversion query allows
enum SupportedCountryCurrencies {
  # United Arab Emirates Dirham (AED)
  AED

  # Afghan Afghani (AFN)
  AFN

  # Albania Lek (ALL)
  ALL

  # Armenian Dram (AMD)
  AMD

  # Netherlands Antillian Guilder (ANG)
  ANG

  # Angolian Kwanza (AOA)
  AOA

  # Argentine Peso (ARS)
  ARS

  # Australian Dollar (AUD)
  AUD

  # Aruban Guilder (AWG)
  AWG

  # Azerbaijan Manat (AZN)
  AZN

  # Bosnian Convertible Mark (BAM)
  BAM

  # Barbados Dollar (BBD)
  BBD

  # Bangladeshi Taka (BDT)
  BDT

  # Bulgarian Lev (BGN)
  BGN

  # Bahraini Dinar (BHD)
  BHD

  # Burundi Franc (BIF)
  BIF

  # Bermudian Dollar (BMD)
  BMD

  # Brunei Dollar (BND)
  BND

  # Bolivian Boliviano (BNB)
  BOB

  # Brazilian Real (BRL)
  BRL

  # Bahamian Dollar (BSD)
  BSD

  # Bhutan Ngultrum (BTN)
  BTN

  # Botswana Pula (BWP)
  BWP

  # Belarusian Ruble (BYN)
  BYN

  # Belize Dollar (BZD)
  BZD

  # Canadian Dollar (CAD)
  CAD

  # Dem. Republic, Congo Franc Congolais (CDF)
  CDF

  # Swiss Franc (CHF)
  CHF

  # Chilean Peso (CLP)
  CLP

  # Chinese Yuan Renminbi (CNY)
  CNY

  # Colombian Peso (COP)
  COP

  # Costa Rican Colon (CRC)
  CRC

  # Cuban Convertible Peso (CUC)
  CUC

  # Cuban Peso (CUP)
  CUP

  # Cape Verde Escudo (CVE)
  CVE

  # Czech Koruna (CZK)
  CZK

  # Djibouti Franc (DJF)
  DJF

  # Danish Krone (DKK)
  DKK

  # Dominican Peso (DOP)
  DOP

  # Algerian Dinar (DZD)
  DZD

  # Estonian Kroon (EEK)
  EEK

  # Egyptian Pound (EGP)
  EGP

  # Eritrean Nakfa (ERN)
  ERN

  # Ethiopian Birr (ETB)
  ETB

  # Euro (EUR)
  EUR

  # Fiji Dollar (FJD)
  FJD

  # Falkland Islands Pound (FKP)
  FKP

  # Pound Sterling (GBP)
  GBP

  # Georgian Lari (GEL)
  GEL

  # Ghanaian Cedi (GHS)
  GHS

  # Gibraltar Pound (GIP)
  GIP

  # Gambian Dalasi (GMD)
  GMD

  # Guinea Franc (GNF)
  GNF

  # Guatemalan Quetzal (GTQ)
  GTQ

  # Guyana Dollar (GYD)
  GYD

  # Hong Kong Dollar (HKD)
  HKD

  # Honduran Lempira (HNL)
  HNL

  # Croatian Kuna (HRK)
  HRK

  # Haitian gourde (HTG)
  HTG

  # Hungarian Forint (HUF)
  HUF

  # Indonesian Rupiah (IDR)
  IDR

  # New Israeli Shekel (ILS)
  ILS

  # Indian Rupee (INR)
  INR

  # Iraqi Dinar (IQD)
  IQD

  # Iranian rial (IRR)
  IRR

  # Iceland Krona (ISK)
  ISK

  # Jamaican Dollar (JMD)
  JMD

  # Jordanian Dinar (JOD)
  JOD

  # Japanese Yen (JPY)
  JPY

  # Kenyan Shilling (KES)
  KES

  # Kyrgyzstani Som (KGS)
  KGS

  # Cambodian Riel (KHR)
  KHR

  # Comoro Franc (KMF)
  KMF

  # North Korean Won (KPW)
  KPW

  # South Korean Won (KRW)
  KRW

  # Kuwaiti Dinar (KWD)
  KWD

  # Cayman Islands Dollar (KYD)
  KYD

  # Kazahstan Tenge (KYD)
  KZT

  # Lao Kip (LAK)
  LAK

  # Lebanese Pound (LBP)
  LBP

  # Sri Lanka Rupee (LKR)
  LKR

  # Liberian Dollar (LRD)
  LRD

  # Lesotho Loti (LSL)
  LSL

  # Lithuanian Litas (LTL)
  LTL

  # Latvian Lats (LVL)
  LVL

  # Libyan Dinar (LYD)
  LYD

  # Malagasy Franc (MAD)
  MAD

  # Moldovan Leu (MDL)
  MDL

  # Malagasy Ariary (MGA)
  MGA

  # Macedonian Denar (MKD)
  MKD

  # Myanmar Kyat (MMK)
  MMK

  # Mongolian Tugrik / Tugrug (MNT)
  MNT

  # Macanese Pataca (MOP)
  MOP

  # Mauritanian Ouguiya (MRO)
  MRO

  # Mauritanian Ouguiya (MRU)
  MRU

  # Mauritius Rupee (MUR)
  MUR

  # Maldivian Rufiyaa (MVR)
  MVR

  # Malawi Kwacha (MWK)
  MWK

  # Mexican Peso (MXN)
  MXN

  # Malaysian Ringgit (MYR)
  MYR

  # Mozambican metical (MZN)
  MZN

  # Namibia Dollar (Rand)
  NAD

  # Nigerian Naira (NGN)
  NGN

  # Nicaraguan Cordoba Oro (NIO)
  NIO

  # Norwegian Krone (NOK)
  NOK

  # Nepalese Rupee (NPR)
  NPR

  # New Zealand Dollar (NZD)
  NZD

  # Omani Rial (OMR)
  OMR

  # Panamanian Balboa (PAB)
  PAB

  # Peruvian Nuevo Sol (PEN)
  PEN

  # Papua New Guinean Kina (PGK)
  PGK

  # Philippine Peso (PHP)
  PHP

  # Pakistani Rupee (PKR)
  PKR

  # Zloty (PLN)
  PLN

  # Paraguay Guarani (PYG)
  PYG

  # Qatari Rial (QAR)
  QAR

  # Romanian New Leu (RON)
  RON

  # Serbian Dinar (RSD)
  RSD

  # Russian Rubble (RUB)
  RUB

  # Russian Ruble (RUR)
  RUR

  # Rwandan Franc (RWF)
  RWF

  # Salvadoran Colon (SVC)
  SVC

  # Saudi Riyal (SAR)
  SAR

  # Solomon Islands Dollar (SBD)
  SBD

  # Seychellois Rupee (SCR)
  SCR

  # Sudanese Pound (SDG)
  SDG

  # Swedish Krona (SEK)
  SEK

  # Singapore Dollar (SGD)
  SGD

  # Saint Helena Pound (SHP)
  SHP

  # Sierra Leone Leone (SLL)
  SLL

  # Somali Shilling (SOS)
  SOS

  # Surinamese Dollar (SRD)
  SRD

  # South Sudanese Pound (SSP)
  SSP

  # Sao Tome and Principe Dobra (STD)
  STD

  # Sao Tome and Principe Dobra (STN)
  STN

  # Syrian Pound (SYP)
  SYP

  # Swaziland Lilangeni (SZL)
  SZL

  # Baht (THB)
  THB

  # Tajikistan Somoni (TJS)
  TJS

  # Turkish Lira (TL)
  TL

  # Turkmen Manat (TMT)
  TMT

  # Tunisian Dinar (TND)
  TND

  # Tongan Paʻanga (TOP)
  TOP

  # New Turkish Lira (TRY)
  TRY

  # Trinidad and Tobago Dollar (TTD)
  TTD

  # New Taiwan Dollar (TWD)
  TWD

  # Tanzanian Shilling (TZS)
  TZS

  # Ukrainian Hryvnia (UAH)
  UAH

  # Uganda Shilling (UGX)
  UGX

  # US Dollar (USD)
  USD

  # Uruguayan Peso Uruguayo (UYU)
  UYU

  # Uzbekistani Som (UZS)
  UZS

  # Venezuelan Bolivar Fuerte (VEF)
  VEF

  # Venezuelan Bolivar Soberano (VES)
  VES

  # Vietnamese Dong (VND)
  VND

  # Vanuatu Vatu (VUV)
  VUV

  # Samoan Tala (WST)
  WST

  # CFA Franc BEAC (XAF)
  XAF

  # East Caribbean Dollar (XCD)
  XCD

  # West African CFA Franc (XOF)
  XOF

  # CFP Franc (XPF)
  XPF

  # Yemeni Rial (YER)
  YER

  # South African Rand (ZAR)
  ZAR

  # Zambian Kwacha (ZMW)
  ZMW
}

# Enumeration to identify different flows of the checkout session
enum CheckoutFlow {
  # Configuration to set `client_configuration` for Link and Pay flow.
  # Setting this configuration will allow PAPS to fetch only the
  # FI which is attached to the billing agreement id
  LINK_AND_PAY
}

# Encapsulates all properties related to a CheckoutSession.
# Ex: Cart, Plans, FundingOptions, etc
type CheckoutSession {
  # The card issuers allowed to be used for a given CheckoutSession.
  # An array of CardIssuerType enums.
  #
  # Optionally pass a CountryCode if you want to be explicit, otherwise defaults
  # to node locale resolution that provides best guess based on user information, LANG cookie, etc
  #
  # Average SLA response time -- 250ms
  #
  # Required auth states: Any
  allowedCardIssuers(country: CountryCodes): [CardIssuerType]

  # The card product classes will be used to find whether a card is DEBIT/CREDIT/etc.
  # An array of CardProductClass enums.
  #
  # Required auth states: Any
  cardProductClasses: [InstrumentClassification]!

  # Return state of checkout Session
  # Average SLA response time - 1750ms
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  state: CheckoutSessionState

  # A Checkout session's billing addresses.
  # An Array of CheckoutBillingAddress types.
  #
  # Average SLA response time -- 30ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  billingAddresses: [CheckoutBillingAddress]

  # A Checkout session's current potential buyer
  buyer: User

  # A Checkout session's cart.
  # Average SLA response time - 170ms
  #
  # Optionally pass a CountryCode, otherwise defaults to node locale resolution that provides
  # best guess based on user information, LANG cookie, etc (CountryCode is necessary to
  # retrieve the max over capture amount for the transaction).
  #
  # Required auth states: Any
  cart(country: CountryCodes): Cart

  # A Checkout session's application data flags.
  # Average SLA response time - 40ms
  #
  # Required Roles: See CheckoutSessionFlags
  flags: CheckoutSessionFlags

  # Most recent declined instrument for the current checkout session.
  declinedInstruments: [DeclinedInstrument]

  # Disallowed funding instruments for the given checkout session.
  disallowedInstruments: [DisallowedInstrument]

  # A Checkout session's funding options, which lists the options the buyer has to pay for the transaction.
  #
  # Average SLA response time - 1750ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  fundingOptions(
    # If set to `false`, only funding options that have a plan with just the funding
    # instrument will be surfaced. Funding options that can only be used in combination
    # with other funding sources will not be returned. This excludes some cases of
    # split balance and incentives, where the instrument can only be used with the
    # split balance or incentives.
    #
    # If set to `true`, all options will be returned. This is needed if you want to
    # handle all split balance and incentives use cases.
    returnAllPlans: Boolean

    # For these instrument types, the plans will contain a consolidated funding source and the
    # individual sources would be available in the `groupedSources` type
    groupSourcesOnType: [FundingOptionGroupingType]
  ): [FundingOption]

  # A Checkout session's locale.
  #
  # Required auth states: Any
  locale: CheckoutLocale

  # A Checkout session's associated merchant
  merchant: Merchant!

  # Credit metadata. For instance credit flags, settings and tools tips
  creditMeta: CreditMeta!

  # A Checkout session's PPC credit marketing offers.
  # Average SLA response time - 50ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  creditPPCOffers(
    # We need to pass whether or not cookies are enabled for the client from the front-end to Personalization Studio
    areCookiesDisabled: Boolean

    # The checkout UI is running in iframe or not, pass to Personalization Studio
    isIframe: Boolean

    # Specifies offers can be served from credit offer cache. Defaults to false
    allowCache: Boolean

    # Specifies merchant app version.
    merchantAppVersion: String

    # If true, qualifying AND non-qualifying offers will be returned.
    # If false, only qualifying offers will be returned.
    # Defaults to false
    allowNonQualifyingOffers: Boolean
  ): [CreditPPCOffer]

  # A Checkout session's credit as FI marketing offers.
  # Average SLA response time - 50ms - (This might change)
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  creditAsFIOffers(
    # We need to pass whether or not cookies are enabled for the client from the front-end to Personalization Studio
    areCookiesDisabled: Boolean

    # The checkout UI is running in iframe or not, pass to Personalization Studio
    isIframe: Boolean

    # Specifies offers can be served from credit offer cache. Defaults to false
    allowCache: Boolean
  ): [CreditAsFIOffer]

  # A Checkout session's selected credit financing option that was patched to the cart.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  creditFinancingOption: CreditFinancingOption

  # Integration details for portable credit applications.
  # Average SLA response time - ??ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  creditApplyPortableIntegration(
    selectedCRCOffer: SelectedCRCOffer
    selectedShippingAddressId: String
    selectedCRCfi: SelectedCRCfi
    selectedContinueGPLInterstitial: Boolean
    downsellOfferId: String
  ): CreditApplyPortable

  # A checkout session's giving recommendation.
  # Average SLA response time - 50ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  suggestedDonation: SuggestedDonation

  # A Checkout session's payment contingencies
  paymentContingencies: PaymentContingencies

  # A Checkout session's shipping addresses.
  # An Array of CheckoutShippingAddress types.
  # Average SLA response time - 1750ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  shippingAddresses: [CheckoutShippingAddress]

  # Indicates if it's a Continue or Pay Now checkout flow.
  userAction: CheckoutUserAction!

  # Returns type of checkout session: BILLING_WITH_PURCHASE, BILLING_WITHOUT_PURCHASE, PURCHASE.
  checkoutSessionType: CheckoutSessionType

  # Optionally takes a list of offer program names (enums).
  # Returns a list of offers the user is eligible for,
  # non eligible offers will not be listed.
  offers(type: [OfferPrograms!]): [Offer]!

  # Returns an array of payees.
  payees: [Payee]

  # Provides the user's current SCA status and exemption reason, if any
  secureCustomerAuthenticationContext: SecureCustomerAuthenticationContext

  # Returns a list of eligible `SplitFundingOption`s
  splitFundingOptions: [SplitFundingOptions]

  # Returns an array of allowed card brands and corresponding supported bank issuers array returned by IDS.
  # Card brands and bank issuers may vary by user's country and merchant's country.
  # Separated from allowedCardIssuers - returned by PAPS and only returns supported card brands.
  #
  # IDS also returns funding sources' logo image urls
  supportedFundingSources(userCountry: CountryCodes): [SupportedFundingSource]

  # Returns all properties related to a completed payment
  completedPaymentInfo: CompletedPaymentInfo

  # Quote of the live value of a given crypto funding instrument, valid for 30 seconds.
  # Values returned are based on the amount of crypto the user has for that holding, and the amount that the user is
  # using in the purchase.
  cryptocurrencyQuotes(
    symbols: [CryptocurrencySymbol]!
    amount: AmountInput!
  ): [CryptocurrencyQuote]

  # Returns all credit offers available to users who are not PayPal members
  #
  # countryCode - The country code of the buyer (e.g. US)
  # languageCode - The language code of the buyer (e.g. en). If not provided it will be resolved via req.locality.
  nonMemberCreditOffers(
    countryCode: CountryCodes!
    languageCode: CheckoutContentLanguageCode
  ): NonMemberCreditOffers

  # Existing Billing Agreement Details
  # Migrated from billingnodeserv for billing without purchase flow
  existingBillingAgreementDetails: ExistingBillingAgreementDetails
}

# An enumeration of State of Checkout Session. NOT_PAYABLE, PAYABLE, PAID
enum CheckoutSessionState {
  # NON_PAYABLE. Session Not Authorised & has contingencies or error for approving the call
  NON_PAYABLE

  # PAYABLE. Session is eligible for ApprovePayment Call
  PAYABLE

  # APPROVED. Session is Approved & DoEC can be called
  APPROVED

  # PAID. Money Movemement has happened
  PAID
}

# Encapsulates all properties related to a billing address which is extend from our
# generic Address type
#
# Ex: line1, city, state, postalCode, fullAddress, etc.
type CheckoutBillingAddress implements Address {
  # A billing address ID (Ex: '285166')
  addressId: String

  # A billing address first line street address (Ex: '2211 North 1st St')
  line1: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine1 instead for portable format."
    )

  # A billing address second line street address (Ex: 'Apt 123')
  line2: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine2 instead for portable format."
    )

  # A billing address city (Ex: 'San Jose')
  city: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea2 instead for portable format."
    )

  # A billing address state/province (Ex: 'CA')
  state: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea1 instead for portable format."
    )

  # A billing address postal code (Ex: '95131')
  postalCode: String

  # A billing address two-letter country code (Ex: 'US')
  country: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use countryCode instead for portable format."
    )

  # A billing address on a single line
  # (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String

  # Portable address: An address first line street address
  addressLine1: String

  # Portable address: An address second line street address
  addressLine2: String

  # Portable address: An address third line street address
  addressLine3: String

  # Portable address: An address first line admin area
  adminArea1: String

  # Portable address: An address second line admin area
  adminArea2: String

  # Portable address: An address third line admin area
  adminArea3: String

  # Portable address: An address forth line admin area
  adminArea4: String

  # Portable address: An address two-letter country code
  countryCode: String

  # Indicates a billing address is selected or not.
  isSelected: Boolean
}

# Encapsulates all properties related to a User.
# Ex: Name, Addresses, Profile Photos, etc.
# Average SLA response time - 70ms
#
# Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
type User {
  # User ID (or an encrypted account number) Average SLA response time - 70ms
  userId: String

  # A User's addresses, an Array of UserAddress types.
  # Optionally, you can query by address type (AddressType).
  # Otherwise, all addresses are returned.
  # Average SLA response time - 70ms
  addresses(type: AddressType): [UserAddress]

  # A User's email address. Average SLA response time - 70ms
  email: Email

  # A user's locale. Average SLA response time - 70ms
  locale: GenericLocale

  # A User's name. Average SLA response time - 70ms
  name: PersonName

  # A User's phone numbers, an Array of GenericPhone types.
  # Optionally, you can query by phone type (PhoneType).
  # Otherwise, all phone numbers are returned.
  # Average SLA response time - 70ms
  phones: [GenericPhone]

  # A User's profile image, a ProfileImage type.
  # You can query by width, height, or type (ProfileImageType).
  # Average SLA response time - 80ms
  profileImage(width: Int, height: Int, type: ProfileImageType): ProfileImage

  # A User's profile images, an Array of ProfileImage types.
  # Average SLA response time - 80ms
  profileImages: [ProfileImage]

  # Encapsulates all properties related to a User's auth status.
  # Ex: Access token
  auth: Auth

  # A User's edelivery consent (true - eConsent is required and missing, false - eConsent is already completed)
  # E-Sign consent is the process by which US consumers consent to have their
  # notifications and statements delivered electronically
  eConsent: Boolean

  # An Array of CheckoutBillingAddress types.
  #
  # Average SLA response time -- 30ms
  billingAddresses: [CheckoutBillingAddress]

  # If a user is eligible to hold paypal balance or not
  eligibleToHoldBalance: Boolean
}

# An enumeration of types that an Address can be. PROFILE, SHIPPING, BUSINESS, etc.
enum AddressType {
  # A business address
  BUSINESS

  # A drop-off address
  DROP_OFF

  # A gift address
  GIFT

  # A home or work address
  HOME_OR_WORK

  # A prior/inactive address
  PRIOR

  # An address associated with a user profile
  PROFILE

  # A shipping address
  SHIPPING

  # A verisign address
  VERISIGN
}

# Encapsulates all properties related to a user's address.
# Ex: line1, city, state, postalCode, fullAddress, isDefaultBilling, etc.
type UserAddress implements Address {
  # An Address ID (Ex: '285166')
  addressId: String

  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String

  # An Address second line street address (Ex: 'Apt 123')
  line2: String

  # An Address city (Ex: 'San Jose')
  city: String

  # An Address state/province (Ex: 'CA')
  state: String

  # An Address postal code (Ex: '95131')
  postalCode: String

  # An Address on a single line (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String

  # An Address two-letter country code (Ex: 'US')
  country: String

  # An Address is selected. If you are listing out addresses in a UI, and need to
  # show that an address is selected, use this property.
  isSelected: Boolean

  # If an Address is the primary address
  isPrimary: Boolean

  # If an Address is the default billing address
  isDefaultBilling: Boolean

  # If an Address is the default shipping address
  isDefaultShipping: Boolean

  # Type of Address (Ex: 'SHIPPING').  See AddressType enum.
  type: AddressType
}

# Encapsulates all properties related to an email. Ex: url, width, height
type Email {
  # The local-part of the e-mail address (Ex: 'user')
  localPart: String

  # The domain of the e-mail address (Ex: domain.com)
  domainPart: String

  # The full e-mail address (Ex: user@domain.com)
  stringValue: String
}

# Encapsulates all properties related to a locale. GenericLocale should be used
# for most use cases. CheckoutLocale should be used for Checkout specific use
# cases. Ex: country, language, directionality, etc.
type GenericLocale implements Locale {
  # A locale's country (Ex: 'US')
  country: String

  # A locale's language (Ex: 'en')
  language: String

  # A locale's culture (Ex: 'en-US')
  culture: String

  # A locale's locale (Ex: 'en_US')
  locale: String

  # A locale's directionality (Ex: 'ltr')
  directionality: Directionality
}

# The Locale interface encapsulates all properties related to a locale.
# Ex: country, language, directionality, etc.
interface Locale {
  # A locale's country (Ex: 'US')
  country: String

  # A locale's language (Ex: 'en')
  language: String

  # A locale's culture (Ex: 'en-US')
  culture: String

  # A locale's locale (Ex: 'en_US')
  locale: String

  # A locale's directionality (Ex: 'ltr')
  directionality: Directionality
}

# An enumeration of values that language directionality can be. LTR or RTL
enum Directionality {
  # Left-to-right
  LTR

  # Right-to-left
  RTL
}

# Encapsulates all properties related to a person's name.
# Ex: givenName, middleName, familyName, fullName, etc.
type PersonName {
  # A person's salutation (Ex: 'Mr')
  salutation: String

  # A person's given name, or first name (Ex: 'William')
  givenName: String

  # A person's middle name (Ex: 'Alan')
  middleName: String

  # A person's family name, or last name (Ex: 'Doe')
  familyName: String

  # A person's suffix (Ex: 'Jr')
  suffix: String

  # A person's full name (Ex: 'Mr. William Alan Doe, Jr.')
  fullName: String

  # A person's informal name (Ex: 'Javier')
  informalName: String
}

# Encapsulates all properties related to a generic phone number.
# Ex: countryCode, nationalNumber, type, national, international, etc.
type GenericPhone {
  # A country code associated with a phone number (Ex: '1')
  countryCode: String

  # An unformatted phone number (Ex: '2015550123')
  number: String

  # A national representation of a phone number (Ex: '(201) 555-0123')
  national: String

  # A national (obscured) representation of a phone number (Ex: '(2**) ***-0123')
  nationalObscured: String

  # An international representation of a phone number (Ex: '+1 201-555-0123')
  international: String

  # An E164 representation of a phone number (Ex: '+12015550123')
  e164: String

  # An RFC3966 representation of a phone number (Ex: 'tel:+1-201-555-0123')
  rfc3966: String

  # Whether or not a phone is marked as active
  isActive: Boolean

  # Whether or not a phone is marked as primary
  isPrimary: Boolean

  # Type of phone (Ex: 'MOBILE').  See PhoneType enum.
  type: PhoneType
}

# An enumeration of types that an Phone can be. MAIN, WORK, MOBILE, FAX, OTHER
enum PhoneType {
  # Phone is a main phone
  MAIN

  # Phone is a work phone
  WORK

  # Phone is a mobile phone
  MOBILE

  # Phone is a fax phone
  FAX

  # Phone is another type of phone
  OTHER
}

# An enumeration of types that ProfileImage can have.
#
# See: https://engineering.paypalcorp.com/confluence/display/PayPalMediaService/Image+Request+Metadata+Data#ImageRequestMetadataData-ImageIds
enum ProfileImageType {
  # 32x32
  XXS

  # 64x64
  XS

  # 96x96
  S

  # 200x200
  M

  # 300x300
  L

  # 400x400
  XL

  # 500x500
  XXL

  # 800x800
  XXXL

  # 96x96
  SIZE_0

  # 400x400
  SIZE_1

  # 200x200
  SIZE_2

  # 800x800
  SIZE_3

  # 640x480
  SIZE_4

  # 100x75
  SIZE_5

  # 70x70
  SIZE_6

  # 150x150
  SIZE_7

  # 400x300
  SIZE_8

  # 200x150
  SIZE_9

  # 9999x9999
  SIZE_10

  # 310x90
  SIZE_11

  # 500x500
  SIZE_12

  # 120x42
  SIZE_13

  # 64x64
  SIZE_14

  # 225x125
  SIZE_15

  # 400x300
  SIZE_16

  # 80x80
  SIZE_17

  # 800x600
  SIZE_20

  # 60x60
  SIZE_22

  # 80x80
  SIZE_23

  # 298x298
  SIZE_24

  # 140x140
  SIZE_26

  # 180x60
  SIZE_28

  # 900x300
  SIZE_29

  # 300x115
  SIZE_30

  # 300x225
  SIZE_31

  # 1600x1600
  SIZE_32

  # 48x48
  SIZE_33

  # 50x50
  SIZE_34

  # 300x300
  SIZE_35

  # 150x40
  SIZE_36

  # 175x175
  SIZE_37

  # 115x115
  SIZE_38

  # 32x32
  SIZE_39

  # 80x60
  SIZE_40

  # 467x467
  SIZE_41

  # 225x70
  SIZE_42

  # 221x330
  SIZE_43

  # 425x34
  SIZE_44

  # 1200x1200
  SIZE_45

  # 623x290
  SIZE_47

  # 1024x1024
  SIZE_48

  # 200x170
  SIZE_49

  # 100x85
  SIZE_50

  # 90x90
  SIZE_51

  # 132x123
  SIZE_52

  # 190x100
  SIZE_53

  # 122x122
  SIZE_54

  # 286x214
  SIZE_55

  # 100x100
  SIZE_56

  # 1600x1600
  SIZE_57

  # 640x640
  SIZE_58

  # 960x960
  SIZE_59

  # 225x225
  SIZE_62

  # 300x120
  SIZE_65

  # 82x35
  SIZE_66

  # 728x90
  SIZE_67

  # 256x35
  SIZE_68

  # 120x60
  SIZE_69

  # 64x35
  SIZE_70

  # 55x55
  SIZE_71

  # 500x375
  SIZE_72

  # 65x65
  SIZE_73

  # 135x115
  SIZE_74

  # 430x325
  SIZE_75

  # 400x320
  SIZE_76

  # 72x54
  SIZE_77

  # 75x56
  SIZE_78

  # 320x240
  SIZE_79

  # 600x450
  SIZE_80

  # 92x72
  SIZE_81

  # 147x147
  SIZE_82

  # 358x358
  SIZE_83

  # 498x498
  SIZE_84

  # 726x726
  SIZE_85

  # 70x53
  SIZE_87

  # 175x130
  SIZE_88

  # 600x500
  SIZE_89

  # 220x220
  SIZE_90

  # 276x276
  SIZE_91

  # 560x420
  SIZE_92

  # 360x480
  SIZE_93

  # 280x210
  SIZE_94

  # 180x240
  SIZE_95

  # 205x75
  SIZE_96

  # 90x90
  SIZE_97

  # 180x170
  SIZE_98

  # 650x412
  SIZE_100

  # 107x88
  SIZE_101

  # 247x187
  SIZE_102

  # 180x180
  SIZE_103

  # 720x215
  SIZE_104

  # 980x340
  SIZE_105

  # 160x160
  SIZE_106

  # 1000x1000
  SIZE_107

  # 250x90
  SIZE_109

  # 462x360
  SIZE_110

  # 225x155
  SIZE_111

  # 225x195
  SIZE_112

  # 450x450
  SIZE_113

  # 67x67
  SIZE_114

  # 216x216
  SIZE_115

  # 250x250
  SIZE_116

  # 190x190
  SIZE_117

  # 275x275
  SIZE_118

  # 110x110
  SIZE_119

  # 170x170
  SIZE_120

  # 135x135
  SIZE_121

  # 440x420
  SIZE_134

  # 275x375
  SIZE_135

  # 120x80
  SIZE_136

  # 200x64
  SIZE_137

  # 200x42
  SIZE_138

  # 380x380
  SIZE_139

  # 1134x700
  SIZE_140

  # 156x156
  SIZE_141

  # 112x76
  SIZE_142
}

# Encapsulates all properties related to a profile image.
# Ex: url, profileImageType, width, height
type ProfileImage implements Image {
  # A profile image's URL.  A URL type.
  url: GenericURL

  # A profile image's type. A ProfileImageType type.
  type: ProfileImageType

  # A profile image's width
  width: String

  # A profile image's height
  height: String
}

# The Image interface encapsulates all properties related to an image.
# Ex: url, width, height
interface Image {
  # An Image's URL.
  url: GenericURL

  # The width of the image
  width: String

  # The height of the image
  height: String
}

# Encapsulates all properties related to a URL.
# Ex: protocol, host, port, hostname, query, href, etc.
# See https://nodejs.org/api/url.html#url_class_url for more details.
type GenericURL implements URL {
  # Protocol property of the URL (Ex: https:)
  protocol: String

  # If true, two forward slashes are required following the colon in the protocol
  slashes: Boolean

  # Username/password portion of the URL (Ex: user:pass)
  auth: String

  # Full lower-cased host portion of the URL (Ex: google.com:8000)
  host: String

  # Numeric port portion of the URL (Ex: 8000)
  port: String

  # Hostname portion of the URL.  Does not contain a port. (Ex: google.com)
  hostname: String

  # Fragment portion of the URL including the leading ASCII hash (#) character. (Ex: #hash)
  hash: String

  # Search property consists of the entire 'query string' portion of the URL,
  # including the leading ASCII question mark (?) character. (Ex: ?key=value)
  search: String

  # Query string of the URL.  Does not include the leading question mark (?) character. (Ex: key=value)
  query: String

  # Query params of the URL, as an Object
  queryParams: JSON

  # Path portion of the URL, but does not include the query string. (Ex: /path)
  pathname: String

  # Path portion of the URL which includes the query string. (Ex: /path?key=value)
  path: String

  # The serialized, full URL with all properties included. (Ex: https://google.com/path?key=value#hash)
  href: String
}

# Encapsulates all properties related to a URL.
# Ex: protocol, host, port, hostname, query, href, etc.
# See https://nodejs.org/api/url.html#url_class_url for more details.
interface URL {
  # Protocol property of the URL (Ex: https:)
  protocol: String

  # If true, two forward slashes are required following the colon in the protocol
  slashes: Boolean

  # Username/password portion of the URL (Ex: user:pass)
  auth: String

  # Full lower-cased host portion of the URL (Ex: google.com:8000)
  host: String

  # Numeric port portion of the URL (Ex: 8000)
  port: String

  # Hostname portion of the URL.  Does not contain a port. (Ex: google.com)
  hostname: String

  # Fragment portion of the URL including the leading ASCII hash (#) character. (Ex: #hash)
  hash: String

  # Search property consists of the entire 'query string' portion of the URL,
  # including the leading ASCII question mark (?) character. (Ex: ?key=value)
  search: String

  # Query string of the URL.  Does not include the leading question mark (?) character. (Ex: key=value)
  query: String

  # Query params of the URL, as an Object
  queryParams: JSON

  # Path portion of the URL, but does not include the query string. (Ex: /path)
  pathname: String

  # Path portion of the URL which includes the query string. (Ex: /path?key=value)
  path: String

  # The serialized, full URL with all properties included. (Ex: https://google.com/path?key=value#hash)
  href: String
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# Encapsulates all properties related to a User's auth.
# Ex: Access token
# Average SLA response time - x ms
#
# Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
type Auth {
  # A user's access token
  accessToken: String

  # A user's refresh token
  refreshToken: String

  # A user's id token
  idToken: String

  # A user's auth code
  authCode: String

  # Url to run user through connect flow
  connectUrl(
    token: String!
    scopes: [String]!
    fundingSource: String
    billingType: String
    payerId: String
  ): GenericURL
}

# Encapsulates all properties related to a Cart.
# Ex: cancelUrl, returnUrl, merchant, total, etc.
# Average SLA response time - 170ms
type Cart {
  # Cart's ID (Ex: '9CH70521YP797774F')
  cartId: String

  # Billing token, for billing agreement transactions (Ex: 'BA-12345678901234567')
  billingToken: String

  # Billing type, for billing agreement transactions (Ex: 'MERCHANT_INITIATED_BILLING', 'CHANNEL_INITIATED_BILLING')
  billingType: BillingType

  # Billing intent, for billing without purchase flow integration (Ex: 'VAULT')
  billingIntent: BillingIntent

  # Billing Charge pattern, for billing agreement transactions (Ex: 'IMMEDIATE', 'DEFERRED')
  billingChargePattern: BillingChargePattern

  # Consent code, is part of oAuth context from merchant
  consentCode: String

  # Payment ID, if transaction has one. (Ex: 'PAY-12345678901234567')
  paymentId: String

  # A Cart's amounts.
  amounts: CartAmounts

  # A Cart's description.
  description: String

  # A Cart's associated shipping address passed by merchant.
  shippingAddress: CartShippingAddress

  # A Cart's associated billing address passed by merchant.
  billingAddress: CartAddress

  # A Cart's associated shipping options passed by merchant.
  shippingMethods: [CartShippingMethod]

  # Cart's associated phone number passed by the merchant (Ex: '1112223333')
  # Returns international phone format
  formattedPhoneNumber(
    shouldValidate: Boolean = true
    useInternationalFormat: Boolean = true
  ): String

  # Cart's associated phone number passed by the merchant (Ex: '1112223333')
  # If shouldValidate is true then only numbers that pass validation will be returned
  phoneNumber(
    stripDialingCode: Boolean = false
    shouldValidate: Boolean = true
  ): String

  # Cart's associated email passed by the merchant (Ex: dev@paypal.com)
  email: Email

  # Cart's cancel URL (Ex: www.merchant.com/cancel.html)
  cancelUrl: GenericURL

  # Cart's intent (Ex: 'SALE').
  intent: CartIntent

  # A Cart's items.
  items: [CartItem]

  # The seller supplied note to the buyer.
  noteToBuyer: String

  # Cart's return URL (Ex: www.merchant.com/thanks.html)
  returnUrl: GenericURL

  # Cart's soldout URL (Ex: www.merchant.com/soldout.html)
  soldoutUrl: String

  # Cart's sold out flag, when sold out page should be presented
  showSoldoutPage: Boolean

  # Cart's state (Ex: 'CREATED')
  state: CartState

  # A Cart's total amount.
  total: Amount

  # Total Quantity of the items in the cart. Returns 0 for no cart items or error during calculation
  totalQuantity: String

  # Total amount we allow for over captures in a transaction. The predicted amount comes from PAPS -> EDM
  totalAllowedOverCaptureAmount: Amount

  # Items' category in the Cart. (e.g. PHYSICAL, DIGITAL, DONATION)
  category: CartCategory

  # A payer information sellers supply when creating the checkout session
  payer: SuppliedUserInfo

  # All payees information
  payees: [Payee]
    @deprecated(
      reason: "Cart.payees has been deprecated because it is not related to cart specific data. Use CheckoutSession.payees instead."
    )

  # Supplementary Data in the Cart
  supplementary: Supplementary

  # A Cart's associated buyer.
  # Required Roles: LOGGEDIN, REMEMBERED, IDENTIFIED
  # A Cart's associated shipping address passed by merchant.
  buyer: User
    @deprecated(
      reason: "Cart.buyer has been deprecated because it is not related to cart specific data. Use CheckoutSession.buyer instead."
    )
}

# Enumeration to identify different billing types
enum BillingType {
  # Partner initiated billing type.
  CHANNEL_INITIATED_BILLING

  # Merchant initiated billing type. Default billing type
  MERCHANT_INITIATED_BILLING

  # Merchant initiated billing type but agreement already exists between buyer and merchant
  MERCHANT_INITIATED_SINGLE_BILLING

  # Partner initiated billing type
  CHANNEL_INITIATED_BILLING_SINGLE_AGREEMENT
}

# An enumeration of types that a BillingIntent can be.
enum BillingIntent {
  # VAULT integration
  VAULT

  # All Other integrations
  OTHER
}

# Enumeration to identify different billing charge patterns
# The pattern in which the agreement will be used for charging.
enum BillingChargePattern {
  # Pay after use, non-recurring post-paid, variable amount, irregular frequency.
  DEFERRED

  # On-demand instant payments – non-recurring , pre-paid, variable amount, variable frequency.
  IMMEDIATE

  # Pay on a fixed date based on usage or consumption after the goods/service is delivered.
  RECURRING_POSTPAID

  # Pay upfront fixed or variable amount on a fixed date before the goods/service is delivered.
  RECURRING_PREPAID

  # Charge payer when the set amount is reached or monthly billing cycle,
  # whichever comes first, after the goods/service is delivered.
  THRESHOLD_POSTPAID

  # Charge payer when the set amount is reached or monthly billing cycle,
  # whichever comes first, before the goods/service is delivered.
  THRESHOLD_PREPAID
}

# Encapsulates all properties related to a cart item.
# Ex: description, quantity, amount
# Average SLA response time - 170ms
type CartAmounts {
  # A Cart's discount.
  discount: Amount

  # A Cart's handling fee.
  handlingFee: Amount

  # A Cart's insurance fee.
  insurance: Amount

  # A Cart's Insurance and handling fee combined
  insuranceAndHandling: Amount

  # A Cart's shipping fee.
  shipping: Amount

  # A Cart's combined shipping and handling fee. A sum of the shipping fee (with
  # shipping discount applied) and the handling fee.
  shippingAndHandling: Amount

  # A Cart's shipping discount.
  shippingDiscount: Amount

  # A Cart's Shipping and Shipping Discount
  shippingAndShippingDiscount: Amount

  # A Cart's subtotal amount.
  subtotal: Amount

  # A Cart's tax amount.
  tax: Amount

  # Flag indicating when to hide amount details
  hideAmountDetails: Boolean

  # A Cart's total amount.
  total: Amount
}

# Encapsulates all properties related to an Amount.
# Ex: currencySymbol, currencyValue, currencyCode, etc.
type Amount {
  # Amount's currency code (Ex: 'USD', 'HUF')
  currencyCode: SupportedCountryCurrencies

  # Amount's formatted currency symbol and value (Ex: '$0.01', 'Ft10')
  currencyFormat: String

  # Amount's formatted currency symbol, value, and code (Ex: '$0.01 USD', 'Ft10 HUF')
  currencyFormatSymbolISOCurrency: String

  # Amount's currency symbol (Ex: '$', 'Ft')
  currencySymbol: String

  # Amount's currency value without format(Ex: '0.01', 10.00')
  currencyValue: String
}

# Encapsulates all properties related to a shipping address
# attached to a cart by merchant
type CartShippingAddress {
  # Buyer's first name (Ex: 'John')
  firstName: String

  # Buyer's last name (Ex: 'Smith')
  lastName: String

  # A shipping address first line street address (Ex: '2211 North 1st St')
  line1: String

  # A shipping address second line street address (Ex: 'Apt 123')
  line2: String

  # A shipping address city (Ex: 'San Jose')
  city: String

  # A shipping address state/province (Ex: 'CA')
  state: String

  # A shipping address postal code (Ex: '95131')
  postalCode: String

  # A shipping address two-letter country code (Ex: 'US')
  country: CountryCodes

  # Address is full address
  isFullAddress: Boolean

  # Flag for ship to store
  isStoreAddress: Boolean
}

# Encapsulates all properties related to a address
# attached to a cart by merchant
type CartAddress {
  # Buyer's first name (Ex: 'John')
  firstName: String

  # Buyer's last name (Ex: 'Smith')
  lastName: String

  # A shipping address first line street address (Ex: '2211 North 1st St')
  line1: String

  # A shipping address second line street address (Ex: 'Apt 123')
  line2: String

  # A shipping address city (Ex: 'San Jose')
  city: String

  # A shipping address state/province (Ex: 'CA')
  state: String

  # A shipping address postal code (Ex: '95131')
  postalCode: String

  # A shipping address two-letter country code (Ex: 'US')
  country: CountryCodes

  # Address is full address
  isFullAddress: Boolean
}

# Encapsulates all properties related to a shipping method.
# attached to a cart by merchant
type CartShippingMethod {
  # Unique identifier for the option
  id: String

  # Category, or type. ('SHIPPING' or 'PICKUP')
  type: ShippingMethodType

  # Custom display name (Ex: '2-Day Shipping')
  label: String

  # Amount value for this method
  amount: Amount

  # Whether or not the this method is selected
  selected: Boolean
}

# Types, or categories for ShippingMethods to have.
enum ShippingMethodType {
  # Ship to home address
  SHIPPING

  # Pick up at location
  PICKUP
}

# An enumeration of intents that a Cart can have. SALE, AUTHORIZE, or ORDER
enum CartIntent {
  # The Cart's intent is for Sale transactions
  SALE

  # The Cart's intent is for Capture transactions
  CAPTURE

  # The Cart's intent is for Authorization transactions. Same as AUTHORIZE.
  AUTHORIZATION

  # The Cart's intent is for Auth transactions
  AUTHORIZE

  # The Cart's intent is for Order transactions
  ORDER
}

# Encapsulates all properties related to a cart item.
# Ex: description, quantity, amount
# Average SLA response time - 170ms
type CartItem {
  # Cart item's description (Ex: 'Medium, Light Grey, V-Neck T-Shirt')
  description: String

  # Cart item's details.  Any extra metadata passed by the Merchant.
  details: JSON

  # Cart item's name (Ex: 'Wolf T-Shirt')
  name: String

  # Cart item's quantity (Ex: 1)
  quantity: Float

  # Cart item's unit price.
  unitPrice: Amount

  # Cart item's total amount.
  total: Amount

  # Cart item's number
  number: String
    @deprecated(
      reason: "Instead of using the number, use item's SKU (stock keeping unit) number instead"
    )

  # Cart item's SKU number
  sku: String

  # Set of selected options for the item. (Ex: name: 'Size', select: 'Large')
  itemOptionSelections: [ItemOptionSelection]
}

# Encapsulates all properties related to an item's option selection.
type ItemOptionSelection {
  # The name of option field (ex: 'Color').
  name: String!

  # The description of the selected value (ex: 'Blue') '
  description: String!
}

# An enumeration of states that a Cart can be in.
# CREATED, APPROVED, FAILED or SUBMITTED
enum CartState {
  # A Cart was created
  CREATED

  # A Cart was approved
  APPROVED

  # A Cart is failed
  FAILED

  # A Cart was submitted
  SUBMITTED
}

# An enumeration of cart category, defined by item category in the cart.
# DONATION
enum CartCategory {
  # If item category is PHYSICAL.
  PHYSICAL

  # If item category is DIGITAL.
  DIGITAL

  # If item category is DONATION.
  DONATION
}

# User's associated information passed by the merchant"
type SuppliedUserInfo {
  # Cart's associated name passed by the merchant
  name: PersonName

  # Cart's associated email passed by the merchant
  email: Email

  # Cart's associated phone passed by the merchant
  phone: GenericPhone

  # Metadata related to the information passed by the merchant
  evaluatedUserData: GuestUserMetadata
}

# "Fields that provide additional information about a Payer"
type GuestUserMetadata {
  # "Whether a provided email address belongs to a User account"
  emailHasExistingAccount: Boolean!
}

# Data, Ex: merchantId, email of all payees in a cart"
type Payee {
  # Merchant's ID (Ex: '7VJPAEVGH7B6A')
  merchantId: String

  # Merchant's email address
  email: Email
}

# Encapsulates all supplementary data present in the Cart.
type Supplementary {
  # The initiation intent for this cart
  initiationIntent: CartIntent
}

# Encapsulates all flags related to a Checkout session.
# Ex: isBillingAgreement, isVZeroIntegration, etc.
type CheckoutSessionFlags {
  # Indicates whether user can add a card without a billing address for the given country
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  allowAddresslessAddCard(country: CountryCodes): Boolean

  # Indicates whether the user is allowed to change payment methods
  allowChangePaymentMethod: Boolean

  # Indicates whether international shipping is blocked or not
  blockNonDomesticShipping: Boolean

  # Indicates whether non-domestic cards are blocked for the transaction.
  blockNonDomesticCards: Boolean

  # Indicates whether non-domestic transactions are blocked
  blockNonDomesticPayer: Boolean

  # Flag indicating that the buyer has given the consent for promotional emails.
  hasBuyerConsentedToPromotionalEmail: Boolean

  # Indicates when a transaction supports PayPal Credit payment installations, based on buyer and merchant eligibility.
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  hasPPCreditInstallments: Boolean

  # Indicates when the user has entered Checkout through a "PayPal Credit" button
  isCreditSecondButton: Boolean

  # Indicates when the user has entered Checkout through a "Pay Later" button
  hasPayLaterIntent: Boolean

  # Indicates the entire cart (amount and details) should be hidden.
  hideCart: Boolean

  # Indicates the cart details should be hidden.
  hideCartDetails: Boolean

  # Indicates whether the merchant has passed the hide_cart_details flag.
  hideCartDetailsFlag: Boolean

  # Indicates whether the txn is a multi seller purchase.
  isMultiSellerPurchase: Boolean

  # Predicts when the shipping address should be hidden.
  # Note: this is an optimistic flag and _usually_ means that
  # the checkout session will **not** have a selected address.
  #
  # Required auth states: Any
  hideShipping: Boolean

  # A contingency for if the 3D Secure (3DS) flow is required.
  # If required, it must be resolved before approving the payment.
  # Average SLA response time - 1750ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  is3DSecureRequired: Boolean

  # Flag indicating whether PayPal Balance is disallowed as FI or not.
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  isBalanceDisallowed: Boolean

  # A flag to check if the checkoutSession contains INCENTIVE.
  # Average SLA response time - 1750ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  isIncentivePresent: Boolean

  # Flag indicating whether the billing address of the Payer can be shared or not.
  isBillingAddressConsentRequired: Boolean

  # Whether or not a checkout session is a Billing Agreement.  A Boolean.
  #
  # Required auth states: Any
  isBillingAgreement: Boolean

  # Whether or not changing a shipping address in a Checkout session is allowed.  A Boolean.
  #
  # Required auth states: Any
  isChangeShippingAddressAllowed: Boolean

  # Whether or not sharing address with merchant is optional. A Boolean.
  # For a donation transaction, we should not share user's address unless we
  # get user's consent to do so.
  #
  # Required auth states: Any
  isOptionallyShareAddress: Boolean

  # Whether or not the current transaction is a donation.
  #
  # Required auth states: Any
  isDonation: Boolean

  # Whether or not a checkout session is a Digital Goods integration. A Boolean.
  #
  # Required auth states: Any
  isDigitalGoodsIntegration: Boolean

  # Whether or not a payment is eligible to be paid by a Guest.  A Boolean.
  #
  # Required auth states: Any
  isGuestEligible(fundingSource: ButtonFundingSourceType): Boolean

  # Whether or not a payment is eligible for inlined fields by a Guest.  A Boolean.
  #
  # Required auth states: Any
  isHostedFieldsAllowed: Boolean!

  # Whether or not a payment is eligible for installments.  A Boolean.
  #
  # Required auth states: Any
  isInstallmentsEligible: Boolean

  # Indicates whether shipping address is required
  isShippingAddressRequired: Boolean

  # Whether or not a payment is eligible to be paid by a Guest that signs up.  A Boolean.
  #
  # Required auth states: Any
  isSignupEligible(fundingSource: ButtonFundingSourceType): Boolean

  # Whether or not a guest is eligible for upgrade to member.  A Boolean.
  isGuestEligibleForUpgrade(fundingSource: ButtonFundingSourceType): Boolean
    @deprecated(reason: "created a new query isGuestUpgradeableToMember")

  # Whether or not Shipping and Taxes are supported in the checkout flow. A Boolean.
  isSntSupported: Boolean

  # Whether or not a guest is eligible for signup incentives. A Boolean
  isSignupIncentiveEligible: Boolean

  # Whether or not a funding instrument is PAD preferred by the user when PAD is enabled. A Boolean.
  isPadPreferred: Boolean

  # Whether or not a checkout session is a V.Zero (Braintree) integration. A Boolean.
  #
  # Required auth states: any
  isVZeroIntegration: Boolean

  # Indicates whether or not the flow is a WPS (Website Payments Standard) flow.
  isWPS: Boolean

  # Indicates whether or not the flow is a WPS (Website Payments Standard) subscription flow.
  isWpsSubscription: Boolean

  # Indicates whether or not the flow is a WPS (Website Payments Standard) autobilling flow.
  isWpsAutobilling: Boolean

  # Indicates whether or not the flow is a WPS (Website Payments Standard) installment plan flow.
  isWpsInstallmentPlan: Boolean

  # Indicates whether or not the flow requires to disclose RTR text.
  showRemittanceDisclosure: Boolean

  # Indicates whether or not the flow is an invoicing flow.
  isInvoiceFlow: Boolean

  # Flag indicating if processor has previously declined for this token
  processorDeclined: Boolean

  # Indicates when a PayPal Credit offer should be presented.
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  showPPCreditOffer: Boolean

  # Indicates when a credit offer should be shown to the user for second button
  #
  # Required auth states: LOGGEDIN, REMEMBERED or IDENTIFIED
  isEligibleForCreditSecondButton: Boolean

  # Indicates when a checkout session requires a patch CVV call.
  #
  # Required auth states: Any
  isCvvConfirmationRequired: Boolean

  # Indicates if FRS(Free Return Shipping) is applicable for the Merchant.
  isFrsApplicable: Boolean
    @deprecated(
      reason: "Org wide effort to remove FRS due to high costs and low usage"
    )

  # Indicates if it is allowed to create billing agreement without backup funding source or not
  allowBillingAgreementWithoutBackupFundingSource: Boolean

  # Indicates if it is legacy billing integration or not
  isLegacyBillingIntegration: Boolean

  # Indicates if set Sticky FI is allowed for the merchant
  setStickyBillingAllowed: Boolean

  # Indicates billing payment experience, ex: 'HERMES'
  paymentExperience: BillingPaymentExperience

  # Contextual consent eligibility for PayPal on File Experiment
  isContextualConsentEligibilityMet: Boolean
}

# Types of client config button funding source
enum ButtonFundingSourceType {
  # Apple Pay
  applepay

  # Bancontact
  bancontact

  # Blik
  blik

  # Boleto
  boleto

  # Boletobancario
  boletobancario

  # Card
  card

  # Credit
  credit

  # Elv
  elv

  # EPS
  eps

  # GiroPay
  giropay

  # Ideal
  ideal

  # Maxima
  maxima

  # Mercadopago
  mercadopago

  # MyBank
  mybank

  # OXXO
  oxxo

  # P24
  p24

  # PayPal
  paypal

  # Pay Later
  paylater

  # PayU
  payu

  # Sepa
  sepa

  # SoFort
  sofort

  # Trustly
  trustly

  # Venmo
  venmo

  # WeChatPay
  wechatpay

  # Zimpler
  zimpler

  # Multibanco
  multibanco

  # Satispay
  satispay

  # Paidy
  paidy
}

# An enumeration of types that a billing payment experience can be.
enum BillingPaymentExperience {
  # HERMES experience
  HERMES

  # HERMESNODE experience
  HERMESNODE
}

# Encapsulates details of the declined instrument
type DeclinedInstrument {
  # Indicates the type of the funding instrument
  type: FundingOptionType!

  # Funding option's ID (Ex: 'BA8JUE35JC6JBU4')
  # This differs from ID because ID will sometimes have an extra
  # keyword appended
  id: ID

  # Funding option's name (Ex: 'BANK OF AMERICA')
  name: String

  # Last digits of a credit card
  lastDigits: String

  # Declined instrument's issuer product description. This is the card issuer's
  # product and brand information. For Example, Chase Sapphire Reserve.
  issuerProductDescription: String

  # Indicates how the funding instrument is declined
  declineType: DeclinedInstrumentType

  # Indicates the reason for the instrument's decline
  declineReason: String!

  # The card art image
  #
  # Takes optional input for image size and type
  image(size: SquareImageSize = S, type: ImageType = png): CardImage

  # Normalized processor response for the decline reason from issuer
  normalizedProcessorResponse: String

  # Partial fpan is a flag from PAPS for determining
  # whether we have only partial funding PAN so we need to replace FI record
  # or we have full funding PAN so we need to add FI record
  partialFpan: Boolean
}

# An enumeration of types that FundingOption can have.
# BANK_ACCOUNT, CREDIT_CARD, PAYPAL_BALANCE, PAYPAL_CREDIT, etc.
enum FundingOptionType {
  # Bank Account
  BANK_ACCOUNT

  # Credit Card
  CREDIT_CARD

  # Cryptocurrency
  CRYPTOCURRENCY

  # Debit Card
  DEBIT_CARD

  # Incentive
  INCENTIVE

  # PayPal Balance
  PAYPAL_BALANCE

  # PayPal Credit
  PAYPAL_CREDIT

  # Private Label Credit Card
  PRIVATE_LABEL_CREDIT_CARD

  # Rewards
  REWARDS

  # Standalone reward
  STANDALONE_REWARDS

  # Pay_Token
  PAY_TOKEN

  # Pay Later
  PAY_LATER

  # Bill Me Later
  BILL_ME_LATER
}

# An enumeration of types that FundingOption can have.
# PROCESSOR_DECLINE, PAYPAL_ELIGIBILITY or PREAUTH
enum DeclinedInstrumentType {
  # DO_EC issuer decline
  PROCESSOR_DECLINE

  # DO_EC PayPal credit DO_EC decline
  PAYPAL_ELIGIBILITY

  # CC Preauthorization decline
  PREAUTH
}

# Size of an image
enum SquareImageSize {
  # Extra extra small 32x32 px
  XXS

  # Extra small 50x50 px
  XS

  # Small 96x96 px
  S

  # Medium 200x200 px
  M

  # Large 300x300 px
  L

  # Extra large 400x400 px
  XL

  # Extra extra large 500x500 px
  XXL

  # Extra extra extra large 800x800 px
  XXXL
}

# Type of image
#
# `jpg`, `png`, etc
enum ImageType {
  # jpg image
  jpg

  # png image
  png

  # gif image
  gif
}

# Encapsulates the card art image data
# Contains the card art image and its dimensions
type CardImage implements Image {
  # An image's URL. A URL type.
  url: GenericURL

  # An image's width in pixels (number value only)
  width: String

  # An image's height in pixels (number value only)
  height: String
}

# Encapsulates details of a disallowed instrument
type DisallowedInstrument {
  # Indicates the type of the given disallowed funding instrument (Ex: 'BALANCE')
  type: FundingOptionType

  # Indicates the reason for the current disallowed funding instrument
  reason: String!

  # Funding instrument's ID (Ex: 'BA8JUE35JC6JBU4')
  id: ID

  # Funding instrument's name. This is the raw response, and should be treated more
  # as a code, if the client wants to do some logic based on the specific name of
  # the instrument.
  # (Ex: 'BANK OF AMERICA')
  name: String

  # Funding instrument's mapped name. This can be used as a display name. Currently
  # does not use localization.
  # (Ex: 'BILL_ME_LATER' -> 'PayPal Credit', label: disallowedToallowedMap[name] || name)
  label: String

  # Funding instrument's formatted type (Ex: 'Bank')
  formattedType: String

  # Funding instrument's sub type of it's `type`.
  # (EX: 'CREDIT', 'DEBIT', 'CHECKING', 'SAVINGS').
  instrumentSubType: FundingInstrumentSubType

  # Indicates if the disallowed instrument is the preferred funding instrument
  isPreferred: Boolean

  # Funding instrument's last 4 digits (Ex: '3071')
  lastDigits: String

  # The card art image
  #
  # Takes optional input for image size and type
  image(size: SquareImageSize = S, type: ImageType = png): CardImage
}

# Subtype of Funding Instrument (more descriptive than FundingInstrumentType)
enum FundingInstrumentSubType {
  # Checking account (Bank)
  CHECKING

  # Savings account (Bank)
  SAVINGS

  # PayPal Balance
  BALANCE

  # Credit Card
  CREDIT

  # Debit Card
  DEBIT

  # PayPal Credit
  PAYPAL

  # Prepaid Card
  PREPAID

  # Merchant Card/Balance
  MERCHANT

  # Incentive
  INCENTIVE

  # PayPal Specific Incentive
  PAYPAL_SPECIFIC_BALANCE

  # Merchant Specific Incentive
  MERCHANT_SPECIFIC_BALANCE

  # Cryptocurrency
  CRYPTOCURRENCY

  # Honey gold
  HONEY_GOLD

  # Unknown
  UNKNOWN
}

# Instrument types that can be grouped
enum FundingOptionGroupingType {
  # Incentive
  INCENTIVE
}

# A funding option encompasses a `fundingInstrument` that can be used to fully
# cover the transaction, and the different `plans` that use that funding instrument.
#
# For details of the funding instrument, like name and lastDigits, query the
# `fundingInstrument` field.
#
# For details of the options for how the funding instrument can be charged, query
# the `allPlans` field.
type FundingOption {
  # The ID of the funding option's `fundingInstrument`.
  id: ID

  # The funding option's funding instrument. All plans of this `FundingOption`
  # are based on this funding instrument.
  fundingInstrument: FundingInstrument!

  # Available amount of the funding option (currently only applies to PAYPAL_BALANCE)
  availableAmount: Amount

  # Plans that are associated with the funding instrument of this funding option.
  # Each plan is a different option that can be used with the funding instruments
  # in order to pay with the transaction.  Each of the plans will contain the
  # funding instrument as a funding source, but may also include other funding
  # sources with different funding instruments as well.
  allPlans: [Plan]

  # Funding option's associated plans
  plans: PlanTypes
    @deprecated(
      reason: "Migrating this data into allPlans, because return type changed to array of Plans."
    )

  # Funding option's ID (Ex: 'BA8JUE35JC6JBU4')
  fundingOptionId: String
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's name (Ex: 'BANK OF AMERICA')
  name: String
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's mapped name (Ex: 'BILL_ME_LATER' -> 'PayPal Credit', label: disallowedToallowedMap[name] || name)
  label: String
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's type (Ex: 'BANK')
  type: FundingOptionType
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's formatted type (Ex: 'Bank')
  formattedType: String
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's sub type (Ex: 'IACH')
  subType: FundingOptionSubType
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # Funding option's last 4 digits (Ex: '3071')
  lastDigits: String
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # If a funding option is preferred by the user
  isPreferred: Boolean
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument and Plans. Look in `fundingInstrument` for this field."
    )

  # If a funding option is selected by the user
  isSelected: Boolean
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument\nand Plans. Look in `allPlans` for this field, to see which plan is selected."
    )

  # Funding option's amount.
  amount: Amount
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument\nand Plans. Amount can change depending on the plan and source used - look\nat `allPlans.fundingSources.amount` to find the amount charged for each\nfunding source."
    )

  # Funding option's currency conversion information
  currencyConversion: CheckoutCurrencyConversion
    @deprecated(
      reason: "FundingOption is being repurposed into a container for a FundingInstrument\nand Plans. Currency conversion can be found at `allPlans.currencyConversion`."
    )
}

# Encapsulates all properties related to a FundingInstrument.
# Ex: name, type, lastDigits, amount, etc.
type FundingInstrument {
  # Funding instrument's ID (Ex: 'BA8JUE35JC6JBU4')
  id: ID

  # Funding instrument's name. This is the raw response, and should be treated more
  # as a code, if the client wants to do some logic based on the specific name of
  # the instrument.
  # (Ex: 'BANK OF AMERICA')
  name: String

  # Funding instrument's mapped name. This can be used as a display name. Currently
  # does not use localization.
  # (Ex: 'BILL_ME_LATER' -> 'PayPal Credit', label: disallowedToallowedMap[name] || name)
  label: String

  # Funding instrument's nickname to be displayed. If nickname doesn't exist,
  # returns funding instrument's issuer product description which is the card
  # issuer's product and brand information.
  # (Ex: 'My card acc' || 'Chase Sapphire Reserve' )
  nameDescription: String

  # Funding instrument's type (Ex: 'BANK')
  type: FundingOptionType

  # Funding instrument's formatted type (Ex: 'Bank')
  formattedType: String

  # Funding instrument's sub type of it's `type`.
  # (EX: 'CREDIT', 'DEBIT', 'CHECKING', 'SAVINGS').
  instrumentSubType: FundingInstrumentSubType

  # Funding instrument's last 4 digits (Ex: '3071')
  lastDigits: String

  # Additional data required to present the Credit Installment funding option
  creditFields: CreditAsFI

  # Additional data required to present the Credit Installment funding option
  creditFIAdditionalData: CreditAsFIOffer
    @deprecated(
      reason: "Renamed to use `creditFields` instead to better match good graphQL schema practices."
    )

  # The card art image
  #
  # Takes optional input for image size and type
  image(size: SquareImageSize = S, type: ImageType = png): CardImage

  # The related institution images
  #
  # Takes optional input for image category, size, and type
  institutionImages(
    category: InstitutionCategory
    size: SquareImageSize = S
    type: ImageType = png
  ): [InstitutionImage]

  # Attributions are data that can be associated with a financial instrument that
  # can influence a user to select that instrument. This may be a message that
  # reminds the user of special incentive such as an extra 5% back on purchases
  # made using the card.
  #
  # > Example: *"Earn 5% Cashback Bonus on up to $1,500 in qualifying PayPal and
  # more purchases from 7/1/19 – 9/30/19, if activated.  For Discover it® and
  # Discover® More® card members only."*
  attribution: String
    @deprecated(
      reason: "New object attributionDetails is already added in FndingInstrument which holds attribution related information."
    )

  # Attributions are data that can be associated with a financial instrument that
  # can influence a user to select that instrument. This may be a message that
  # reminds the user of special incentive such as an extra 5% back on purchases
  # made using the card.
  attributionDetails: AttributionDetails

  # If a funding instrument is preferred by the user
  isPreferred: Boolean

  # The rewards information for a specific card. Rewards can be in the form of
  # points or miles, etc and can be used to fund all or part of the transaction.
  #
  # The rewards info contains:
  # - how many rewards are available for use
  # - what the conversion is from rewards to amount
  # - any constraints such as limits
  rewards: Rewards

  # Contains details for CRYPTOCURRENCY type instruments
  cryptocurrencyHoldingDetails: CryptocurrencyHoldingDetails

  # Additional data required to display disclaimers for specific cards (Ex: 'COBRANDED')
  payerDisclaimer: PayerDisclaimer

  # Available installment options.
  # An Array of Installments types.
  installments: [Installments]

  # Contains additional details for INCENTIVE type instruments
  incentiveDetails: Offer

  # Billing without purchase constraint for smart auth
  constraint: Constraint

  # If a funding option is a stcky FI
  isSticky: Boolean

  # Funding option's sub type (Ex: 'IACH')
  subType: FundingOptionSubType
    @deprecated(
      reason: "Subtype as in IACH/DELAYED should be read from `FundingSource.subType`. Subtype as in DEBIT/CREDIT/SAVINGS/CHECKING should be read from `instrumentSubType`."
    )

  # Funding option's ID (Ex: 'BA8JUE35JC6JBU4')
  fundingOptionId: String
    @deprecated(
      reason: "Renamed to use `id` instead to better match good graphQL schema practices."
    )

  # Funding option's amount.
  amount: Amount
    @deprecated(
      reason: "Read amount from a Plan that contains this FundingInstrument instead, as the amount charged to the FundingInstrument can change depending on the Plan being used."
    )

  # Funding instrument's issuer product description. This is the card issuer's
  # product and brand information. For Example, Chase Sapphire Reserve.
  issuerProductDescription: String
    @deprecated(
      reason: "Replaced by `nameDescription`. `nameDescription` returns `issuerProductDescription` when fi nickname is not present."
    )
}

# Encapsulates all properties related to a credit as a Funding Instrument.
type CreditAsFI {
  # Encapsulates all properties related to a credit as FI offer
  creditOffer: CreditAsFIOffer

  # Total fee for installments
  # repaymentInstrument is not applicable for PPC
  repaymentInstrument: FundingInstrument
}

# Encapsulates all properties related to a credit as FI offer for the RYI page.
# Average SLA response time - 50ms - (This might change)
type CreditAsFIOffer {
  # A marketing offer's reference ID.
  referenceId: String

  # Rank of this specific offer within the overall list.  Rank will not necessarily
  # be consecutive if other touchpoints had higher priorities.
  rank: Int

  # PresentmentType for offer i.e. radio/banner
  presentmentType: CreditPresentmentType

  # Credit product associated with this offer. For example Pay later, PayPal Credit, etc.
  product: CreditProductType

  # Offer Category i.e. ACQ, reuse etc
  offerCategory: CreditOfferCategoryType

  # Credit Offer Type i.e. CORE, SAC, INST, EZP etc
  creditOfferType: CreditOfferType

  # Financing code is the id for a particular offer returned by credit financing serv.
  financingCode: String

  # All the Cross Currency related information
  crossCurrencyInfo: CreditCrossCurrency

  # Offer ID for the offer returned by crcofferserv
  # crcOfferId is not applicable for PPC
  crcOfferId: String

  # All the UI Elements data (offer, RYI etc)
  uiElements: CreditUIElements

  # All the Credit PayLater Product deatils
  # creditPayLater is not applicable for PPC
  creditPayLater: CreditPayLater

  # Uitilities for tracking this offer and the user's interaction with it
  trackingDetails: MorsMRTrackingDetails
}

# An enumeration of types that an CreditPresentmentType can be. RADIO, BANNER, etc.
enum CreditPresentmentType {
  # Radio Presentment Type
  Radio

  # Banner Presentment Type
  Banner
}

# An enumeration of types that an CreditProductType can be. GPL, PPC, CO-BRAND, etc.
enum CreditProductType {
  # Credit card installments
  CREDIT_CARD_INSTALLMENTS

  # Global Pay Later
  GPL

  # Pay upon invoice
  PUI

  # PayPal Credit
  PPC
}

# An enumeration of types that an CreditOfferCategoryType can be. ACQ, REUSE, etc.
enum CreditOfferCategoryType {
  # An acquisition banner
  ACQ

  # A reuse banner for credit
  REUSE
}

# An enumeration of types that an CreditOfferType can be. INST, NI, CORE, etc.
enum CreditOfferType {
  # Installment offer type
  INST

  # Core offer type
  CORE

  # NO Interest offer type
  NI

  # Pay As Low As offer type
  PALA

  # Easy Pay offer type
  EZP

  # Pay Upon Invoice
  PUI
}

# Encapsulates all properties related Cross Currency.
# Ex: rate, to, rate, etc.
type CreditCrossCurrency {
  # Conversion rate offered by PayPal upto 10 decimals(Eg: 1.511645640091386)
  currencyConversionRate: String

  # Formatted rate as per forex format decimals mostly 5 (Eg: 1.51165)
  toFormattedCurrencyConversionValue: String

  # Honour FX Id or AuditTrail Id
  fxAuditTrailId: String

  # Currency to which amount converted (Eg. 1,00 in the case of fr_FR)
  fromFormattedCurrencyConversionValue: String

  # Currency to which conversion offered (Eg. EUR in the case of GPL/FR)
  fromCurrencyCode: SupportedCountryCurrencies

  # Currency from which conversion offered (Eg. USD in the case of USD transaction for GPL/FR)
  toCurrencyCode: SupportedCountryCurrencies

  # Descriptor text for PayPal Rate (Eg: PayPal rate:)
  rateDescriptor: String

  # Learn More Text to be used as link text
  learnMoreText: String

  # Learn More url to be redirected when clicked on Learn More Text
  learnMoreLink: String

  # Descriptor text for cross currency with Details on the validity of the offered rate
  currencyConversionDescriptor: String
}

# Encapsulates all properties related to all the RYI pages.
type CreditUIElements {
  # Data related to offer
  creditOffer: CreditFIUIProperties

  # Data required to display specialized credit installments only RYI
  creditOnlyFI: CreditFIUIProperties

  # Data required to display credit installments FI with other FIs on return RYI
  creditFI: CreditFIUIProperties

  # Highlight Text for offer
  fiHighlightText: String

  # Indicates whether this is a multi-offer message
  # GPL-FI associated to multi-offer messages will be hidden in final RYI
  isMultiOffer: Boolean

  # Indicates the GPL loan formatted maximum capture amount (apply to PSD2 countries: DE, GB, ES, FR, IT)
  formattedMaxCaptureAmount: String

  # Credit installments logo
  logo: GenericURL

  # Alternate text for logo
  logoAltText: String
}

# Encapsulates all properties related to a credit as FI offer for the RYI page.
type CreditFIUIProperties {
  # Section Headline text
  sectionHeadlineText: String

  # Headline text
  headlineText: String

  # Description text
  descriptorText: String

  # Checkout button text (pay)
  payButtonText: String

  # Recurring Payment Formatted Text
  paymentFormattedText: String

  # Term Formatted Text
  termFormattedText: String

  # Terms Text
  termsText: String

  # Checkout button text (continue)
  continueButtonText: String
}

# Encapsulates all properties related to a credit pay later.
type CreditPayLater {
  # Total cost is cart amount
  totalCost: Amount

  # Total interests for installments
  totalInterest: Amount

  # Total fee for installments
  totalFee: Amount

  # Installments schedule
  installmentsSchedule: [InstallmentSchedule]

  # No down payment amount
  noDownPaymentAmt: Amount
}

# Encapsulates all properties related to InstallmentSchedule.
type InstallmentSchedule {
  # Principal amount of transaction (Ex: '204,20 EUR')
  principal: Amount

  # Type of Payment (Ex: 'Down_Payment', 'INSTALLMENT')
  paymentType: CreditPaymentType

  # Order of the payment (Ex: 1 or 2 ..)
  paymentNumber: Int

  # Interest amount on the transaction (Ex: '4,20 EUR')
  interest: Amount

  # Consumer Fee for the transaction (Ex: '0,20 EUR')
  consumerFee: Amount

  # Payment Date of the transaction (Ex: '27 nov.', '14 Mar')
  paymentDate: String

  # TotalPayment for the transaction including fee and interest  (Ex: '23,01 EUR')
  totalPayment: Amount
}

# An enumeration of types that an CreditPaymentType can be. DOWN_PAYMENT, INSTALLMENT, etc.
enum CreditPaymentType {
  # A down payment for first installment in schedule
  DOWN_PAYMENT

  # An installment after the first down payment
  INSTALLMENT
}

# Utilities for tracking this message and the user's interaction with it.
type MorsMRTrackingDetails {
  # Url used for impression tracking
  impressionUrl: GenericURL

  # URL used for click tracking
  clickUrl: GenericURL

  # URL used for dismiss tracking
  dismissUrl: GenericURL
}

# Size of an image
enum InstitutionCategory {
  # Image category for financial institution
  PRIMARY

  # Image category for financial institution wallet
  WALLET

  # Image category for thumbnail display
  THUMBNAIL

  # Image category for reward program
  REWARD

  # Image category for the institution partner
  PARTNER

  # Image category for the FI brand
  BRAND

  # Secondary image category for the FI brand
  BRAND_SECONDARY
}

# Encapsulates all properties related to card institution images.
type InstitutionImage implements Image {
  # The image category (e.g. PARTNER, BRAND, REWARD, etc)
  category: InstitutionCategory

  # An image's URL. A URL type.
  url: GenericURL

  # An image's width in pixels (number value only)
  width: String

  # An image's height in pixels (number value only)
  height: String

  # An image mime type
  type: String
}

# Encapsulates all properties related to attribution.
type AttributionDetails {
  # Identifier for an attribution.
  attributionId: String

  # attribution description.
  shortDescription: String

  # attribution description in compact format.
  compactDescription: String

  # attribution terms label
  termsLabel: String

  # attribution terms link
  termsLink: String
}

# Encapsulates all properties related to Rewards for a funding instrument
type Rewards {
  # The ID for Rewards
  id: String

  # The related card ID
  relatedCardId: String

  # The card issuer rewards details
  issuer: RewardsIssuer

  # Rewards that can be converted to currency equivalent or not
  balance: RewardsBalance

  # The available rewards value and its equivalent monetary value
  availableRewards: AvailableRewards

  # The necessary metadata to convert rewards to monetary value and vice versa
  conversionMetadata: RewardsConversionMetadata

  # The minimum and maximum constraints on how rewards can be used
  constraints: RewardsConstraints

  # The reward type (i.e. `CHASE_REWARDS_POINTS`)
  #
  # This is used to determine what _type_ of rewards that's shown to the user.
  # This is the combination of rewards issuer name and the issuer instrument type
  # from the issuer data.
  rewardType: String
    @deprecated(
      reason: "Instead of using the rewardType, the reward content and behavior are determined by the redemptionType, the issuer name and denominationTypeDescription"
    )

  # The rewards redemption type
  redemptionType: RewardsRedemptionType

  # The rewards terms and conditions url
  termsUrl: String

  # The rewards image
  #
  # Takes optional input for image size and type
  image(size: SquareImageSize = S, type: ImageType = png): GenericImage
}

# The card issuer rewards details
#
# This contains the name of the issuer, type of rewards instrument, and the name
# of the rewards product (i.e. `Ultimate Rewards® Points`)
type RewardsIssuer {
  # The name of the rewards issuer
  name: String

  # The type of rewards
  instrumentType: String
    @deprecated(
      reason: "Instead of using the instrumentType, the reward content and behavior are determined by the redemptionType, the issuer name and denominationTypeDescription"
    )

  # The name of the rewards product like `Ultimate Rewards® Points`
  issuerProductDescription: String
}

# Encapsulates all properties related to Rewards Balance
type RewardsBalance {
  # Currency to which rewards can be converted
  targetCurrencyCode: SupportedCountryCurrencies

  # If the rewards can be converted to the currency equivalent
  isConvertable: Boolean
}

# Encapsulates all properties related to the available Rewards
type AvailableRewards {
  # Rewards value amount
  value: Float

  # The equivalent monetary value of the rewards
  monetaryValue: Amount

  # The Rewards code description - example 'points'
  denominationTypeDescription: String
}

# Encapsulates all properties related to Rewards conversion
type RewardsConversionMetadata {
  # Conversion factor when converting from rewards to monetary value
  conversionFactor: Float

  # The decimal precisions when converting from from rewards to monetary value and vice versa
  decimalPrecision: RewardsDecimalPrecision

  # The rounding modes when converting from from rewards to monetary value and vice versa
  roundingMode: RewardsRoundingMode
}

# The decimal precision for Rewards conversion
type RewardsDecimalPrecision {
  # Decimal precision for conversion from amount to rewards
  toRewards: Float

  # Decimal precision for conversion from rewards to amount
  toAmount: Float
}

# The rounding modes when converting a Rewards value
type RewardsRoundingMode {
  # Rounding mode for conversion from amount to rewards
  toRewards: RewardsRoundingModeType

  # Rounding mode for conversion from rewards to amount
  toAmount: RewardsRoundingModeType
}

# The mode of Rewards rounding
#
# https://docs.oracle.com/javase/7/docs/api/java/math/RoundingMode.html
enum RewardsRoundingModeType {
  # Rounding is unnecessary
  UNNECESSARY

  # Rounding mode to round towards _nearest neighbor_ unless both neighbors are equidistant, in which case round up.
  HALF_UP

  # Rounding mode to round towards _nearest neighbor_ unless both neighbors are equidistant, in which case round down.
  HALF_DOWN

  # Rounding mode to round towards the _nearest neighbor_ unless both neighbors
  # are equidistant, in which case, round towards the even neighbor.
  HALF_EVEN

  # Rounding mode to round away from zero.
  UP

  # Rounding mode to round towards zero.
  DOWN
}

# Encapsulates all properties related to Rewards constraints
type RewardsConstraints {
  # The minimum amount the user can spend when using rewards
  minimumSpend: Amount

  # The maximum usable rewards
  maximumUsable: Amount

  # The maximum amount the user can spend when using rewards
  maximumSpend: Amount
}

# The Rewards redemption type
enum RewardsRedemptionType {
  # Rewards are used for a statement credit
  STATEMENT_CREDIT

  # Rewards are used with a specified dollar amount applied as a statement credit toward the purchase
  STATEMENT_CREDIT_WITH_AMOUNT_CHOICE

  # Rewards are deducted from the rewards balance
  REAL_TIME
}

# Encapsulates all properties related to a generic image.
type GenericImage implements Image {
  # An image's URL. A URL type.
  url: GenericURL

  # An image's width in pixels (number value only)
  width: String

  # An image's height in pixels (number value only)
  height: String
}

# Encapsulates all properties related to the cryptocurrency holding details.
type CryptocurrencyHoldingDetails {
  # Symbol of the cryptocurrency
  symbol: CryptocurrencySymbol

  # Full amount of cryptocurrency the user has
  quantity: String
}

# An enumeration of types that an Cryptocurrency can be. BTC, BCH, etc.
enum CryptocurrencySymbol {
  # Bitcoin
  BTC

  # Bitcoin Cash
  BCH

  # Litecoin
  LTC

  # Ethereum
  ETH

  # PayPal USD
  PYUSD

  # Chainlink
  LINK

  # Polygon
  MATIC

  # Solana
  SOL
}

# Payer Disclaimer values
enum PayerDisclaimer {
  # Cobranded type
  COBRANDED
}

# Encapsulates all properties related to an individual payment installment option
# Ex: term, totalCost, discountPercentage
type Installments {
  # Option discount amount
  discount: InstallmentDiscount

  # Option monthly payment amount
  monthlyPayment: Amount!

  # Option interval duration for installment
  intervalDuration: String

  # Option term number (Ex: 3)
  term: Int!

  # Option total cost amount
  totalCost: Amount!
}

# Encapsulates all properties related to installment related discounts.
# Ex: currencySymbol, currencyValue, currencyCode, etc.
type InstallmentDiscount {
  # Amount of discount
  amount: Amount

  # Amount of discount's percentage (Ex: '5.0')
  percentage: String
}

# Encapsulates offer details
type Offer {
  # offer id
  id: String!

  # Indicates type of an offer's balance. Example: PSB, MSB, etc
  balanceType: BalanceType

  # descriptive name for the offer
  shortTitle: String

  # max discount based on percent offer
  maxDiscount: Amount

  # int value of a percent off of a offer
  percentOff: Int

  # type of Incentives, etc: PERCENTAGE or FIXED
  type: Incentives
}

# An enumeration of all potential balance types for an offer
enum BalanceType {
  # MSB - Merchant Specific Balance
  MSB

  # PSB - PayPal Specific Balance
  PSB
}

# List of types that an Incentives can be. PERCENTAGE, FIXED
enum Incentives {
  # Percentage based incentive, has percent off
  PERCENTAGE

  # Fixed, fixed amount of incentive
  FIXED
}

# Encapsulates all properties related to constraint on fi.
# EX(Constarint for AUTH)
type Constraint {
  # amount of constraint
  amount: Amount

  # type for constraint.(EX: 'AUTH')
  type: ConstraintType
}

# An enumeration of types that an ConstraintType can be. AUTH, etc
enum ConstraintType {
  # the constraint type is smart auth
  AUTH
}

# An enumeration of subtypes that FundingOption can have.
# DELAYED_TRANSFER, ECHECK, INSTANT_TRANSFER or MANUAL_BANK_TRANSFER
enum FundingOptionSubType {
  # Credit Card
  CREDIT

  # Delayed Transfer, also known as Pay After Delivery (PAD).
  DELAYED_TRANSFER

  # E-Check
  ECHECK

  # Instant Transfer, also known as IACH.
  INSTANT_TRANSFER

  # Manual Bank Transfer, also known as MEFT.
  MANUAL_BANK_TRANSFER
}

# A plan describes a way that the user can pay for a transaction. It includes the
# list of funding sources that will be used, and optionally, backup or currency
# conversion options that apply to using the plan.
type Plan {
  # Plan's ID (Ex: '716015457e394cebb555f9804fb22227')
  id: ID

  # The array of funding sources that will be used to fund the payment in the plan,
  # and details about how those sources will be charged.
  fundingSources: [FundingSource]

  # Plan's backup funding instrument, that will be charged if the `fundingSources`
  # are unable to fund the transaction. Applies to plans with banks.
  backupFundingInstrument: FundingInstrument

  # Plan's backup funding option. Applies to banks.
  backupFundingOption: FundingOption
    @deprecated(
      reason: "Renamed to `backupFundingInstrument` for consistent naming of funding instrument types."
    )

  # Plan's currency conversion options, if any.
  currencyConversion: CheckoutCurrencyConversion

  # Total values of each currency in the plan.
  totalsPerCurrency: [Amount]

  # A Plan is selected. If you are listing out plans in a UI,
  # and need to show that a plan is selected, use this property.
  isSelected: Boolean

  # Plan's pre authorization data. The type and amount that needs to be used for pre-authorization
  # during the `approveMemberPayment` mutation.
  preAuthorizationData: PreAuthorizationData

  # Plan's primary funding option.
  primaryFundingOption: FundingOption
    @deprecated(
      reason: "Mappings improved to separate the instrument and the details about the fundingSource - see fundingSources instead"
    )

  # Plan's secondary funding options.
  secondaryFundingOptions: [FundingOption]
    @deprecated(
      reason: "Mappings improved to separate the instrument and the details about the fundingSource - see fundingSources instead"
    )

  # Plan's ID (Ex: '716015457e394cebb555f9804fb22227')
  planId: String
    @deprecated(
      reason: "Renamed to use `id` instead to better match good graphQL schema practices."
    )

  # Plan's secondary funding option.
  secondaryFundingOption: FundingOption
    @deprecated(
      reason: "Use `secondaryFundingOptions` instead - there may be more than one secondary option in this plan."
    )

  # A plan's funding contingencies
  fundingContingencies: [FundingContingency]!
}

# A source used in payment. Contains `fundingInstrument`, and information on how
# the funding instrument will be charged in the payment like the amount charged to
# the it, currency conversion used by the instrument, or rewards information used
# by the instrument.
type FundingSource {
  # The funding instrument that will be used
  fundingInstrument: FundingInstrument

  # The method of how the funding instrument will be charged when this funding source is used
  fundingMethodType: FundingInstrumentMethodType!

  # The amount that will be charged to the instrument associated with this funding source
  amount: Amount

  # Scheduled date of withdrawal. Example: DELAYED (PAD) bank account
  delayedPaymentDate: GenericDate

  # Array of individual funding sources in case of incentives
  groupedSources: [FundingSource]

  # Incentives and their max discount and percent off
  incentives: Offer
}

# Delivery Method of Funding Instrument
enum FundingInstrumentMethodType {
  # Instant transfer. Funding instrument will be charged immediately.
  INSTANT

  # Delayed transfer, also known as PAD. Applies to banks. Funding instrument will
  # be charged after the products are delivered.
  DELAYED

  # Manual transfer. User should be given information to bring to the bank token
  # fulfill the payment.
  #
  # This should be a deprecated funding method type - we should not be seeing third_party_response
  # anymore.
  MANUAL

  # E-check. Applies to banks. The amount charged may show up on the funding instrument
  # a few days after the transaction is completed on PayPal's side.
  ECHECK
}

# Encapsulates many ways that a date can be formatted. Ex: E, Hm, Ms, etc.
type GenericDate {
  # Fri
  E: String

  # Fri 14:10
  EHm: String

  # Fri 14:10:10
  EHms: String

  # 21 Fri
  Ed: String

  # Fri 2:10 PM
  Ehm: String

  # Fri 2:10:10 PM
  Ehms: String

  # 2014 AD
  Gy: String

  # Mar 2014 AD
  GyMMM: String

  # Fri, 21 Mar 2014 AD
  GyMMMEd: String

  # Mar 21, 2014 AD
  GyMMMd: String

  # 14
  H: String

  # 14:10
  Hm: String

  # 14:10:10
  Hms: String

  # 3
  M: String

  # Fri, 3/21
  MEd: String

  # Mar
  MMM: String

  # Fri, Mar 21
  MMMEd: String

  # March 21
  MMMMd: String

  # Mar 21
  MMMd: String

  # Mar 21
  MMMdd: String

  # March 21
  MMMMdd: String

  # 3/21
  Md: String

  # 21
  d: String

  # 2 PM
  h: String

  # 2:10 PM
  hm: String

  # 2:10:10 PM
  hms: String

  # 10:10
  ms: String

  # 2014
  y: String

  # 3/2014
  yM: String

  # 03/2014
  yMM: String

  # Fri, 3/21/2014
  yMEd: String

  # Mar 2014
  yMMM: String

  # Fri, Mar 21, 2014
  yMMMEd: String

  # Mar 21, 2014
  yMMMd: String

  # 3/21/2014
  yMd: String

  # 03/21/2014
  yMMdd: String

  # Q1 2014
  yQQQ: String

  # 1st quarter 2014
  yQQQQ: String

  # March 2014
  yyyyMMMM: String

  # Thursday, September 28, 2017 at 5:32:00 PM Pacific Daylight Time
  dateTimeFull: String

  # September 28, 2017 at 5:32:00 PM PDT
  dateTimeLong: String

  # Sep 28, 2017, 5:32:00 PM
  dateTimeMedium: String

  # 9/28/17, 5:32 PM
  dateTimeShort: String

  # 5:32:00 PM Pacific Daylight Time
  timeFull: String

  # 5:32:00 PM PDT
  timeLong: String

  # 5:32:00 PM
  timeMedium: String

  # 5:32 PM
  timeShort: String

  # Thursday, September 28, 2017
  dateFull: String

  # September 28, 2017
  dateLong: String

  # Sep 28, 2017
  dateMedium: String

  # 9/28/17
  dateShort: String

  # September 28, 2017 at 5:32 PM
  dateLongTimeShort: String

  # Thursday, September 28, 2017 at 5:32:00 PM
  dateFullTimeMedium: String

  # Thursday, September 28, 2017 at 5:32 PM
  dateFullTimeShort: String
}

# Encapsulates all properties related to a CheckoutCurrencyConversion.
#
# There are 2 types of the coversion rate: "PAYPAL" and "VENDOR"
# Please note that conversion rate information is always for PAYPAL's type.
# The only 2 fields that are associated with VENDOR type are "type" and "isReadOnly"
type CheckoutCurrencyConversion {
  # What the currency is converted from.
  from: Amount

  # What the currency is converted to.
  to: Amount

  # The currency conversion rate.
  rate: String

  # The currency conversion rate formatted. (Ex: 0.019991 INR)
  rateFormatted: String

  # The currency conversion rate spread.
  spread: String

  # Whether or not a user can change the conversion type. If `true`, the conversion
  # type in the `type` field cannot be changed. If `false`, the user can switch between
  # the different types of `CheckoutCurrencyConversionType`.
  isReadOnly: Boolean
    @deprecated(
      reason: "Renamed to `canChangeConversionType` for more clarity around the purpose."
    )

  # PayPal currency conversion fee rate in percentage. (e.g '5.00')
  feeRate: String

  # PayPal currency conversion fee rate in percentage formatted based on the locale. (e.g. '5,00 %')
  feeRateFormatted: String

  # Date of validity.  The date that the conversion rate was issued.
  issuedDate: GenericDate

  # Type of currency conversion rate.
  type: CheckoutCurrencyConversionType

  # Whether or not a user can change the conversion type. If `false`, the conversion
  # type in the `type` field cannot be changed. If `true`, the user can switch between
  # the different types of `CheckoutCurrencyConversionType`.
  canChangeConversionType: Boolean

  # The cart total with the currency conversion rate applied.
  convertedCartTotal: Amount
    @deprecated(
      reason: "convertedCartTotal is computed using cart totals, which is more inaccurate than using planning data about the user's mix of funding instruments. Use convertedAmount instead."
    )

  # The converted amount to be charged on the card.
  convertedAmount: Amount

  # The amount of cash back the user will receive in case of opting for selecting the PayPal's currency conversion rate.
  # User has to be enrolled in a cashback campaign in order to get cashback.
  cashbackPercentage: Int
}

# An enumeration of types that CheckoutCurrencyConversion can have.  PAYPAL, VENDOR
enum CheckoutCurrencyConversionType {
  # PayPal conversion rate
  PAYPAL

  # Vendor conversion rate
  VENDOR
}

# Encapsulates pre authorization data for a funding instrument
type PreAuthorizationData {
  # Type of Authorization to be done on the card, 'PARTIAL' indicates a $1 auth, 'FULL' indicates the full auth
  authType: CardAuthType

  # Amount indicates the amount the authorization is to be done for, depending on the currency and the local currencyValue
  amount: Amount
}

# An enumeration of types that FundingOption can have.
# PROCESSOR_DECLINE, PAYPAL_ELIGIBILITY or PREAUTH
enum CardAuthType {
  # Full amount transaction authorization
  FULL

  # Partial amount transaction authorization
  PARTIAL
}

# Encapsulates all data related to a Checkout session's funding contingencies
# Ex: threeDomainSecure, cvvConfirm, etc.
union FundingContingency =
    ThreeDomainSecureResolutionContingency
  | ConfirmCreditCardCvvContingency
  | SepaMandateAcceptenceNeededContingency
  | PaycodeContingency

# Encapsulates all properties related to a ThreeDomainSecureResolutionContingency type
type ThreeDomainSecureResolutionContingency {
  # Resolution contingency name (Ex: 'PAYER_ACTION_REQUIRED')
  name: String

  # Resolution cause for current contingency (Ex: 'NEED_3D_SECURE_AUTHENTICATION')
  causeName: String!

  # Actual 3DS (2.0) contingency resolution for the current selected funding instrument
  resolution: ThreeDSResolution
}

# Encapsulates all properties related to a ThreeDSResolution type
type ThreeDSResolution {
  # (Ex: 'PAYMENT_CARD')
  type: String

  # Resolution name for the current selected funding instrument (Ex: 'RESOLVE_3D_SECURE_AUTHENTICATION')
  resolutionName: String!

  # Details information in regards to current selected funding instrument for resolving
  # 3DS (2.0) contingency
  paymentCard: ThreeDSPaymentCardData

  # Details information in regards to current 3DS contingency which encapusates JWT & cardinal
  # related information
  contingencyContext: ThreeDSContingencyContextData
}

# Encapsulates all properties related to a ThreeDSPaymentCardData type
type ThreeDSPaymentCardData {
  # Funding instrument's ID (Ex: 'CC-Q9E5QAHF4ESLJ')
  id: ID

  # Card issuer for the current funding instrument (Ex: 'MASTER_CARD')
  type: CardIssuerType!

  # Last four digits for the given funding instrument (Ex: '2431')
  number: String!

  # Encrypted version of the lat four digits  (Ex: 'ABcK1jYv.0IWASX72C-UCE-09crt3uFbkQwhWpnIC.jYt4yRFQjBvw')
  encryptedNumber: String!

  # Bank identification number for given payment card
  bankIdentificationNumber: String

  # Associated billing address for given payment cared
  billingAddress: CheckoutBillingAddress

  # Expire year for the current funding instrument (Ex: '2022')
  expireYear: String

  # Expire month for the current funding instrument (Ex: '01')
  expireMonth: String

  # Currency code for the current funding instrument (Ex: 'EUR')
  currencyCode: String

  # Product class the current funding instrument (Ex: 'CREDIT')
  cardProductClass: FundingInstrumentSubType

  # Flag indicates is a partial_fpan or not
  partialFpan: Boolean

  # Name of the account owner
  accountOwnerName: PersonName
}

# Encapsulates all properties related to a ThreeDSContingencyContextData type
type ThreeDSContingencyContextData {
  # Card source (Ex: 'CARD_STATE')
  source: ThreedsContingencySourceType

  # Reason for 3DS (2.0) contingency (Ex: 'PAYPAL_POLICY')
  reason: ThreedsContingencyReasonType

  # Unique ID for 3DS (2.0) transaction, each transaction will have a unique referenceId
  # generated by paymentsetupapiserv (Ex: '20200336306496587')
  referenceId: String!

  # Cardinal commerce url to launch for device data collection from the client
  # (Ex: 'https://centinelapistag.cardinalcommerce.com/V1/Cruise/Collect')
  deviceDataCollectionUrl: GenericURL

  # JWT related information which contains issuer, orgUnitId, validity & type
  # This is required for the subsequent JWT token creation
  jwtSpecification: ThreeDSJwtSpecification
}

# Types for threeDS contingency source.
enum ThreedsContingencySourceType {
  # Unknown
  UNKNOWN

  # payment context - at transaction
  PAYMENT_CONTEXT

  # paypal risk triggers this
  PAYPAL_RISK

  # threeDs contingency for third start card (card added at profile but not resolved contingency)
  CARD_STATE

  # threeDs because of authorization requirement
  AUTHORIZATION
}

# Types for threeDS contingency reason.
enum ThreedsContingencyReasonType {
  # Unknown
  UNKNOWN

  # Regulatory mandate
  REGULATORY_MANDATE

  # Merchant Requested
  MERCHANT_REQUESTED

  # PayPal Policy
  PAYPAL_POLICY

  # Soft Decline
  SOFT_DECLINE
}

# Encapsulates all properties related to a ThreeDSJwtSpecification which
# include the issuer and validity algorithem & etc
type ThreeDSJwtSpecification {
  # JWT issuer returned from contingency data (Ex: '5cb5d0582ee58f1f8c35c33e')
  jwtIssuer: String!

  # JWT org unit ID returned from contingency data (Ex: '5d0c1e91031e732650d22a25')
  jwtOrgUnitId: String!

  # Encryption type (Ex: 'JWT')
  type: String

  # JWT validity duration (Ex: 'PT1H')
  jwtDuration: String!
}

# Encapsulates the cvv data that will be returned when a confirm credit card cvv payment contingency is surfaced by PAPS
type ConfirmCreditCardCvvContingency {
  # The encrypted id of the user's credit card
  encryptedId: String!

  # The last 4 digits of the user's credit card number
  lastFourDigits: String!

  # The user's card issuer
  type: CardIssuerType!
}

# Encapsulates all properties related to a SepaMandateAcceptenceNeededContingency type
type SepaMandateAcceptenceNeededContingency {
  # bankAccount related to contingency
  bankAccount: BankAccount
}

# The metadata for a particular bank account
type BankAccount {
  # A unique identifier for the bank account within the PayPal system
  id: String!

  # Short name for the bank account created by the user
  nickname: String

  # The bank account's type
  type: BankAccountType!

  # The bank account's routing number
  routingNumber: String!

  # The bank account number
  accountNumber: String!

  # The last characters of the bank account's account number
  accountNumberShort: String!

  # The bank identifier code
  bankIdentifierCode: String!

  # The bank account's currency code
  currencyCode: String!

  # The bank account's beneficiaries
  beneficiaries: [BankAccountBeneficiary]!

  # The bank account's billing address
  billingAddress: GenericAddress

  # The bank account issuer's information
  issuer: BankAccountIssuer

  # The bank account creditor's information
  creditor: BankAccountCreditor
}

# An enumeration of bank types that a bank account can identify with
#
# Reference: https://ppaas/api/3719176155268854#apiReference
enum BankAccountType {
  # A business checking account
  BUSINESS_CHECKING

  # A business savings account
  BUSINESS_SAVINGS

  # A checking account
  CHECKING

  # A custom account type
  CUSTOM

  # A normal account type
  NORMAL

  # A savings account type
  SAVINGS

  # An unknown account type
  UNKNOWN
}

# Bank Account Beneficiary Information
type BankAccountBeneficiary {
  # The full name of the bank account's beneficiary.
  fullName: String!
}

# The attributes of an individual bank account's issuer
type BankAccountIssuer {
  # An issuer's name
  name: String!

  # An issuer's city
  city: String!

  # An issuer's country code
  country: CountryCodes!

  # An issuer's branch location
  branchLocation: String
}

# The attributes of an invidual bank account's creditor (the settler of the transaction)
type BankAccountCreditor {
  # A creditor's insitutional ID
  id: String!

  # A creditor's name
  name: String!

  # The address of the creditor
  address: GenericAddress
}

# Encapsulates all properties related to a PaycodeContingency type
type PaycodeContingency {
  # Resolution contingency name (Ex: 'PAYER_ACTION_REQUIRED')
  name: String

  # Resolution cause for current contingency (Ex: 'NEED_3D_SECURE_AUTHENTICATION')
  causeName: String!

  # Number of attempts to clear the paycode contingency
  attempts: Int
}

# Encapsulates solo plans and split plans.
# A solo plan is one that only is associated with one primary funding option.
# A split plan is one that has secondary funding options.
type PlanTypes {
  # A plan with one funding option.
  soloPlan: Plan

  # A plan with more than one funding option.
  splitPlans: [Plan]
}

# Encapsulates all properties related to a locale.
#
# CheckoutLocale differs from GenericLocale,
# because it takes into account Merchant preferences and
# SetExpressCheckout API parameters.
#
# CheckoutLocale should be used for Checkout specific use cases.
# GenericLocale should be used for all other use cases.
# Ex: country, language, directionality, etc.
type CheckoutLocale implements Locale {
  # A locale's country (Ex: 'US')
  country: String

  # A locale's culture (Ex: 'en-US')
  culture: String

  # A locale's directionality (Ex: 'ltr')
  directionality: Directionality

  # A locale's language (Ex: 'en')
  language: String

  # A locale's locale (Ex: 'en_US')
  locale: String
}

# Encapsulates all properties related to a merchant. Ex: merchantId, email
type Merchant {
  # Merchant's ID (Ex: '7VJPAEVGH7B6A')
  merchantId: String

  # The country this merchant is located in
  country: CountryCodes

  # Merchant descriptor (for bank statements)
  descriptor: String!

  # Merchant's email address.
  email: Email
    @deprecated(
      reason: "Merchant email is PII data & should not be passed to Clients"
    )

  # The locale of this merchant
  locale: GenericLocale

  # Merchant's logo.
  logo: GenericURL

  # Merchant's brand name.
  name: String

  # Bill Pay Integrator's name.
  billPayIntegratorName: String

  # Indicates type of checkout integration
  solution: CheckoutSolutionType!

  # Indicates eligibility for trusted beneficiary opt-in experience
  isEligibleForTrustedBeneficiaryOptIn: Boolean

  # Merchant is gaming and gambling
  isGambling: Boolean

  # Indicates whether this merchant's charity status has been confirmed by PayPal
  isPaypalConfirmedCharity: Boolean

  # Indicates whether this merchant has been marked as a trusted beneficiary by the associated user
  isTrustedBeneficiary: Boolean
    @deprecated(
      reason: "Use isEligibleForTrustedBeneficiaryOptIn instead for deciding whether or not to render the Trusted Beneficiary experience"
    )

  # Returns a list of cobrands associated with this merchant
  cobrands: [String]

  # The preferences the Merchant has set
  preferences: MerchantPreferences

  # Indicates whether or not credit cards are allowed for an specific merchant
  isCreditDisallowedForMerchant: Boolean

  # The Funding Instruments that are NOT allowed for a transaction based on merchant's configurations
  disallowedFundingInstrumentsForMerchant: [FundingInstrumentSubType]
}

# Types of checkout integration
enum CheckoutSolutionType {
  # Buyer must have a PayPal account to check out.
  MARK

  # Buyer can check out without creating a PayPal account. This is referred to as PayPal Account Optional.
  SOLE

  # See https://developer.paypal.com/docs/classic/express-checkout/ec-shortcut/
  SHORTCUT
}

# Encapsulates all properties related to a merchant's preferences. Ex: autoReturn, PDT
type MerchantPreferences {
  # If set to true automatically redirects back to merchant site
  autoReturnToMerchant: Boolean

  # If set to true enables paymentDataTransfer to merchant
  enablePaymentDataTransfer: Boolean

  # Return URL of the seller set in auto return setting (different from cart return url)
  returnUrl: String
}

# Allows you to query for credit metadata
type CreditMeta {
  # Indicates whether there was upstream (merchant) credit presentment
  upstreamCreditPresentment: Boolean!

  # Indicates whether the merchant is an EZP (Easy Payments) merchant
  easyPaymentsMerchant: Boolean!

  # Credit suggestion text
  #
  # A short phrase highlighting credit options to the user
  # Example: 'More ways to pay over time'
  creditSuggestionText: String

  # Credit suggestion call-to-action text
  #
  # Call-to-action text that can be used with creditSuggestion
  # Example: 'See offers'
  creditSuggestionCTAText: String

  # Secondary credit suggestion text
  #
  # Similar to creditSuggestionText, but may be a different phrase used in a
  # different location on the frontend
  secondaryCreditSuggestionText: String

  # Secondary credit suggestion call-to-action text
  #
  # Call-to-action text for the secondaryCreditSuggestion
  # Example: 'See offers'
  secondaryCreditSuggestionCTAText: String
}

# Encapsulates all properties related to a credit PPC offer for the RYI page.
# Average SLA response time - 50ms
type CreditPPCOffer {
  # A marketing offer's reference ID.
  referenceId: String

  # A marketing offer's touchpoint used as campaign placement code.
  touchpoint: String

  # Rank of this specific offer within the overall list.  Rank will not necessarily
  # be consecutive if other touchpoints had higher priorities.
  rank: Int

  # Indicates whether this message is 'selected'.
  # This only apply to:
  # - credit re-use offers
  #   (since you can't pre-select any acquistion offer for the user)
  #   When isSelected: true for a re-use offer it means that the credit FI
  #   is the buyer's default selected FI
  # - multi-offer messages
  #   When isSelected: true for a multi-offer message it means that it will be
  #   pre-selected inside the RYI
  isSelected: Boolean

  # Indicates whether this message is associated to an 'approved' GPL-FI.
  # Currently, this only apply to multi-offer messages;
  isApproved: Boolean

  # A marketing offer's content.
  # An object of key/values that are relevant to a campaign.  This is an opaque
  # object, so be very careful removing fields and do not change existing fields
  content: JSON

  # Uitilities for tracking this offer and the user's interaction with it.
  trackingDetails: MorsMRTrackingDetails

  # Indicates whether a credit offer is 'qualifying' or not
  qualifyingOffer: Boolean

  # Pay later offer details
  creditPayLater: CreditPayLater
}

# Encapsulates all properties related to the credit financing option patched to the Cart.
type CreditFinancingOption {
  # Identifier of the credit option
  financingCode: String

  # Amount to be payed each month
  monthlyPayment: String

  # Total purchase cost + interest
  totalCost: String

  # Total interest amount
  totalInterest: String

  # The percentage, as string. For example, 19.99% interest rate as 19.99.
  apr: String

  # The term (period of time) over which to finance the transaction.
  term: Int

  # Type of credit. For example, INST for installment
  creditType: CreditOfferType

  # True if credit fee is funded by PayPal
  paypalSubsidy: Boolean

  # Monthly interest rate. For example, 1.08% interest rate as 1.08.
  monthlyPercentageRate: String
}

# Encapsulates all properties related to a credit as FI offer for the RYI page that a user selected.
# Average SLA response time - 50ms - (This might change)
input SelectedCRCOffer {
  # Offer ID for the offer returned by crcofferserv
  crcOfferId: String

  # Financing code is the id for a particular offer returned by credit financing serv.
  financingCode: String
}

# Encapsulates all properties related to the pre-selected FI from Mors/EDS component for Pi30 flows
# Average SLA response time - 50ms - (This might change)
input SelectedCRCfi {
  # The name associated to the fi (Ex: 'Deutsche Bank')
  name: String!

  # The last four digits of the user's fi number as a String (Ex: '7062')
  lastFourDigits: String!

  # Id of the FI as a string (ex: 'BA-DSJODJSISDNALSD')
  id: String!
}

# Encapsulates all properties related to portable credit integrations.
# Average SLA response time - ??ms
type CreditApplyPortable {
  # Encrypted payload for initial data to CAP for the GPL flow
  capInitialData: String
}

# Encapsulates all properties related to a SuggestedDonationfor the RYI page.
# Average SLA response time - 50ms
type SuggestedDonation {
  # A suggested donation reference ID.
  id: ID

  # A suggested donation content, a JSON object includes suggested charity details, donation amount and UI content.
  content: SuggestedDonationContent

  # Uitilities for tracking this suggested donation and the user's interaction with it.
  trackingDetails: MorsMRTrackingDetails
}

# Encapsulates all properties related to a SuggestedDonationContent.
type SuggestedDonationContent {
  # nonprofit name
  nonprofitName: String!

  # nonprofit id defined by cause
  nonprofitId: ID!

  # nonprofit paypal id (aka payer_id)
  nonprofitPayPalId: String

  # nonprofit logo url
  nonprofitLogoUrl: GenericURL!

  # the suggested nonprofit/charity model id
  modelId: String

  # model score assigned to this suggested nonprofit
  modelScore: String

  # suggested donation amount
  amount: Amount

  # title message showing at give at checkout feature
  donateMessage: String!

  # promotional message showing at give at checkout feature (optional)
  promoMessage: String

  # legal message header showing at give at checkout feature
  legalDisclaimerHeaderMessage: String

  # legal message body (array) showing at give at checkout feature
  legalDisclaimerBodyMessage: [String]

  # donation purpose message showing at give at checkout email receipt and transaction details
  donationPurpose: String
}

# Encapsulates all data related to a Checkout session's payment contingencies
# Ex: threeDomainSecure, cvvConfirm, etc.
type PaymentContingencies {
  # A Checkout session's payment contingency ThreeDomainSecure related data.
  # Average SLA response time: 2050ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  threeDomainSecure(
    # List of experiences supported by the client for the 3DS verification
    experiences: [ThreeDSPaymentExperience] = [IFRAME]
  ): ThreeDomainSecureContingency

  # A Checkout session's payment contingency for 3DS (2.0)
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  threeDSContingencyData: ThreeDomainSecureResolutionContingency

  #   A checkout session's payment contingency cvv confirmation related data.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  confirmCreditCardCvvData: ConfirmCreditCardCvvContingency

  # A checkout session's SEPA mandate contingency related data.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  sepaMandateAcceptanceNeeded: BankAccount

  # A checkout session's payment contingency to get payer consent for fetching the real time bank balance information.
  needConsentForBankAccountInfoRetrieval: OpenBankingContingency

  # A checkout session's payment contingency on fetching the real time bank balance information
  needRealTimeBalanceForBankAccount: OpenBankingContingency

  # Indicates that Strong Customer Authentication is required.
  # Contains the information needed to pass on to auth modules to resolve this contingency.
  strongCustomerAuthenticationRequired: StrongCustomerAuthenticationRequiredContingency

  # Indicates that paycode is required.
  # Contains the information needed to pass on to auth modules to resolve this contingency.
  paycodeRequired: PaycodeContingency
}

# List of supported experiences for 3DS verification
enum ThreeDSPaymentExperience {
  # 3DS within IFrame
  # - The 3DS Bank page is loaded in an iframe within Paypal's Checkout page
  IFRAME

  # Full-page redirect experience
  # - The User is redirected to 3DS Bank Page from Paypal's Checkout Page
  REDIRECT

  # Hopfree 3DS experience
  # - The 3DS Pin is entered in an input field on the Paypal's Checkout Page
  HOPFREE
}

# Encapsulates all properties related to ACS Data
# Ex: redirectUrl, method, status, etc.
type ThreeDomainSecureContingency {
  # The 3D Secure API call status
  status: APICallStatus

  # The encrypted id of the user's credit card
  encryptedId: String!

  # The third-party URL to which to redirect the card holder to complete the 3D
  # Secure authentication (Ex: 'https//www.example.com')
  redirectUrl: GenericURL

  # The method that is used to redirect the card holder to third-party site for 3D secure confirmation (Ex: 'GET')
  method: HTTPMethod

  # The payment authentication parameter to send to the third-party URL during redirect
  parameter: String

  # The experience for the 3DS verfication (iframe/redirect/hopfree)
  experience: ThreeDSPaymentExperience

  # The parameters required to be passed to the bank page for completing 3DS verification
  requestParams: [ThreeDSRequestParams]
}

# An enumeration of all potential API status calls returned when returned in body
enum APICallStatus {
  # Success
  SUCCESS

  # Failure
  FAILED
}

# An enumeration of types that HTTPMethod can have. GET, POST, PUT, DELETE, etc.
enum HTTPMethod {
  # GET
  GET

  # HEAD
  HEAD

  # POST
  POST

  # PUT
  PUT

  # DELETE
  DELETE

  # CONNECT
  CONNECT

  # OPTIONS
  OPTIONS

  # PATCH
  PATCH

  # REDIRECT
  REDIRECT
}

# Encapsulates everything related to request params provided by bank for completing 3DS verification
type ThreeDSRequestParams {
  # The type of the request param
  key: String

  # Value of the request param
  value: String
}

# Encapsulates all properties related to open banking contingency
type OpenBankingContingency {
  # The bank id or the funding option id of the bank which has the RTB
  # contingencies[either fetch real time balance or get user consent]
  encryptedId: String!
}

# Data required to resolve the Strong Customer Authentication (SCA) Contingency.
# Before completing checkout or updating any account related info, user needs to complete another auth flow.
type StrongCustomerAuthenticationRequiredContingency {
  # ID to be passed to the auth flow that will be collecting the user's auth, as part of the arguments.
  contextId: ID
}

# Encapsulates all properties related to a generic address.
# Ex: line1, city, state, postalCode, fullAddress, etc.
type CheckoutShippingAddress implements Address {
  # An Address ID (Ex: '285166')
  addressId: String

  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine1 instead for portable format."
    )

  # An Address second line street address (Ex: 'Apt 123')
  line2: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use addressLine2 instead for portable format."
    )

  # An Address city (Ex: 'San Jose')
  city: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea2 instead for portable format."
    )

  # An Address state/province (Ex: 'CA')
  state: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use adminArea1 instead for portable format."
    )

  # An Address postal code (Ex: '95131')
  postalCode: String

  # An Address two-letter country code (Ex: 'US')
  country: String
    @deprecated(
      reason: "Coarse format addresses are being phased out for portable format addresses. Use countryCode instead for portable format."
    )

  # An Address on a single line
  # (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String

  # Portable address: An address first line street address
  addressLine1: String

  # Portable address: An address second line street address
  addressLine2: String

  # Portable address: An address third line street address
  addressLine3: String

  # Portable address: An address first line admin area
  adminArea1: String

  # Portable address: An address second line admin area
  adminArea2: String

  # Portable address: An address third line admin area
  adminArea3: String

  # Portable address: An address forth line admin area
  adminArea4: String

  # Portable address: An address two-letter country code
  countryCode: String

  # If an Address is the default shipping address
  isDefaultShipping: Boolean
    @deprecated(
      reason: "CheckoutShippingAddress.isDefaultShipping has been deprecated because 'Shipping' is redundant when part of the CheckoutShippingAddress type.  Use 'isDefault' instead."
    )

  # If an Address is the default shipping address
  isDefault: Boolean

  # If an Address is the primary address
  isPrimary: Boolean

  # If an Address is disabled for transaction
  isDisabled: Boolean

  # An Address is selected. If you are listing out addresses in a UI, and
  # need to show that an address is selected, use this property.
  isSelected: Boolean

  # The type of Address (Ex: 'BILLING')
  type: AddressType

  # A name associated with the address
  name: PersonName

  # The suggested reformatted address
  suggestedAddress: ValidatedAddress

  # A full name associated with an Address, as a String (Ex: 'John Doe')
  fullName: String
    @deprecated(
      reason: "CheckoutShippingAddress.fullName has been deprecated bceause 'name' is a better alternative being a PersonName type, rather than a String.  Use 'name' instead."
    )
}

# Encapsulates all properties we want to extract from a validated address. Ex: line1, city, postalCode
type ValidatedAddress {
  # Returns true if the address is valid
  isValidAddress: Boolean

  # Returns true if the address was reformatted
  isReformatted: Boolean

  # Shows which fields need fixing from the user.
  badFields: AddressFieldBools!

  # Shows the degree of confidence with respect to the mailability of the address.
  mailability: String

  # Shows the original and reformatted address in an array of address parts as formatted by Griffin
  formatAddressHistory: GriffinFormattedAddresses

  # Shows the full address in multiple lines that is formatted by AMS
  formattedAddress: [String]!

  # A billing address first line street address (Ex: '2211 North 1st St')
  line1: String

  # A billing address second line street address (Ex: 'Apt 123')
  line2: String

  # A billing address city (Ex: 'San Jose')
  city: String

  # A billing address state/province (Ex: 'CA')
  state: String

  # A billing address postal code (Ex: '95131')
  postalCode: String

  # A billing address two-letter country code (Ex: 'US')
  country: String

  # Portable address: An address first line street address
  addressLine1: String

  # Portable address: An address second line street address
  addressLine2: String

  # Portable address: An address third line street address
  addressLine3: String

  # Portable address: An address first line admin area
  adminArea1: String

  # Portable address: An address second line admin area
  adminArea2: String

  # Portable address: An address third line admin area
  adminArea3: String

  # Portable address: An address forth line admin area
  adminArea4: String

  # Portable address: An address two-letter country code
  countryCode: String

  # Metadata returned by AMS. A structure representing information about the
  # address elements itself after the verification process. This includes how
  # similar the value is to the input and what changes were made to the value.
  amsMetadata: AMSMetadata

  # Address Type
  addressType: AMSAddressTypeCode
}

# True or False values for each element of an address
type AddressFieldBools {
  # A billing address first line street address (Ex: '2211 North 1st St')
  line1: Boolean

  # A billing address second line street address (Ex: 'Apt 123')
  line2: Boolean

  # A billing address city (Ex: 'San Jose')
  city: Boolean

  # A billing address state/province (Ex: 'CA')
  state: Boolean

  # A billing address postal code (Ex: '95131')
  postalCode: Boolean

  # A billing address two-letter country code (Ex: 'US')
  country: Boolean

  # Portable address: An address first line street address
  addressLine1: Boolean

  # Portable address: An address second line street address
  addressLine2: Boolean

  # Portable address: An address third line street address
  addressLine3: Boolean

  # Portable address: An address first line admin area
  adminArea1: Boolean

  # Portable address: An address second line admin area
  adminArea2: Boolean

  # Portable address: An address third line admin area
  adminArea3: Boolean

  # Portable address: An address forth line admin area
  adminArea4: Boolean

  # Portable address: An address two-letter country code
  countryCode: Boolean
}

# A container for Griffin Formatted Addresses
type GriffinFormattedAddresses {
  # The normalized address returned by ANS
  formattedNormalizedAddress: [String]

  # The address entered by the user
  formattedOriginalAddress: [String]
}

# Metadata returned by AMS response
type AMSMetadata {
  # Similarities
  similarities: AddressElementsMetadata

  # Transformations
  transformations: AddressElementsMetadata

  # Postal Relevances
  postalRelevances: AddressElementsMetadata
}

# Lists of all address elements that makes an address. The value of the address
# field elements are mapped from the metadata response from AMS
# address-verify API. Some of the fields in this type are non-portable additional
# address details that are sometimes needed for compliance, risk,
# or other scenarios where fine-grain address information might be needed. Not
# portable with common third party and open source. Redundant with core fields.
# For example, address_portable.address_line_1 is usually a combination of
# address_details.street_number, street_name, and street_type
type AddressElementsMetadata {
  # The street number in an address element. Example: 15 in 15 Hawthorne Way
  streetNumber: AMSMetadataValues

  # The street name in an address element. Example: Hawthorne Way in 15 Hawthorne Way
  streetName: AMSMetadataValues

  # The street type. For example, avenue, boulevard, road, or expressway.
  streetType: AMSMetadataValues

  # The delivery service. Post office box, bag number, or post office name.
  deliveryService: AMSMetadataValues

  # A named locations that represents the premise. Usually a building name or
  # number or collection of buildings with a common name or number. For example, Craven House
  buildingName: AMSMetadataValues

  # The first-order entity below a named building or location that represents the
  # sub-premise. Usually a single building within a collection of buildings with a
  # common name. Can be a flat, story, floor, room, or apartment.
  subBuilding: AMSMetadataValues

  # The highest level sub-division in a country, which is usually a province,
  # state, or ISO-3166-2 subdivision. Format for postal delivery.
  # For example, `CA` and not `California`. Value, by country, is: UK -> a county.
  # US -> a state. Canada -> a province. Japan -> a prefecture.
  # Switzerland -> a kanton.
  adminArea1: AMSMetadataValues

  # Smaller than admin area 1. A city, town, or village.
  adminArea2: AMSMetadataValues

  # Smaller than admin area 2. A sub-locality, suburb, neighborhood, or district.
  # Value is: Brazil: Suburb, bairro, or neighborhood. India: Sub-locality or district.
  # Street name information is not always available but a sub-locality or district can be a very small area.
  adminArea3: AMSMetadataValues

  # Smaller than admin area 3. The neighborhood, ward, or district. Value is:The postal sorting code for
  # Guernsey and many French territories, such as French Guiana. The fine-grained administrative levels in China.
  adminArea4: AMSMetadataValues

  # Two digit ISO2 representation of the country.
  countryCode: AMSMetadataValues

  # The postal code, which is the zip code or equivalent. Typically required for
  # countries with a postal code or an equivalent. See [postal
  # code](https://en.wikipedia.org/wiki/Postal_code).
  postalCode: AMSMetadataValues
}

# An enumeration of AMS Metadata response values.
# Doc: https://engineering.paypalcorp.com/confluence/pages/viewpage.action?pageId=901150143#LocationSpecfieldsDefinitions-AddressElementMetadata
# API: https://ppaas/api/3719176155272334#apiReference
enum AMSMetadataValues {
  # Could mean undetermined in following context: metadata.similarities, metadata.tranformations, metadata.postal_relevances
  UNDETERMINED

  # Could mean invalid in following context: metadata.similarities
  INVALID

  # Could mean not a match in following context: metadata.similarities
  NO_MATCH

  # Could mean partial match in following context: metadata.similarities
  PARTIAL_MATCH

  # Could mean match in following context: metadata.similarities
  MATCH

  # Could mean unchanged in following context: metadata.transformations
  UNCHANGED

  # Could mean standardized in following context: metadata.transformations
  STANDARDIZED

  # Could mean updated in following context: metadata.transformations
  UPDATED

  # Could mean a minor change in following context: metadata.transformations
  MINOR_CHANGE

  # Could mean a major change in following context: metadata.transformations
  MAJOR_CHANGE

  # Could mean newly introduced value in following context: metadata.transformations
  NEWLY_INTRODUCED

  # Could mean irrelevant in following context: metadata.postal_relevances
  IRRELEVANT

  # Could mean optional in following context: metadata.postal_relevances
  OPTIONAL

  # Could mean mandatory in following context: metadata.postal_relevances
  MANDATORY
}

# Address Type Codes sent by AMS. https://ppaas/api/3719176155272334#apiReference
#  B: Building.
#  F: Company or Firm.
#  G: General delivery address.
#  H: High-rise Building.
#  L: Large volume receiver.
#  M: Military address.
#  P: Post Office Box (PO Box).
#  R: Rural route address.
#  S: Street address.
#  U: Unidentified address.
enum AMSAddressTypeCode {
  # Building
  B

  # Company or Firm
  F

  # General delivery address
  G

  # High-rise Building
  H

  # Large volume receiver
  L

  # Military address
  M

  # Post Office Box (PO Box)
  P

  # Rural route address
  R

  # Street address
  S

  # Unidentified address
  U
}

# An enumeration of User Action in Checkout Session. CONTINUE, PAY_NOW
enum CheckoutUserAction {
  # Continue button appears when the final amount is not known
  # and buyer needs to get redirected to the merchant page without processing the payment."
  CONTINUE

  # Pay Now button appears when the final amount is known
  # and merchant wants to process the payment immediately when the buyer clicks Pay Now."
  PAY_NOW
}

# Enumeration to identify different checkout sessions such as Billing with purchase, or just purchase with no billing type
enum CheckoutSessionType {
  # PURCHASE. Default checkout session type
  PURCHASE

  # BILLING_WITH_PURCHASE. Session Type where a Billing Agreement is created with purchase.
  BILLING_WITH_PURCHASE

  # BILLING_WITHOUT_PURCHASE. A user is creating/updating a billing agreement without doing a purchase.
  BILLING_WITHOUT_PURCHASE
}

# An enumeration of white-listed offer programs
enum OfferPrograms {
  # Split Tender (inactive)
  SPLIT_TENDER
    @deprecated(reason: "Offer program budget reached, inactive offer")
}

# Provides the user's current SCA status and exemption reason, if any
type SecureCustomerAuthenticationContext {
  # The buyer's current SCA status
  status: SecureCustomerAuthenticationStatus

  # The reason the buyer was exempted from SCA (if any)
  exemptReason: SecureCustomerAuthenticationExemptReason
}

# An enumeration of possible SecureCustomerAuthenticationContext statuses
enum SecureCustomerAuthenticationStatus {
  # User has completed SCA
  COMPLETE

  # User has provided at most one factor of authentication
  IN_PROGRESS

  # User is exempt from SCA
  EXEMPT
}

# An enumeration of possible SecureCustomerAuthenticationContext statuses
enum SecureCustomerAuthenticationExemptReason {
  # Exempt from SCA as the cart total is below the threshold
  LOW_VALUE_TRANSACTION

  # Exempt as user has marked the merchant as a trusted beneficiary
  TRUSTED_BENEFICIARY

  # Exempt as the buyer is not present
  BUYER_NOT_PRESENT

  # Exempt as this is a reference transaction
  REFERENCE_TRANSACTION
}

# Encapsulates the Split Funding Option object item
type SplitFundingOptions {
  # Funding Instrument ID
  id: ID!

  # Funding Instrument Object
  fundingInstrument: FundingInstrument!

  # Determines eligibility for a Primary/Backup funding instrument
  isEligibleForPrimaryInstrument: Boolean!

  # Highlights the maxiumum amount for this funding instrument if there is a limit
  availableAmount: Amount

  # Determine if user must use the full amount for this instrument like INCENTIVEs
  mustUseFullAmount: Boolean!

  # Determines whether user can edit the amount in the UX
  canEditAmount: Boolean!

  # List of Funding Instrument IDs this funding option can split with
  canSplitWith: [ID]!
}

# Supported funding sources returned by IDS(Instrument Definition Service)
type SupportedFundingSource {
  # Brand name of the funding source(Ex: 'VISA', 'AMEX', 'MASTER_CARD', 'DISCOVER')
  brand: CardIssuerType

  # Logo image of the funding source brand
  brandLogoUrl: GenericURL

  # Issuers of the funding source brand
  issuers: [SupportedFundingSourceIssuer]
}

# Issuers of a funding source's brand returned by IDS
type SupportedFundingSourceIssuer {
  # Issuer's name
  name: String

  # Issuer's possible subtypes(Ex: 'CREDIT', 'DEBIT')
  usage: [FundingInstrumentSubType]

  # Issuer's logo image url
  issuerLogoUrl: GenericURL

  # Issuer's priority rank to show
  rank: Int
}

# Encapsulates all properties related to a completed payment.
type CompletedPaymentInfo {
  # The transaction's ID (Ex: '57E19243DN3823220').
  transactionId: String

  # The receipt ID (Ex: '8L1648555R462703G').
  receiptId: String

  # The transaction's state (Ex: 'COMPLETED' or 'PENDING').
  transactionState: TransactionState

  # Soft descriptor about the merchant, appears on bank statements (Ex: 'PP*SPECIALDAYW').
  softDescriptor: String

  # Postback data about payment that merchant's can leverage
  postbackData: JSON
}

# An enumeration of states that a Transaction can be in.
# PENDING, COMPLETED, REFUNDED, PARTIALLY_REFUNDED or DENIED
enum TransactionState {
  # The transaction is pending.
  PENDING

  # The transaction has successfully completed.
  COMPLETED

  # The transaction was fully refunded.
  REFUNDED

  # The transaction was partially refunded.
  PARTIALLY_REFUNDED

  # PayPal has declined to process this transaction.
  DENIED

  # Transaction authorized
  AUTHORIZED
}

# Encapsulates all properties related to an Amount.
input AmountInput {
  # Amount's currency code (Ex: 'USD')
  currencyCode: String

  # Amount's currency value (Ex: '0.01')
  currencyValue: String
}

# Encapsulates all properties related to the cryptocurrency quote.
type CryptocurrencyQuote {
  # Quote ID
  id: String

  # Symbol of the cryptocurrency
  symbol: CryptocurrencySymbol

  # Total amount that user's crypto asset is worth
  totalAmount: Amount

  # Quantity of the asset that would be used for the sell
  quantity: String

  # Amount for 1 of the asset (effectively the rate)
  assetPrice: Amount
}

# Encapsulates all properties related credit offers for non-members.
type NonMemberCreditOffers {
  # All the eligible non-member offers for a particular transaction
  allOffers: [NonMemberCreditOffer]
}

# Encapsulates all properties related to an individual credit offer for non members.
type NonMemberCreditOffer {
  # APR rate for the offer
  apr: Rate

  # Credit type (e.g. INST for installment, NI for no interest, PUI for pay upon invoice, etc)
  creditOfferType: CreditOfferType

  # Unique identifier representing the credit product being offered
  creditProductIdentifier: CreditProductType

  # Encapsulates all properties related to the offer's down payment
  downPayment: CreditDownPayment

  # Estimated installments for a credit offer that has installments
  estimatedInstallments: [InstallmentSchedule]

  # Flag indicating if the offer is eligible
  isEligible: Boolean

  # Flag indicating if there are additional offers with the same APR, same credit type,
  # and same eligibility
  isMultipleApr: Boolean

  # Flag indicating if the option's credit fee is funded by PayPal.
  # If false it is funded by the merchant
  isPayPalSubsidy: Boolean

  # The monthly percentage rate of the credit offer
  monthlyPercentageRate: Rate

  # The annualized rate - calculated as the monthly rate multiplied by 12
  nominalRate: Rate

  # The currency and amount for a financial transaction, such as a balance or payment due.
  periodicPayment: Amount

  # The total cost, including principal and interest, of the financed transaction
  totalCost: Amount

  # The amount of interest to be paid over the course of the financed transaction
  totalInterest: Amount

  # The total term of the credit offer
  totalNumberOfPayments: Int
}

# Encapsulates all properties related to a rate (i.e. a percentage).
type Rate {
  # Number formatted to the localized style (e.g. 0,25)
  formattedNumber: String

  # Number as a percentage formatted to the localized style (e.g. 0,25 %)
  formattedNumberAsPercentage: String

  # Unformatted number (e.g. 0.25)
  unformattedNumber: String
}

# Encapsulates all properties related to the down payment for a credit offer.
type CreditDownPayment {
  # The rate of the down payment relative to the total cost
  # e.g. For a $25 down payment on a $100 transaction the rate is 25%
  rate: Rate

  # The total currency amount of the down payment
  amount: Amount
}

# Encapsulates all properties of existing billing agreement Id.
# Ex: balancePreference, stickyFundingOptionId, billingAgreementId
type ExistingBillingAgreementDetails {
  # Billing Agreement Id, ex: B-55N53089XX761722H
  id: String

  # Sticky fuding instrument of the Billing Agreement
  stickyFundingInstrument: FundingInstrument

  # Balance Preference of the Billing Agreement
  balancePreference: BalancePreference
}

# An enumeration of types that a BalancePreference can be.
# OPT_IN or OPT_OUT
enum BalancePreference {
  # If Buyer chooses to use Balance for BA payments
  OPT_IN

  # If Buyer chooses not to use Balance for BA payments
  OPT_OUT
}

# Address input type
input AddressInput {
  # The first name of the address (Ex: 'John')
  givenName: String

  # The last name of the address (Ex: 'Smith')
  familyName: String

  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String

  # An Address second line street address (Ex: 'Apt 123')
  line2: String

  # An Address city (Ex: 'San Jose')
  city: String

  # An Address state/province (Ex: 'CA')
  state: String

  # An Address postal code (Ex: '95131')
  postalCode: String

  # An Address two-letter country code (Ex: 'US')
  country: String!

  # An address quality from user
  accountQuality: AccountQualityAddressInput
}

# Encapsulates all properties related to an Account Quality address.
input AccountQualityAddressInput {
  # Address's  Auto Complete Type (Ex: 'GOOGLE / BROWSER / UNKNOWN /
  # MERCHANT_PREFILLED / ANS / MANUAL'). This type will be set from specific enum
  # depending on how user chose to auto complete the address
  autoCompleteType: AddressAutoCompleteType

  # Address's isUserModified (Ex: true/false). This will be set as true incase
  # user selected one of the autoComplete address and still modifies it
  isUserModified: Boolean

  # 2FA verfication id if buyer has initialized phone confirmation during checkout onboarding flow
  twoFactorPhoneVerificationId: String
}

# An enumeration of types that an address can be completed by an user. (Ex:
# 'GOOGLE / BROWSER / UNKNOWN / MERCHANT_PREFILLED / ANS / MANUAL')
enum AddressAutoCompleteType {
  # An address populated from Google
  GOOGLE

  # An address selected by user incase auto-populated from BROWSER
  BROWSER

  # An address unknown
  UNKNOWN

  # An address populated from Merchant
  MERCHANT_PREFILLED

  # An address populated from normalized service
  ANS

  # An address added manually by user
  MANUAL
}

# Card input type represents a card to be added to an account
input CardInput {
  # 13 to 19 digits number of a card. (Ex: '4111111111111111')
  cardNumber: String!

  # Postal code of  (Ex: '123')
  postalCode: String

  # 3 or 4 digits security code of a card (Ex: '123')
  securityCode: String

  # Expiration date of a card (Ex: '02/2020')
  expirationDate: String

  # Starting month for the given card. (Ex: '01', '02', '12')
  issueDate: String

  # The card issuer as a CardIssuerType (Ex: 'VISA', 'AMEX', 'MASTER_CARD', 'DISCOVER')
  type: CardIssuerType

  # Card product class (Ex: 'CREDIT', 'DEBIT')
  productClass: CardProductClass
}

# An enumeration of types that card product classes
# CREDIT, DEBIT
enum CardProductClass {
  # Credit Card
  CREDIT

  # Debit Card
  DEBIT

  # Gift Card
  GIFT

  # Mixed card
  MIXED

  # PayPal Prepaid card
  PAYPAL_PREPAID

  # Prepaid card
  PREPAID

  # Tokenized card
  TOKENIZED

  # Vaulted card
  VAULTED

  # Unknown card
  UNKNOWN
}

# An enumeration of intents that a Cart can have. SALE, AUTHORIZE, or ORDER
enum FundingEligibilityIntent {
  # The Cart's intent is for Sale transactions
  SALE

  # The Cart's intent is for Capture transactions
  CAPTURE

  # The Cart's intent is for Auth transactions
  AUTHORIZE

  # The Cart's intent is for Order transactions
  ORDER

  # Tokenize only, with no transaction
  TOKENIZE

  # Subscription only, with no transaction
  SUBSCRIPTION
}

# Supported payment methods
enum SupportedPaymentMethodsType {
  # Credit card
  CARD

  # PayPal Credit
  CREDIT

  # PayPal Pay Later
  PAYLATER

  # Venmo
  VENMO

  # Itau
  ITAU

  # ELV -- Used typically in Europe -- [Link](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area)
  ELV

  # SEPA -- Used typically in Europe -- [Link](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area)
  SEPA

  # IDEAL -- Used in the Netherlands -- [Link](https://www.ideal.nl/en/consumers/what-is-ideal/)
  IDEAL

  # BANCONTACT -- Used typically in Belgium -- [Link](https://www.bancontact.com/en/what-does-bancontact-stand-for)
  BANCONTACT

  # GIROPAY -- Used typically in Germany -- [Link](https://en.wikipedia.org/wiki/Giropay)
  GIROPAY

  # EPS -- Used typically in Austria -- [Link](https://www.adyen.com/payment-methods/eps)
  EPS

  # SOFORT -- Used typically in Germany -- [Link](https://www.adyen.com/payment-methods/sofort)
  SOFORT

  # MYBANK -- Used typically in Italy -- [Link](https://www.mybank.eu/)
  MYBANK

  # P24 -- Used typically in Poland -- [Link](https://stripe.com/docs/sources/p24)
  P24

  # Zimpler -- Used typically for gambling -- [Link](https://www.zimpler.com/)
  ZIMPLER

  # WeChat Pay -- Used in China -- [Link](https://stripe.com/docs/sources/wechat-pay)
  WECHATPAY

  # Blik -- Used in poland -- [Link](ask product)
  BLIK

  # Trustly -- Used in poland -- [Link](ask product)
  TRUSTLY

  # Payu -- Used in poland -- [Link](ask product)
  PAYU

  # OXXO -- Used in Mexico -- [Link](https://www.allpago.com/our-services/mexican-payment-processing/)
  OXXO

  # Boleto -- Used in Brazil -- [Link](https://en.wikipedia.org/wiki/Boleto)
  BOLETO

  # Boletobancario -- Used in Brazil -- [Link](https://en.wikipedia.org/wiki/Boleto)
  BOLETOBANCARIO

  # Maxima -- Used in Lithuania -- [Link](https://docs.paymentwall.com/payment-method/maxima)
  MAXIMA

  # Mercadopgo -- Used in brazil and mexico -- [Link](https://www.mercadopago.com.ar/)
  MERCADOPAGO

  # Multibanco -- Used in portugal  -- [Link](https://en.wikipedia.org/wiki/multibanco)
  MULTIBANCO

  # Satispay -- Used in multiple European countries -- -- [Link](https://www.satispay.com/it-it/)
  SATISPAY

  # Apple Pay -- [Link](https://en.wikipedia.org/wiki/Apple_Pay)
  APPLEPAY

  # Paidy -- Used in Japan -- [Link](https://en.wikipedia.org/wiki/Paidy)
  PAIDY
}

# Supported card vendors
enum SupportedCardsType {
  # VISA
  VISA

  # MASTERCARD
  MASTERCARD

  # AMERICAN EXPRESS
  AMEX

  # DISCOVER
  DISCOVER

  # JCB
  JCB

  # ELO
  ELO

  # HIPER
  HIPER
}

# Encapsulates all properties related to eligible Payment Methods.
type FundingEligibility {
  # PayPal
  paypal: PaymentEligibility!

  # Cards
  card: CardEligibility!

  # PayPal Credit
  credit: PaymentEligibility!

  # PayPal Pay Later
  paylater: PaymentEligibility!

  # Venmo
  venmo: PaymentEligibility!

  # Itau
  itau: PaymentEligibility!

  # Sepa
  sepa: PaymentEligibility!

  # Ideal
  ideal: PaymentEligibility!

  # Bancontact
  bancontact: PaymentEligibility!

  # Giropay
  giropay: PaymentEligibility!

  # EPS
  eps: PaymentEligibility!

  # SOFORT
  sofort: PaymentEligibility!

  # MYBANK
  mybank: PaymentEligibility!

  # p24
  p24: PaymentEligibility!

  # Zimpler
  zimpler: PaymentEligibility!

  # WeChat Pay
  wechatpay: PaymentEligibility!

  # Blik
  blik: PaymentEligibility!

  # Payu
  payu: PaymentEligibility!

  # Trustly
  trustly: PaymentEligibility!

  # OXXO
  oxxo: PaymentEligibility!

  # Boleto
  boleto: PaymentEligibility!

  # Boletobancario
  boletobancario: PaymentEligibility!

  # Maxima
  maxima: PaymentEligibility!

  # Mercadopago
  mercadopago: PaymentEligibility!

  # ApplePay
  applepay: PaymentEligibility!

  # Multibanco
  multibanco: PaymentEligibility!

  # Satispay
  satispay: PaymentEligibility!

  # Paidy
  paidy: PaymentEligibility!
}

# Container type for payment eligibility flags for EPM (eligible payment methods)
type PaymentEligibility {
  # Whether or not a user is eligible for a payment type (Ex: VENMO)
  eligible: Boolean

  # Reasons why a payment is eligible
  reasons: [String]!

  # whether the payment method is branded or not
  branded: Boolean

  # Whether or not payment type is vaultable
  vaultable: Boolean

  # Vaulted Instruments for payment method
  vaultedInstruments: [VaultInstrumentData]

  # Child products for a given funding source
  products: FundingProductsEligibility!
}

# Data for vaulted instrument
type VaultInstrumentData {
  # id representing the vaulted instrument
  id: String

  # label representing the vaulted instrument
  label: VaultInstrumentLabelInfo
}

# Label Info for Vaulted Instrument
type VaultInstrumentLabelInfo {
  # Description for the vaulted instrument (Ex: PayPal for foo.bar.com)
  description: String
}

# Container type for a funding source's child product eligibility
type FundingProductsEligibility {
  # Credit
  credit: FundingProductEligibility!

  # Pay In 4
  payIn4: FundingProductEligibility!

  # Pay In 3
  payIn3: FundingProductEligibility!

  # Pay Later
  paylater: FundingProductEligibility!

  # EZ Pay
  ezpay: FundingProductEligibility!

  # Pay After Delivery
  pad: FundingProductEligibility!
}

# Container type for funding product eligibility
type FundingProductEligibility {
  # Whether or not a user is eligible for a funding product
  eligible: Boolean

  # Used to determine the localization source of a funding product
  variant: String

  # Reasons why a funding product is eligible. This is an internal field and is not accessible for external use
  reasons: [String]
}

# Container type for card eligibility, branded card eligibility, and associated vendors
type CardEligibility {
  # Whether or not a card type is eligible
  eligible: Boolean!

  # Reasons why card is eligible. This is an internal field and is not accessible for external use
  reasons: [String]!

  # Whether or not a card is branded
  branded: Boolean

  # Whether installments are eligible
  installments: Boolean

  # Associated credit card vendors.  See CardVendorEligibility
  vendors: CardVendorEligibility!

  # Whether Guest Checkout is enabled
  guestEnabled: Boolean
}

# Container type for a payment's eligibility for card vendors
type CardVendorEligibility {
  # VISA
  visa: PaymentEligibility!

  # MASTERCARD
  mastercard: PaymentEligibility!

  # AMEX (or American Express)
  amex: PaymentEligibility!

  # DISCOVER
  discover: PaymentEligibility!

  # Hipercard -- Mostly used in Brazil
  hiper: PaymentEligibility!

  # ELO -- Mostly used in Brazil
  elo: PaymentEligibility!

  # JCB -- Mostly used in Japan
  jcb: PaymentEligibility!
}

# For experiments field on root Query type
input ExperimentInput {
  # Name of experiment. (Ex: 'pxp_hermesnode_kmli')
  name: String!

  # Any kind of params (Ex: Objects, Arrays, etc.)
  params: JSON
}

# Encapsulates everything related to a PXP test.
# Ex: type, values, stringValue
#
# Required auth states: Any
type Experiment {
  # The name of this experiment.
  name: String!

  # An Array of Treatment types, which are treatments associated with this experiment.
  treatments: [Treatment]!

  # The tracking tags associated with a Experiment.
  trackingTags: [TrackingTag]

  # The tracking tags associated with a Experiment, but represented as a String.
  # (Ex: 'qt=6496,2252,7579;qc=2621440,2623488,2621440;uqt=6001;uqc=2621440;ot=;os=')
  trackingTagsString: String
}

# Encapsulates everything related to a Treatment. Ex: treatmentId, name, factors
type Treatment {
  # ID of the treatment
  treatmentId: ID

  # Name of the treatment
  name: String

  # An Array of Factor types, which are key/value pairs associated with this experiment.
  factors: [Factor]
}

# Encapsulates everything related to a Factor. Ex: name, value
type Factor {
  # Name of the Factor
  name: String

  # Value of the Factor
  value: String
}

# Encapsulates everything related to a TrackingTag. Ex: type, values, stringValue
type TrackingTag {
  # The type of the TrackingTag (Ex: 'qc')
  type: TrackingTagType

  # The values of the TrackingTag, represented as an Array (Ex: [6496, 2252, 1234])
  values: [ID]

  # The values of the TrackingTag, represented as a String (Ex: '6496,2252,1234')
  stringValue: String
}

# An enumeration of types that TrackingTag can have. qe, qt, qc, qp, etc
# The meaning of these tags have been lost over time
# Not even the PXP team knows what they are ;-)
# But, they're useful for clients who want to log these values to FPTI.
# See https://github.paypal.com/Experimentation-R/pxpexecserv/blob/8c511074aee6cbd8a0177c4013e14487774ca380/ExperimentationExecution/src/main/java/com/paypal/experimentation/domain/core/common/TagNames.java#L3
enum TrackingTagType {
  # Nobody knows what this means
  CT

  # Nobody knows what this means
  EXOE

  # Nobody knows what this means
  EXOS

  # Nobody knows what this means
  EXOT

  # Nobody knows what this means
  OE

  # Nobody knows what this means
  OS

  # Nobody knows what this means
  OT

  # Nobody knows what this means
  PXPM

  # Nobody knows what this means
  PXPMG

  # Nobody knows what this means
  PXPMU

  # Qualified Context
  QC

  # Qualified Experiment
  QE

  # Nobody knows what this means
  QP

  # Qualified Treatment
  QT

  # Nobody knows what this means
  SE

  # Nobody knows what this means
  ST

  # Nobody knows what this means
  UPE

  # Nobody knows what this means
  UPT

  # Nobody knows what this means
  UQC

  # Nobody knows what this means
  UQP

  # Nobody knows what this means
  UQT

  # Nobody knows what this means
  XT
}

# A container type for locale metadata.
type LocaleMetadata {
  # A container type for address metadata.  See LocaleAddressMetadata
  address(
    countryCode: CountryCodes!
    languageCode: CheckoutContentLanguageCode
  ): LocaleAddressMetadata

  # A list of PayPal business regions a given country is part of. Ex: ['LATAM', 'EM']
  businessRegions(countryCode: CountryCodes!): [PayPalBusinessRegions]!

  # A container type for credit card metadata.  See LocaleCreditCardMetadata
  card(countryCode: CountryCodes): LocaleCreditCardMetadata

  # The country's three character currency code. Ex: USD
  currencyCode(countryCode: CountryCodes): SupportedCountryCurrencies

  # The country's currency symbol. Ex: $
  currencySymbol(
    countryCode: CountryCodes!
    languageCode: CheckoutContentLanguageCode
  ): String

  # A container type for date metadata.  See LocaleDateMetadata
  date(
    countryCode: CountryCodes!
    languageCode: CheckoutContentLanguageCode
  ): LocaleDateMetadata

  # Fields required for a user to sign up for a full member account in
  # a given country.
  knowYourCustomerFields(countryCode: CountryCodes!): [KnowYourCustomerField]!

  # A container type for name metadata.  See LocaleNameMetadata
  name(
    countryCode: CountryCodes!
    languageCode: CheckoutContentLanguageCode
  ): LocaleNameMetadata

  # A container type for phone metadata.  See LocalePhoneMetadata
  phone(
    countryCode: CountryCodes!
    languageCode: CheckoutContentLanguageCode
  ): LocalePhoneMetadata

  # Sugguested default language for given country
  #
  # Required auth states: Any
  suggestedDefaultLanguage(
    countryCode: CountryCodes!
  ): CheckoutContentLanguageCode

  # A list of supported languages for a given country. Ex: ['en', 'fr', 'es', 'zh']
  supportedLanguages(
    countryCode: CountryCodes!
  ): [CheckoutContentLanguageCode!]!

  # A container type for territory metadata.  See LocaleTerritoryMetadata
  territories(
    countryCode: CountryCodes!
    languageCode: CheckoutContentLanguageCode
  ): [LocaleTerritoryMetadata!]!

  # A container type for number metadata. see LocaleNumberMetadata
  number(
    countryCode: CountryCodes!
    languageCode: CheckoutContentLanguageCode
  ): LocaleNumberMetadata!

  # A container for the metadata pertaining to how a country displays currency
  currency(
    countryCode: CountryCodes!
    languageCode: CheckoutContentLanguageCode
  ): LocaleCurrencyMetadata!

  # A container type for directionality based on Language
  directionality(languageCode: CheckoutContentCountryCode): String!
}

# A container type for address metadata.
type LocaleAddressMetadata {
  # A list of ordered fields to be displayed in an address form
  layout: [LocaleAddressField]

  # A list of localized content strings to be used for the address input labels
  strings: LocaleAddressStrings

  # The address client metadata from Griffin
  #
  # https://github.paypal.com/pages/Globalization-R/griffin-paypal/docs/core-node.html#address-options
  griffinMetadata: JSON

  # A list of ordered portable fields to be displayed in an address form
  portableLayout: [AddressLineLayout]
}

# A container type for address input field metadata.
type LocaleAddressField {
  # Name of field - Ex: city
  name: String

  # Validation regex of field
  regex: String

  # Minimum length of field - Ex: 1
  minLength: Int

  # Maximum length of field - Ex: 5
  maxLength: Int

  # Whether or not a field is required
  isRequired: Boolean
}

# A container type for address string metadata.
type LocaleAddressStrings {
  # Label for the city field
  cityLabel: String

  # Label for the line1 field
  line1Label: String

  # Label for the line2 field
  line2Label: String

  # Label for optional address fields
  optionalLabel: String

  # Label for the postal code field
  postcodeLabel: String

  # Label for the line2 field
  selectLabel: String

  # Label for the state field
  stateLabel: String

  # List of LocaleAddressState types
  stateList: [LocaleAddressState!]

  # Localized validation error for the postal code
  validationError: String
}

# A container type for address state labels.
type LocaleAddressState {
  # The display text for a state, EX: California, Buenos Aires (Provincia), etc
  displayText: String

  # The input value of a state, EX: CA, BUENOS AIRES, etc
  value: String
}

# A container type for portable address metadata
type AddressLineLayout {
  # A list of parts in the address line
  parts: [AddressLinePart]
}

# A container type for address input field metadata.
type AddressLinePart {
  # Name of field - Ex: adminArea1
  name: String

  # Validation regex of field
  regex: String

  # Minimum length of field - Ex: 1
  minLength: Int

  # Maximum length of field - Ex: 5
  maxLength: Int

  # Whether or not a field is required
  isRequired: Boolean

  # Label for the field
  label: String

  # Allowed values for the field
  allowedValues: [AddressAllowedValues]
}

# A container type for address field's allowed values and labels.
type AddressAllowedValues {
  # The display text for the field EX: a state can have: California, Buenos Aires (Provincia), etc
  displayText: String

  # The input value for the field EX: a state can have: CA, BUENOS AIRES, etc
  value: String
}

# An enumeration of PayPal business regions
enum PayPalBusinessRegions {
  # Asia Pacific
  APAC

  # Emerging Market
  EM

  # Europe, Middle East, and Africa
  EMEA

  # Latin America
  LATAM

  # North America
  NA
}

# A container type for credit card metadata.
type LocaleCreditCardMetadata {
  # Returns a list of formatting and validation metadata for types of credit cards
  # Average SLA response time - 50ms
  #
  # Required Roles: None.
  types: [CardRule]!
}

# Contains all validation rules/metadata for a credit card
type CardRule {
  # Rules of card fields
  fields: FieldRules!

  # Contains information about maximum/minimum card number and security code length
  length: CardNumberLengthRules!

  # Indicate whether luhn validation is required
  luhnValidationRequired: Boolean!

  # Name of the card's type
  name: String!

  # Regex to validate card type. (Ex: /^(6011|65|64[4-9]|622|36|38|30[0-5])/)
  pattern: String

  # Indices for injecting spaces in a formatted credit card string (Ex: [4,8,12])
  spaceIndices: [Int]!
}

# The rules of the card field
type FieldRules {
  # Indicate whether billing address is required
  address: Boolean!

  # Indicate whether security code is required
  cvv: Boolean!

  # Indicate whether date of birth is required
  dob: Boolean!

  # Indicate whether expiration data is required
  expiry: Boolean!

  # Indicate whether issuer bank is required
  issue: Boolean!

  # Indicate whether phone number is required
  phone: Boolean!
}

# Contains validation rules for credit card number and CSC length
type CardNumberLengthRules {
  # Minimum length of card number
  cardNumberMinLength: Int!

  # Maximum length of card number
  cardNumberMaxLength: Int!

  # Length of security code
  securityCodeLength: Int!
}

# A container type for date metadata.
type LocaleDateMetadata {
  # Format display for the user
  displayFormat: String

  # Date format/pattern for backend use (consistently using letters d, m, y)
  datePattern: String

  # The localized label for an expiry date
  #
  # > Example for en_US: *MM/YY*
  expiryDatePatternLabel: String
}

# An enumeration of the KYC (KnowYourCustomer) field types that can be required for sign up.
enum KnowYourCustomerField {
  # A user's date of birth
  DATE_OF_BIRTH

  # A user's gender
  GENDER

  # A user's identity document number
  IDENTITY_DOCUMENT_NUMBER

  # A user's identity document type
  IDENTITY_DOCUMENT_TYPE

  # A user's nationality
  NATIONALITY

  # A user's occupation
  OCCUPATION

  # A user's place of birth
  PLACE_OF_BIRTH

  # A user's secondary identity document number
  SECONDARY_IDENTITY_DOCUMENT_NUMBER

  # A user's secondary identity document type
  SECONDARY_IDENTITY_DOCUMENT_TYPE
}

# A container type for date metadata.
type LocaleNameMetadata {
  # A list of ordered fields to be displayed in an name form
  layout: [LocaleNameField]

  # A list of localized content strings to be used for the name input labels
  strings: LocaleNameStrings

  # Object for name griffin metadata
  griffinMetadata: JSON
}

# The metadata for a particular name.
type LocaleNameField {
  # The name of field Ex-givenName
  name: String

  # Indicates whether the name field is required
  isRequired: Boolean
}

# A container type for name string metadata.
type LocaleNameStrings {
  # Label for the givenName field
  givenNameLabel: String

  # Label to display optional
  optionalLabel: String

  # Label for the surname field
  surnameLabel: String
}

# A container type for phone metadata.
type LocalePhoneMetadata {
  # A container type for a phone's input masks.  See LocalePhoneMasks
  masks: LocalePhoneMasks

  # A container type for a phone's input patterns.  See LocalePhonePatterns
  patterns: LocalePhonePatterns
}

# A container type for input masks for phones.
type LocalePhoneMasks {
  # A mask used for input fields -- Ex: 00000 00000
  fixed: String

  # A mask used for input fields -- Ex: 0000 000000
  mobile: String
}

# A container type for input patterns for phones.
type LocalePhonePatterns {
  # A fixed line phone pattern -- Ex: '^(0)?((?:00800|1\d{0,5}|[2-9]\d\d)\d{7})$'
  fixed: String

  # A mobile phone pattern -- Ex: '^(0)?((?:00800|1\d{0,5}|[2-9]\d\d)\d{7})$'
  mobile: String

  # A default phone pattern -- Ex: '^(0)?((?:00800|1\d{0,5}|[2-9]\d\d)\d{7})$'
  default: String
}

# A container type for territory metadata.
type LocaleTerritoryMetadata {
  # A two character country code -- Ex: US
  code: CountryCodes

  # The international dialing code for the territory -- Ex: 1
  internationalDialingCode: Int

  # The full name of the territory -- Ex: United States
  name: String

  # The name of the business region the country belongs to.
  # Canada and the United States return 'NA'
  # Ex: EMEA
  region: String

  # The suggested default language for the territory -- Ex: en
  suggestedDefaultLanguage: CheckoutContentLanguageCode
}

# A container type for number metadata.
type LocaleNumberMetadata {
  # Character used to signify decimal. EXAMPLE: .
  DECIMAL_SEP: String!

  # Character used to signify number grouping. EXAMPLE: 1,000
  GROUP_SEP: String!

  # Character used to signify percent. EXAMPLE: %
  PERCENT: String!

  # Character used to signify zero digit. EXAMPLE: 0
  ZERO_DIGIT: String!

  # Character used to signify plus sign. EXAMPLE: +
  PLUS_SIGN: String!

  # Character used to signify minus sign. EXAMPLE: -
  MINUS_SIGN: String!

  # Character used to signify exponent sign. EXAMPLE: E
  EXP_SYMBOL: String!

  # Character used to signify per mille sign. EXAMPLE: ‰
  PERMILL: String!

  # Character used to signify per sign. EXAMPLE: ∞
  INFINITY: String!

  # Character used to signify not a number sign. EXAMPLE: NaN
  NAN: String!

  # Character sequence used to signify decimal pattern sign. EXAMPLE: #,##0.###
  DECIMAL_PATTERN: String!

  # Character sequence used to signify scientific notation pattern sign. EXAMPLE: #E0
  SCIENTIFIC_PATTERN: String!

  # Character sequence used to signify percent pattern sign. EXAMPLE: #,##0%
  PERCENT_PATTERN: String!

  # Object for name griffin metadata
  griffinMetadata: JSON
}

# A container for the metadata pertaining to how a country displays currency
type LocaleCurrencyMetadata {
  # Object map of country currency denomincation to currency character
  # EXAMPLE: USD -> $
  griffinCurrencySupportedSymbolsMetadata: SupportedCurrencySymbolsMetadata!

  # A container for metadata pertaining to currency styles
  styles: LocaleStylesCurrencyMetadata!

  # Object map of country currency denomincation to decimal digit length
  # EXAMPLE: USD -> 2
  griffinClientDigitsMetadata: Int!

  # Country Currency code
  code: SupportedCountryCurrencies!
}

# An enumeration of types that currency could have. International, code, plural etc.
type SupportedCurrencySymbolsMetadata {
  # A pattern which represent the currency international
  international: String!

  # A pattern which represents the code of current country (Ex: $ for an en-US locale)
  code: String!

  # A pattern for indicating what represent (Ex: 'Plural 1 -> en-US'
  plural: String!

  # The separator according to the current locale
  separator: String!

  # A symbol according to the current locale
  symbol: String!
}

# A container for metadata pertaining to currency styles
type LocaleStylesCurrencyMetadata {
  # Currency style metadata
  currency: String!

  # ISOCurrency style metadata
  iSOCurrency: String!

  # SymbolISO Currency style metadata
  symbolISOCurrency: String!
}

# Countries which support localized strings from xo-content
enum CheckoutContentCountryCode {
  # AUSTRIA
  AT

  # AUSTRALIA
  AU

  # BELGIUM
  BE

  # BRAZIL
  BR

  # CHINA
  C2

  # CANADA
  CA

  # SWITZERLAND
  CH

  # CZECH REPUBLIC
  CZ

  # GERMANY
  DE

  # DENMARK
  DK

  # ESTONIA
  EE

  # SPAIN
  ES

  # FINLAND
  FI

  # FRANCE
  FR

  # UNITED KINGDOM
  GB

  # GREECE
  GR

  # APAC
  GROUP_APAC

  # EMEA
  GROUP_EMEA

  # LATAM
  GROUP_LATAM

  # HONG KONG
  HK

  # HUNGARY
  HU

  # INDONESIA
  ID

  # IRELAND
  IE

  # ISRAEL
  IL

  # INDIA
  IN

  # ITALY
  IT

  # JAPAN
  JP

  # REPUBLIC OF KOREA
  KR

  # LITHUANIA
  LT

  # LUXEMBOURG
  LU

  # LATVIA
  LV

  # MEXICO
  MX

  # MALAYSIA
  MY

  # NETHERLANDS
  NL

  # NORWAY
  NO

  # NEW ZEALAND
  NZ

  # PHILIPPINES
  PH

  # POLAND
  PL

  # PORTUGAL
  PT

  # ROMANIA
  RO

  # RUSSIAN FEDERATION
  RU

  # SWEDEN
  SE

  # SINGAPORE
  SG

  # SLOVENIA
  SI

  # SLOVAKIA
  SK

  # THAILAND
  TH

  # TURKEY
  TR

  # TAIWAN
  TW

  # UKRAINE
  UA

  # UNITED STATES
  US

  # VIETNAM
  VN
}

# Encapsulates all properties related to flow eligible Methods.
type FlowEligibleMethods {
  # Signup eligibilty
  signup: Boolean!

  # Guest eligibility
  guest: Boolean!
}

# Encapsulates all properties related to installments.
# Ex: installmentType, hasDiscount, Installments etc.
type EligibleInstallments {
  # Installment Type
  installmentType: InstallmentType

  # Whether or not discount is applicable for the payment
  hasDiscount: Boolean

  # Eligible Installment options
  installments: [InstallmentOption]
}

# An enumeration of Installment Type.
# SINGLE, MULTIPLE
enum InstallmentType {
  # Single Installment term
  SINGLE

  # Multiple Installments terms
  MULTIPLE
}

# Encapsulates all data related to a Installment option.
# Ex: term, monthly_payment, total, installmentDetail, etc.
type InstallmentOption {
  # The term over which to finance the transaction
  term: Int

  # Formatted Monthly payment value for current Installment term
  formattedMonthlyPayment: String

  # Formatted value of Purchase cost + total cost APR + total consumer fee (if any)
  formattedTotalAmount: String

  # Formatted Value of Discount amount given for the current Installment term
  formattedDiscountAmount: String

  # Details for the current Installment term like discountAmount, discountPercent and monthlyPayment
  installmentDetail: InstallmentDetail
}

# Encapsulates all data related to a Installment Details.
# Ex: monthlyPayment, discountAmount, discountPercent, etc.
type InstallmentDetail {
  # Monthly payment value for current Installment term
  monthlyPayment: Amount

  # Discount amount applied to the payment, if any
  discountAmount: Amount

  # Discount percentage applied to the payment, if any
  discountPercent: Float
}

# Enumeration for Address Normalization's ansraptor scope
enum AddressNormalizationScopes {
  # validate every inputs of address
  ALL

  # validate the province, locality, postalcode, street, house number
  DELIVERYPOINT_LEVEL

  # validate province locality. postal code
  LOCALITY_LEVEL

  # validate the province, locality, postalcode. street
  STREET_LEVEL
}

# Enumeration for Address Normalization's ansraptor process mode params
enum AddressNormalizationProcessModes {
  # For prefill case
  FASTCOMPLETION

  # For normalization case
  INTERACTIVE
}

# Encapsulates all properties we want to extract from a normalized address. Ex: line1, city, postalCode
type NormalizedAddress {
  # A noramlized billing address first line street address (Ex: '2211 North 1st St')
  line1: String

  # A normalized billing address second line street address (Ex: 'Apt 123')
  line2: String

  # A normalized billing address city (Ex: 'San Jose')
  city: String

  # A normalized billing address state/province (Ex: 'CA')
  state: String

  # A normalized billing address postal code (Ex: '95131')
  postalCode: String

  # A normalized billing address two-letter country code (Ex: 'US')
  country: CountryCodes

  # A container for addresses that have been formatted by Griifin for display on the UI
  griffinFormattedAddresses: GriffinFormattedAddresses

  # It returns true if the input address is same as normalized address returned by ANS
  alreadyNormalized: Boolean
}

# Encapsulates all properties related to a GDPR banner for client rendering
type GdprBanner {
  # A string of CSS properties
  css: String!

  # A string of HTML properties
  html: String!

  # A string of JavaScript properties
  js: String!
}

# Encapsulates all properties related to the cookie banner for client rendering
type CookieBanner {
  # A string of the CSS styles tag
  css: String!

  # A string of the HTML markup
  html: String!

  # A string of JavaScript script tag
  js: String!
}

# An enumeration of all flow types accepted by Notice and Consent evalPolicy API.
# Based on those flags, the Notice and Consent API will determine what to do based on guest and member use cases.
enum EvalPolicyFlowType {
  # For member use cases, we need to pass in the API flow as CHECKOUT.
  CHECKOUT

  # For guest and sign up use cases, we need to pass in the API flow ONBOARDING
  ONBOARDING
}

# Encapsulates all properties related to the Consent API response related to user legal consent
type UserAgreement {
  # A string of the mayor version of the User Agreement
  majorVersion: String!

  # A string of the minor version of the User Agreement
  minorVersion: String!

  # A string of the active url of the User Agreement
  activeUrl: String!

  # A string of the url of the Upcoming Policies
  upcomingUrl: String!
}

# An enumeration of types that deviceType can have.
enum DeviceType {
  # Mobile
  MOBILE

  # Tablet
  TABLET

  # Desktop
  DESKTOP
}

# Encapsulates all properties related to the app download banner for client rendering
type AppDownloadBanner {
  # A string of the CSS styles tag
  css: String!

  # A string of the HTML markup
  html: String!

  # A string of JavaScript script tag
  js: String!
}

# Locale type
input LocaleInput {
  # language
  lang: String

  # country
  country: String
}

# List of all button labels for Smart Payment Buttons
enum ButtonLabels {
  # Paypal
  PAYPAL

  # Checkout
  CHECKOUT

  # Pay
  PAY

  # Buy Now
  BUYNOW

  # Credit: checkout.js v4 only
  CREDIT

  # Installment
  INSTALLMENT

  # Subscribe
  SUBSCRIBE

  # Donate
  DONATE
}

# Encapsulates all button types that can be rendered by the smart payment button
enum FundingButtonType {
  # PayPal
  paypal

  # Cards
  card

  # PayPal Credit
  credit

  # PayPal Pay Later
  paylater

  # Venmo
  venmo

  # Itau
  itau

  # Sepa
  sepa

  # Ideal
  ideal

  # Bancontact
  bancontact

  # Giropay
  giropay

  # EPS
  eps

  # SOFORT
  sofort

  # MYBANK
  mybank

  # p24
  p24

  # Zimpler
  zimpler

  # WeChat Pay
  wechatpay

  # Blik
  blik

  # Payu
  payu

  # Trustly
  trustly

  # OXXO
  oxxo

  # Boleto
  boleto

  # Boletobancario
  boletobancario

  # Maxima
  maxima

  # Mercadopago
  mercadopago

  # ApplePay
  applepay

  # Multibanco
  multibanco

  # Satispay
  satispay

  # Paidy
  paidy
}

# List of all button layouts for Smart Payment Buttons
enum ButtonLayouts {
  # Vertical
  vertical

  # Horizontal
  horizontal
}

# List of all button sizes for Smart Payment Buttons
enum ButtonSizes {
  # tiny
  tiny

  # small
  small

  # medium
  medium

  # large
  large

  # huge
  huge
}

# Encapsulates all properties related to DeviceInfo.
input DeviceInfo {
  # Color Depth - window.screen.colorDepth - Number of bits used to represent the
  # color of a single pixel on the screen, or in the buffer when off-screen
  # buffering is enabled.
  colorDepth: String

  # window.screen.height - Vertical resolution of the screen, in pixels
  screenHeight: String

  # window.screen.width - Horizontal resolution of the screen, in pixels
  screenWidth: String

  # window.screen.availHeight - Available vertical resolution of the screen, in pixels
  screenAvailHeight: String

  # window.screen.width - Available horizontal resolution of the screen, in pixels
  screenAvailWidth: String

  # window.devicePixelRatio - Returns the ratio between physical pixels and device independent pixels of the existing display
  devicePixelRatio: String

  # navigator.hardwareConcurrency - Number of logical processors available to run threads on the user’s device
  numCores: String

  # Browser width
  browserWidth: String

  # Browser height
  browserHeight: String

  # Example - fr_FR
  rosettaLanguage: String

  # List Browser plugins. Example - pdf,Shockwave Flash 28.0 r0
  browserPlugins: String
}

# Customization type for checkout
type CheckoutCustomization {
  # Tagline
  tagline: ElementCustomization

  # Button Text
  buttonText: ElementCustomization

  # Animation Info
  buttonAnimation: ButtonAnimationCustomization
    @deprecated(
      reason: "Renamed to design because some of the designs are not animated."
    )

  # Design Info
  buttonDesign: ButtonDesignCustomization
}

# Customization for an element in checkout (Eg: tagline in a button)
type ElementCustomization {
  # Simple Text
  text: String

  # Tracking details
  tracking: CustomizationTracking
}

# Tracking for customization
type CustomizationTracking {
  # Impression URL from MORS
  impression: String

  # Click URL from MORS
  click: String
}

# Customization for an animation in checkout
type ButtonAnimationCustomization {
  # Simple Text
  id: String

  # Simple Text
  text: String

  # Tracking details
  tracking: CustomizationTracking
}

# Customization for an design in checkout
type ButtonDesignCustomization {
  # Simple Text
  id: String

  # Simple Text
  text: String

  # Tracking details
  tracking: CustomizationTracking
}

# Interface with the FireBase api
type FireBase {
  # A user's firebase auth token
  auth(sessionUID: String!): FireBaseAuth!
}

# FireBase authentication
type FireBaseAuth {
  # The Firebase project ID
  projectID: String!

  # A client-generated session id for the user
  sessionUID: String!

  # The firebase session token generated for the user
  sessionToken: String!
}

# Schema to do mobile sdk eligibility
type MobileSDKEligibility {
  # Boolean response conveying eligibility for this flow
  eligible: Boolean!
    @deprecated(
      reason: "Migrating this data into IntegrationSDKEligibility, due to introduction of new mobile SDK integrations, such as Venmo"
    )

  # showing ineligibility reasons in the case eligibility is false
  ineligibilityReason: String!
    @deprecated(
      reason: "Migrating this data into IntegrationSDKEligibility, due to introduction of new mobile SDK integrations, such as Venmo"
    )

  # Paypal mobile SDK specific eligibility response
  paypal: IntegrationSDKEligibility!

  # Venmo mobile SDK specific eligibility response
  venmo: IntegrationSDKEligibility!
}

# Integration Specific SDK Eligibility. Currently we support two kind of integrations
# 1. Paypal: Paypal Specific SDK eligibility integration
# 2. Venmo: Venmo Specific SDK eligibility integraion
type IntegrationSDKEligibility {
  # Boolean response conveying eligibility for this flow
  eligibility: Boolean!

  # showing ineligiblity reasons in the case eligibility returns false
  ineligibilityReason: String!

  # showing ineligiblity reasons error message in the case eligibility raises an error
  ineligibilityErrorMessage: String
}

# Schema to validate merchant as Apple Pay eligible
type ApplePayMerchantSession {
  # Opaque session from Apple
  session: String
}

# The NativeSDKPrivilegedResponse is returned from a query to the field
# `isPrivilegedHostApp`. The clientId sent to that query as a parameter denotes
# whether or not the
type NativeSDKPrivilegedResponse {
  # A list of NativeSDKPrivilege values denoting the capability of the host app
  privileges: [NativeSDKPrivilege]!

  # At least one elevated privilege was found for this host
  allowed: Boolean!

  # Should the `allowed` field return false, this field endeavors to explain why
  reasoning: String
}

# This enum declares several different types of privileges we may allow for
# first party vetted host apps on iOS and Android.
enum NativeSDKPrivilege {
  # Allows the host app to adjust the experience from a UI perspective
  FULL_UI_CUSTOMIZATION

  # Allows the host app to inject networking events on either the inbound or
  # outbound network passes. This would allow talking to the host apps'
  # internal network calls
  FULL_IO_CUSTOMIZATION

  # Allows the host app to integrate with FireBase and or listen in to the
  # payloads being sent back and forth over that bus.
  FULL_FIREBASE
}

# Encapsulates the flow id returned by consumer flow library
type ConsumerFlowId {
  # The flow id
  flowId: String!
}

# Interface for wallet API
type Wallet {
  # Retrieve the details for a bank account.
  #
  # Required Roles: LOGGEDIN
  bank(bankId: String!): BankAccount!

  # Retrieve the details from a credit card.
  #
  # Required Roles: LOGGEDIN
  card(cardId: String!): CardDetails!

  # Provides a quicker way to query eligibility data based on a users wallet instruments
  #
  # Required Roles: LOGGEDIN
  flags: WalletFlags!
}

# The metadata for a particular credit card
type CardDetails {
  # A unique identifier for the credit card within the PayPal system
  lastFourDigits: String!

  # The card issuer as a CardIssuerType (Ex: 'VISA', 'AMEX', 'MASTER', 'DISCOVER')
  type: CardIssuerType!
}

# Eligibility flags from the Wallet API
type WalletFlags {
  # Indicates whether the wallet contains rewards accounts
  areRewardsPresent: Boolean!

  # Indicates whether the user is opt in into full wallet
  fullWalletOptStatus: FullWalletStatus!
}

# A FullWallet Status type
enum FullWalletStatus {
  # Full Wallet Opted out
  OPTED_OUT

  # User has not made any decision on FullWallet
  NEW

  # FullWallet Opted In
  OPTED_IN
}

# Encapsulates the data shared between Unified Login and Checkout
type UnifiedLoginContext {
  # Metadata about the transaction's Checkout experience
  experienceMetadata: UnifiedLoginContextExperienceMetadata
}

# Encapsulates the metadata relating to Checkout experience from Unified Login
type UnifiedLoginContextExperienceMetadata {
  # Metadata about onboarding experience if the user sees that flow
  onboardingData: UnifiedLoginContextOnboardingData
}

# Encapsulates the data relating to onboarding from Unified Login
type UnifiedLoginContextOnboardingData {
  # Indicates if the Apple Pay button was shown to the user
  applePayButtonSeen: Boolean

  # Email a user entered on the login page
  email: Email

  # Whether or not a user already has a full member account
  hasExistingAccount: Boolean

  # Indicates what type of login method a user was presented with on UL
  loginMethod: String

  # Experience the user selected on the log in page (EX: SIGN_UP, GUEST)
  userIntent: OnboardingExperienceType
}

# An enumeration of Checkout onboarding experiences
enum OnboardingExperienceType {
  # Optional guest experience
  GUEST

  # Forced sign up
  SIGN_UP
}

# Encapsulates all properties related to an Elmo filter input.
input ElmoFilterInput {
  # The key name of the filter (Ex: 'Country')
  key: String!

  # The value that is associated with the filter key
  value: String!
}

# Encapsulates all properties of an Elmo experiment
type ElmoExperiment {
  # Array of user treatments returned by Elmo
  treatments: [ElmoTreatment]!
}

# Encapsulates all properties for a user treatment for a particular experiment
type ElmoTreatment {
  # Allocation percentage for the returned treatment
  allocationPercentage: Int!

  # ID of the experiment that the returned treatment belongs to
  experimentId: String!

  # Name of the experiment that the returned treatment belongs to
  experimentName: String!

  # List of factors defined for the returned treatment
  factors: [ElmoTreatmentFactor]

  # Hash value
  hashValue: String!

  # ID of the returned treatment
  treatmentId: String!

  # Name of the returned treatment
  treatmentName: String!

  # Version of the experiment the returned treatment belongs to
  version: String!
}

# Encapsulates an Elmo treatment factor, a key-value pair used to provide
# additional configuration.
type ElmoTreatmentFactor {
  # The treatment factor key
  key: String!

  # The treatment factor value
  value: String!
}

# Encapsulates all properties related to an Elmo filter input where values are Real Time values got from an API call.
input ElmoRealTimeFilterInput {
  # The key name of the filter (Ex: 'Country')
  key: String!

  # The value that is associated with the filter key
  value: ElmoRealTimeFilterValues!

  # Additional arguments needed for API call made before calling Elmo
  args: ElmoRealTimeFilterArgs
}

# An enumeration of values for Elmo filters that gets substituted with API call response
enum ElmoRealTimeFilterValues {
  # MERCHANT_ID value will get fetched from getPayee() and the path to value is merchant.accountNumber
  MERCHANT_ID

  # IS_BILLING_AGREEMENT value will be fetched from getIsBillingAgreementFlag call
  # and value is from 'isBillingAgreement' key in response object
  IS_BILLING_AGREEMENT

  # IS_GUEST_ELIGIBLE value will be fetched from getFlowEligibility call and value is from 'guest' key in response object
  IS_GUEST_ELIGIBLE

  # IS_WPS value will be fetched from getApplicationData call and value is from 'flags.is_wps_flow' key in response object
  IS_WPS

  # CHECKOUT_SESSION_TYPE value will be fetched from getCheckoutSessionTypeForElmo call
  CHECKOUT_SESSION_TYPE

  # IS_MERCHANT_IN_CUSTOMER_LIST this will trigger an API call to rpsreadserv to
  # see if merchant id exists in a customer list or not
  IS_MERCHANT_IN_CUSTOMER_LIST

  # IS_EXISTING_MEMBER_FROM_UL_CONTEXT this will call mayfly to get UL context and
  # check for the flag hasExistingAccount on onboardingContext
  IS_EXISTING_MEMBER_FROM_UL_CONTEXT

  # WEASLEY_ELIGIBILITY_FILTERS this will call getFiltersFromJunoCache and populates this as filters to elmo call
  WEASLEY_ELIGIBILITY_FILTERS

  # MERCHANT_IN_CUSTOMER_LIST_NAME this will call dynsegmentationserv/evaluate API
  # to see if merchant belongs to a segment or not
  MERCHANT_IN_CUSTOMER_LIST_NAME
}

# Additional arguments needed for elmo realtime filters can be added here. Every argument has to optional
input ElmoRealTimeFilterArgs {
  # RPS - RealtimeProfileServ Customer List identifier. Eg: CL-1344242
  customerListName: RpsCustomerList

  # segment - this will be the name of the segement which needs to be mapped to array of customer lists in code
  segmentName: RpsSegmentName
}

# An enumeration of possible RPS customer list that can be used in xobuyer
enum RpsCustomerList {
  # weasley - optional guest merchant list
  OPTIONAL_GUEST_MERCHANT_LIST
}

# An enumeration of possible RPS customer list that can be used in xobuyer
enum RpsSegmentName {
  # weasley - optional guest merchant list
  OPTIONAL_GUEST_MERCHANTS_SEGMENT

  # weasley - real money gaming merchant list
  RMG_MERCHANTS_SEGMENT

  # weasley - signup incentives safe merchant list
  SIGNUP_INCENTIVES_SAFE_MERCHANTS_SEGMENT
}

# The MobileSdkFeatures is returned to query 'mobileSdkFeatures' with the enabled native SDK features for the client.
type MobileSdkFeatures {
  # the elmo experiment with a list of treatments with feature eligibility
  elmoFeatures: [ElmoTreatment]!
}

# Encapsulates details of the potential funding instrument
type PotentialCard {
  # Indicates the type of the funding instrument
  type: FundingOptionType

  # Funding instrument's sub type of it's `type`.
  # (EX: 'CREDIT', 'DEBIT', 'CHECKING', 'SAVINGS').
  instrumentSubType: FundingInstrumentSubType

  # Expiration date of a card (Ex: '02/2021')
  expirationDate: String

  # Potential card's uuid (Ex: '3d799230-b198-11ea-b3de-0242ac130004')
  id: ID

  # Funding option's brand (Ex: 'AMEX')
  name: String

  # Last digits of a credit card
  lastDigits: String

  # The card art image
  #
  # Takes optional input for image size and type
  image(size: SquareImageSize = S, type: ImageType = png): CardImage

  # Funding instrument's issuer product description. This is the card issuer's
  # product and brand information. For Example, Chase Sapphire Reserve.
  issuerProductDescription: String

  # Source variable indicates which flow the user used the card in like, guest or xoom, etc.,.
  source: String
}

# Get a recognized user's smart wallet. This api works:
#
# - 1. Can be used using a orderID and buyer access token from a login session.
# - 2. With either an existing buyer access token, billing agreement, or vault
# - Returns both branded and unbranded FIs
type SmartWallet {
  # PayPal Smart Funding
  paypal: SmartWalletFunding!

  # Credit Smart Funding
  credit: SmartWalletFunding!

  # Card Smart Funding
  card: SmartWalletFunding!

  # Venmo Smart Funding
  venmo: SmartWalletFunding!
}

# An funding type within a buyer's smart wallet
type SmartWalletFunding {
  # List of Smart Wallet funding instruments
  instruments: [SmartWalletInstrument!]!
}

# An instrument within a buyer's smart wallet
type SmartWalletInstrument {
  # Instrument type. card / bank / credit / balance
  type: String

  # Label to show for the FI (last-4 / email)
  label: String

  # Logo to show for the FI (e.g. card art url)
  logoUrl: String

  # Instrument ID to use when paying on checkout rails
  instrumentID: String

  # Token ID to use when paying on vault rails
  tokenID: String

  # Card vendor
  vendor: String

  # Can the payment be made in one click
  oneClick: Boolean

  # Buyer access token to use to approve the payment on checkout rails
  accessToken: String

  # Funding source is branded or unbranded
  branded: Boolean

  # Issuer Product Description
  issuerProductDescription: String

  # PlanID associated with this instrument.
  planID: String

  # Secondary instruments associated
  secondaryInstruments: [SmartWalletSecondaryInstrument!]
}

# A secondary instrument associated with an instrument during planning
type SmartWalletSecondaryInstrument {
  # Instrument type card / bank / credit / balance
  type: String

  # Label to show for the FI (last-4 / email)
  label: String

  # Logo to show for the FI (e.g. card art url)
  logoUrl: String

  # Instrument ID to use when paying on checkout rails
  instrumentID: String
}

# Response wrapper for validateAddress.
type ValidateAddressResponse {
  # Whether or not an address is valid
  success: Boolean
}

# Encapsulates all properties related to a ShippingAndTaxes from shiptaxcalcserv.
type ShippingAndTaxes {
  # List of shipping and tax charges
  charges: [ShippingAndTaxCharges!]!

  # Whether shipping is supported for this region
  isShippingRegionSupported: Boolean!

  # Shipping options source ('PROFILE' or 'CALLBACK' or 'FALLBACK')
  shippingOptionsSource: ShippingOptionsSource!

  # Whether tax is required for shipping
  isTaxOnShippingRequired: Boolean!

  # Whether shipping options are shown
  shouldShowShippingOptions: Boolean!

  # Whether profile override is allowed
  profileOverrideAllowed: Boolean
}

# Encapsulates all properties related to a ShippingAndTaxCharges from shiptaxcalcserv.
type ShippingAndTaxCharges {
  # Shipping charges
  shipping: ShippingCharges

  # Tax charges
  tax: TaxCharges
}

# Encapsulates all properties related to a ShippingCharges from shiptaxcalcserv.
type ShippingCharges {
  # Unique identifier for the shipping option
  id: String!

  # Type of shipping method ('SHIPPING' or 'PICKUP')
  type: ShippingMethodType!

  # Default shipping option
  isDefaultShippingOption: Boolean!

  # Whether insurance option is offered
  hasInsurance: Boolean!

  # Display name for shipping option
  label: String

  # Shipping amount for this shipping option
  shippingAmount: Amount!

  # Insurance amount for this shipping option
  insuranceAmount: Amount

  # Duration for delivery to arrive (Ex: 3-5 business days)
  deliveryTime: String

  # Type of shipping method needed to update selected shipping method to update the cart
  shippingMethodType: String
}

# Encapsulates all properties related to a TaxCharges from shiptaxcalcserv.
type TaxCharges {
  # Tax on item amount
  item: Amount

  # Tax on total amount
  total: Amount
}

# The shipping options source type
enum ShippingOptionsSource {
  # Shipping charges are calculated from profile or button params
  PROFILE

  # Shipping options are from callback url
  CALLBACK

  # Fallback to button param if calling external url fails
  FALLBACK
}

# Financial Institution
type FinancialInstitution {
  # Refers to the name of the partner ex: American Express
  name: String!

  # Refers to the partner id that will be used to identify the partner in the flow ex: americanexpress
  identityProvider: String!

  # Reference to an Icon to show next to the institution name in a list
  institutionImage: InstitutionImage!
}

# Bank Account Input
input BankAccountInput {
  # The International Bank Account Number for the account
  iban: String

  # The account number of the bank account
  accountNumber: String

  # The routing number for the given bank account
  routingNumber: String

  # The type of bank account (i.e. Checking, Savings, etc.)
  type: BankAccountType
}

# Buyer's phone contact information (number, countryCode, etc)
input PhoneInput {
  # An phone type (Ex: 'Work', 'Cell', etc)
  type: PhoneInputType

  # A phone number (Ex: '8058881234')
  number: String!

  # A phone country code (Ex: '1')
  countryCode: String!
}

# Phone contact "types"
enum PhoneInputType {
  # Home phone number
  HOME

  # Mobile phone number
  MOBILE

  # Work phone number
  WORK

  # Business phone number
  BUSINESS

  # Customer service phone number
  CUSTOMER_SERVICE
}

# Response wrapper for isGuestMemberBenefitsEligibleResolver.
type GuestMemberBenefits {
  # whether the data compared matches
  isEligible: Boolean
}

# Response wrapper for ValidatePayees.
type ValidatePayeesResponse {
  # Whether or not the Payees are valid
  success: Boolean

  # The validation error for the call
  error: ValidatePayeesError
}

# Error Response for Validate Payees
type ValidatePayeesError {
  # Severity of the error - either Error or Warning
  severity: String!

  # The string value of the error
  error: String!

  # An optional description of the error
  description: String
}

# Upstream Messaging related properties
type UpstreamMessaging {
  # Merchant Profile for upstream messaging
  merchantProfile: MerchantProfile
}

# A profile object that contains merchant specific messaging information
type MerchantProfile {
  # Merchant Configuration Hash
  hash: String

  # Time to live for the SDK Bundle serving this Merchant
  configTTL: Int
}

# Encapsulates all properties related to Inline Checkout eligibility.
type InlineCheckoutEligibility {
  # Boolean response conveying eligibility for this flow.
  eligible: Boolean!

  # Reasons for ineligibility in the case eligibility is false.
  ineligibilityReason: String
}

# AuthProviderContext
# Login Context for UL OTP
type OtpLoginContext {
  # Stringified context for IWC
  context: String!
}

# ApplePay config data
# For ApplePay requests
type ApplepayConfig {
  # A country code that represents the merchant's country (Ex: 'US')
  merchantCountry: CountryCodes

  # An array of supported card financial instrument (FI) brands
  supportedNetworks: [ApplepaySupportedNetworks]!

  # An array of the payment capabilities that the merchant supports, such as credit or debit.
  merchantCapabilities: [ApplepayMerchantCapabilities]!

  # Merchant eligibility for Apple Pay
  isEligible: Boolean!
}

# An enumeration of all potential payment networks returned for Applepay config
# https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest/1916122-supportednetworks
enum ApplepaySupportedNetworks {
  # amex
  amex

  # cartesBancaires
  cartesBancaires

  # discover
  discover

  # jcb
  jcb

  # maestro
  maestro

  # masterCard
  masterCard

  # visa
  visa
}

# An enumeration of all potential payment networks returned for Applepay config
# https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest/1916123-merchantcapabilities
enum ApplepayMerchantCapabilities {
  # supports3DS
  supports3DS

  # supportsCredit
  supportsCredit

  # supportsDebit
  supportsDebit
}

# Encapsulates all properties related to Checkout Propensity Score.
# Determines the usage propensity in a given session for different categories.
type CheckoutPropensityScore {
  # Field encapsulating scores for credit related stuff
  creditScore: CreditScores!

  # Field encapsulating scores for FI related stuff
  fiScore: FIScores!
}

# Encapsulates all properties related to Credit products related Scores.
# Each property refers to a score determined for a credit related product.
type CreditScores {
  # Propensity Score for PayPal Credit
  ppc: CreditProductScoreInfo!

  # Propensity Score for Pay in 4
  pi4: CreditProductScoreInfo!

  # Propensity Score for Pay Monthly
  paymonthly: CreditProductScoreInfo!
}

# Contains actual score and metadata
type CreditProductScoreInfo {
  # Meta data: credit product name associated. Example: PAYPAL_CREDIT, PAY_IN_4, PAY_IN_3
  # Can be used by client for instrumentation purposes, indentification of underlying product for a returned score.
  productName: CreditProducts!

  # Actual Score
  score: Float
}

# Enums for all Credit related Products
enum CreditProducts {
  # Paypal Credit
  PAYPAL_CREDIT

  # Pay in 4
  PAY_IN_4

  # Pay Monthly
  PAY_MONTHLY

  # Pay in 3
  PAY_IN_3

  # Pay in 4x
  PAY_IN_4X

  # Pay in 30
  PAY_IN_30
}

# Encapsulates all properties related to FI related scores.
# Each property refers to a score determined in context of an FI.
type FIScores {
  # Propensity Score for FI Switch Rate
  fiSwitchRateScore: FIScoreInfo!
}

# Contains actual score and metadata
type FIScoreInfo {
  # Identifier name for the FI score sent. Example: FI_SWITCH_RATE
  # Can be used by client for instrumentation purposes, indentification of underlying nature or FI type for a returned score.
  productName: FIProductEnum!

  # Actual Score
  score: Float
}

# Enum for all FI related products
# FI_SWITCH_RATE: Rate at which a buyer switches between different funding instruments in a xo session
enum FIProductEnum {
  # Depicts FI Switch Rate
  FI_SWITCH_RATE
}

# Offers non-standard type information
type _ExtendedIntrospection {
  # A list of all types that have extended information
  types: [_ExtendedType!]!
}

# Extension of the type introspection type
type _ExtendedType {
  # The type name
  name: String

  # A list of all fields of this type that have extended information
  fields: [_ExtendedField!]!
}

# Extension of the field introspection type
type _ExtendedField {
  # The field name
  name: String

  # Additional metadata on this field
  metadata: _FieldMetadata
}

# Metadata on a GraphQL field
type _FieldMetadata {
  # Specifies if this field should be resolved as a link to a different field
  link: _FieldLink

  # Specifies if and how filters, ordering and limiting of a linked child field should be joined into this field
  join: _FieldJoin
}

# Configuration of a link on a field. If this metadata is present, the consumer should replace the type of the field with the type of the linked field and, for the value of this field, fetch objects from the linked field according to this config
type _FieldLink {
  # The field or a dot-separated list of fields starting from the query type that is used to resolve the link
  field: String!

  # If true, the field returns a list of objects instead of one object
  batchMode: Boolean!

  # The argument name, optionally followed by a dot-separated path of input field names, that is to be set to the id (or list of ids in case of batchMode)
  argument: String!

  # The name of a field in the target type that contains the id. Only needed if batchMode is true and the field may return the objects out of order
  keyField: String

  # If specified, a new field with this name will be added with the target type. If not specified, the annotated field will be replaced with the link field.
  linkFieldName: String

  # Indicates that the link has already been processed.
  ignore: Boolean
}

# Configuration on how to join filters, ordering and limiting of a linked child field into this field
type _FieldJoin {
  # The name of the child field that has a link configured
  linkField: String!

  # Indicates that the join has already been processed.
  ignore: Boolean
}

# The merged Mutation root type
type Mutation {
  # Mutation of checkout
  checkout: checkoutMutation

  # Mutation of billing
  billing: billingMutation

  # The `addBillingAddress` mutation will add a billing address to the Users billing addresses.
  #
  # If an `instrumentId` is passed in, it will associate the billing address with it.
  #
  # - Requires parameters for an address (Ex: line1, line2, etc.).
  # - Optionally accepts an instrumentId param as a String.
  #
  # Returns a CheckoutSession type.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addBillingAddress(
    instrumentId: String
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String!
    addressLine1: String
    addressLine2: String
    addressLine3: String
    adminArea4: String
    adminArea3: String
    adminArea2: String
    adminArea1: String
    countryCode: CountryCodes!
  ): AddBillingAddressResponse

  # The resolveNeedPhoneContingency mutation will add a phone number to a User,
  # which is needed to complete a transaction, if a merchant requires a phone number from the customer.
  # An additional call will be made to paymentapiplatformserv to
  # clear the PHONE_NUMBER_REQUIRED contingency from the checkout session.
  #
  # If the consentContentId string is passed, it will be used to update the user notification preferences.
  # The consentContentId string is not mandatory because it is only required for US based users.
  #
  # Returns a CheckoutSession type.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  resolveNeedPhoneContingency(
    # The phone number details entered by the user
    phone: PhoneInput!

    # Token associated with the transaction
    token: String!

    # The country from the locale metadata query
    country: CountryCodes!

    # Unique identifier for consent agreement when setting notification preferences
    consentContentId: String
  ): CheckoutSession

  # The addTaxId mutation will add a Tax Identification number to a Brazil User,
  # if the TAX_ID_REQUIRED contingency is triggered as the user has not yet added a tax id.
  #
  # Requires a:
  #   token param (EC, PAY, or BA token) as a String.
  #   taxId ("123.123.123-12" in BR case) as a String.
  #   type (CPF or CNPJ in BR case) as a TaxIdType.
  #
  # Returns a CheckoutSession type.
  #
  # Required auth states: LOGGEDIN, REMEMBERED.
  addTaxId(
    # A token param (EC token) as a String
    token: String!

    # The Tax Id to be added to the user
    taxId: String!

    # The type of Tax Id to be added to the user (CPF for personal accounts or CNPJ for business accounts)
    type: TaxIdType!
  ): CheckoutSession

  # Adds the current user to the list of users who are known to have viewed the
  # PiX interstitial modal
  #
  # Returns a Boolean indicating whether they were successfully added
  addToPiXInterstitialViewedList: Boolean

  # The addShippingAddress mutation will add a shipping address to a
  # Users shipping addresses, which can be used when approving the payment transaction.
  # Requires a token param (EC, PAY, or BA token) as a String.
  # Requires additional parameters for an address (Ex: line1, line2, etc.).
  #
  # Optionally accepts a `normalize` parameter that tells us if we need to try to normalize the address.
  # If a corrected address is returned from the Address Normalization Service,
  # then a `ADDRESS_NORMALIZED` Client Contingency is thrown with the normalized address passed down as data.
  #
  # Optionally accepts a `preferredAddress` parameter that tells us if we need to mark the current address
  # as Preferred for the user.
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 2200ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addShippingAddress(
    token: String!
    givenName: String!
    familyName: String!
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    countryCode: CountryCodes!
    normalize: Boolean = false
    addressLine1: String
    addressLine2: String
    addressLine3: String
    adminArea4: String
    adminArea3: String
    adminArea2: String
    adminArea1: String
    preferredAddress: Boolean
  ): CheckoutSession

  # The addUserToCustomerList mutation will add a user to the provided dynamic customer list given the
  # user is present in RPS
  #
  # Requires a dynamic customer list name (Ex: 'CL-6465007365187988655')
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addUserToCustomerList(listName: String!): Boolean

  # The approveGuestPaymentWithCreditCard mutation will approve a guest payment transaction with credit card.
  #
  # If passed an phone number, it will use that phone number for the transaction. Otherwise it will
  # use the one in mayfly checkout session.
  #
  # If passed an first name, it will use that name for the transaction. Otherwise it will
  # use the one in mayfly checkout session.
  #
  # If passed an last name, it will use that name for the transaction. Otherwise it will
  # use the one in mayfly checkout session.
  #
  # If passed an email, it will use that email for the transaction. Otherwise it will
  # use the one in mayfly checkout session.
  #
  # If passed an billing address, it will use that billing address for the transaction. Otherwise it will
  # use the one in mayfly checkout session.
  #
  # If passed an installmentTerm, payment will be approved with selected installment term. Otherwise it will
  # approve with total payment at once. This is only available for Brazil and Mexico at the moment.
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  #
  # Optionally accepts an email as a String
  # Optionally accepts a fist name as a String
  # Optionally accepts a last name as a String
  # Optionally accepts a phone as a String
  # Optionally accepts a billingAddress as a InputAddress
  # Optionally accepts an installmentTerm
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 13000ms
  #
  # Required auth states: ANONYMOUS
  approveGuestPaymentWithCreditCard(
    # The buyer's credit card
    card: CardInput!

    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phoneNumber: String

    # The buyer's first name.
    firstName: String

    # The buyer's first name.
    lastName: String

    # The buyer's billing address.
    billingAddress: AddressInput

    # The buyer's shipping address
    shippingAddress: AddressInput

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # How currency is being converted in this payment. Default method of conversion is paypal.
    currencyConversionType: CheckoutCurrencyConversionType

    # Installment term chosen by buyer for the payment (Ex: 1)
    installmentTerm: Int
  ): CheckoutSession

  # The approveMemberPayment mutation will approve a payment for PayPal members.
  #
  # This interface uses funding option IDs, rather than plan IDs.
  #
  # Requires `token`, the EC, PAY or BA token used for this payment.
  #
  # Requires `primaryFundingOptionId`, which is the primary funding option ID used to fund the payment.
  # Optionally accepts `secondaryFundingOptionIds`, which is an Array of funding option IDs.
  # Optionally accepts `rewards`, which is an Object, containing the rewards ID, amount, and currency code.
  #
  # approveMemberPayment will attempt to find the associated plan given those funding option IDs
  # approveMemberPayment will complete a payment for a WPS Payment.
  #
  # If passed `selectedAddressId`, it will select that address for the payment.
  # If passed `preferredFundingOptionId`, it will select that funding option as preferred for future payments.
  # If passed `preferredShippingAddressId`, it will select that address as preferred for future payments.
  # If passed `preAuthorizationRequired`, it will collect Credit Card status from
  # the issuer to check if its valid (Expired Card, Insufficient funds, etc).
  # If passed `cardCvvValue`, it will resolve cvv value for the currently selected card (primaryFundingOptionId).
  # If passed `card3DSResolve3DSCode`, it will resolve 3DS for the currently selected card (primaryFundingOptionId).
  # If passed `legalAgreements`, it will record user legal consent (User Agreement) data on Notice & Consent API.
  #
  # Returns a CheckoutSession type.
  #
  # Please query for state field to get status of checkoutSession when using this Mutation.
  # If successful, state will change to APPROVED.
  # If not successful, check the PaymentContingencies field to see issues that need to be resolved first.
  #
  # Average SLA response time - 2500ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  approveMemberPayment(
    # A token param (EC, PAY, or BA token) as a String
    token: String!

    #
    primaryFundingOptionId: String

    #
    secondaryFundingOptionIds: [String!]

    #
    selectedInstallmentOption: InstallmentsInput

    #
    rewards: RewardsInput

    #
    selectedAddressId: String

    #
    preferredFundingOptionId: String

    #
    preferredShippingAddressId: String

    #
    preAuthorizationRequired: Boolean

    #
    cardCvvValue: String

    #
    card3DSResolve3DSCode: String

    #
    fundingMethodType: FundingInstrumentMethodType

    #
    shareAddressWithDonatee: Boolean

    # Boolean to indicate that user completed auth challenge to resolve strongCustomerAuthenticationRequired contingency
    strongCustomerAuthenticationCompleted: Boolean

    # Boolean to indicate if the primary funding option should be set as StickyFI for a billing agreement, default is true
    setStickyFiRequired: Boolean = true

    # ID of a quote for an asset that needs to be sold. Required if the funding
    # option ID corresponds to an asset that needs to be sold, like Crypto
    cryptocurrencyQuoteId: String

    # Value is set to true when the user chooses to enable fullwallet feature
    fullWalletOptIn: Boolean

    # Base 64 encoded paycode
    paycodeEncrypted: String

    # Set the balance preference of the billing agreement. If opted in, uses
    # balance first for all billing agreement transactions
    balancePreference: BalancePreference

    # Data related to the Legal Agreements accepted
    legalAgreements: LegalAgreementsInput
  ): CheckoutSession

  # The approvePayment mutation will approve a payment transaction.
  # If passed an planId, it will select that plan for the transaction.
  # If passed an addressId, it will select that address for the transaction.
  # First, plans will be selected, then addresses will be selected, then the
  # payment will be approved.
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a planId as a String
  # Optionally accepts an addressId as a String
  #
  # Returns a CheckoutSession type.
  #
  # Please query for state field to get status of checkoutSession when using this Mutation.
  # If successful, state will change to APPROVED.
  # If not successful, check the PaymentContingencies field to see issues that need to be resolved first.
  #
  # Average SLA response time - 2500ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  approvePayment(
    #
    token: String!

    #
    selectedPlanId: String!

    #
    selectedAddressId: String

    #
    preferredFundingOptionId: String

    #
    preferredShippingAddressId: String

    # Boolean to indicate that user completed auth challenge to resolve strongCustomerAuthenticationRequired contingency
    strongCustomerAuthenticationCompleted: Boolean
  ): CheckoutSession

  # The oneClickPayment mutation will plan and approve a payment in one go.
  # Any contingencies will result in launching the full checkout flow
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  oneClickPayment(
    token: String!
    selectedInstrumentId: String!
    selectedInstrumentType: String!
    useExistingPlanning: Boolean
    selectedPlanId: String
  ): User

  # This handles the patch and approval process when a user attempts to process a split payment transaction
  # through the Split Tender interface.
  #
  # Returns a CheckoutSession type
  #
  # Required auth states: LOGGEDIN
  approveMemberPaymentWithSplitFundingOptions(
    #
    token: String!

    #
    splitFundingOptions: [SplitFundingOptionsInput]!

    #
    selectedAddressId: String

    #
    preferredShippingAddressId: String

    # Value is set to true when the user chooses to enable fullwallet feature
    fullWalletOptIn: Boolean
  ): CheckoutSession

  # The approveGuestSignUpPayment mutation will approve a payment transaction for a signup/guest flow
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 500ms
  #
  # Required auth states: LOGGEDIN, IDENTIFIED
  approveGuestSignUpPayment(token: String!): CheckoutSession

  # Preauthorize plan by calling XOPG from SignupLite
  #
  # Required auth states: LOGGEDIN, IDENTIFIED
  preAuthorizePayment(token: String!): CheckoutSession

  # The attemptSetStickyFi mutation will set the sticky/primary funding instrument for billing with purchase on sign up flow
  #
  # Returns a CheckoutSession type.
  #
  # Required auth states: LOGGEDIN
  attemptSetStickyFi(token: String!, instrumentId: String): CheckoutSession

  # CompleteThreeDSConfirmation mutation will take in a third_party_response token that will be processed
  # by card3dsAuthenticationServ. If successful, additional call will be made to paymentapiplatformserv to
  # clear the 3DS contingency from the checkout session
  #
  # Requires a thirdPartyToken ("ASDFASDFASDFASDFASDFASDFASDFASDF") as a String
  # Requires a token param (EC, PAY, or BA token) as a String
  #
  # Average SLA response time - 1400ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  completeThreeDSConfirmation(
    # The third party confirmation string
    thirdPartyToken: String!

    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # Array of response parameters from required to complete 3DS verification
    responseParams: [ThreeDSParamsInput]
  ): CheckoutSession

  # The deleteShippingAddress mutation will delete a shipping address from a Users
  # shipping addresses, so it cannot be used when approving a payment transaction.
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires an addressId param as a String Returns a CheckoutSession type.
  #
  # Average SLA response time - 900ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  deleteShippingAddress(token: String!, addressId: String!): CheckoutSession

  # signupNewMember mutation will take a user's billing information and password and attempt to create an account
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  #
  # Optionally pass a password ("example123") as a String
  # Optionally pass an email ("example@gmail.com") as a String
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a phoneNumber ("800-888-8888") as a String
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 2350ms
  #
  # Required auth states: ANONYMOUS
  signUpNewMember(
    # The buyer's credit card
    card: CardInput

    # The buyer's bank information
    bank: BankAccountInput

    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: PhoneInput

    # The buyer's first name.
    firstName: String!

    # The buyer's middle name.
    middleName: String

    # The buyer's last name.
    lastName: String!

    # The buyer's billing address. Required for AMEX card
    billingAddress: AddressInput

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # The buyer's date of birth.
    dateOfBirth: DateOfBirth

    # The buyer's desired password.
    password: String

    # The buyer's desired installment payment plan
    selectedInstallmentOption: InstallmentsInput

    # The buyer's desired shipping address.
    shippingAddress: AddressInput

    # The buyer's nationality.
    nationality: CountryCodes

    # The buyer's occupation (i.e. A.
    occupation: Occupation

    # The buyer's country code.
    country: CountryCodes

    # The buyers's country of residence
    countryOfResidence: CountryCodes

    # The buyer's content identifier that identifies legal requirements agreed to (only applicable for US)
    contentIdentifier: String

    # The selected currency conversion type that the user has selected - PAYPAL or VENDOR
    currencyConversionType: CheckoutCurrencyConversionType

    # Determines whether the buyer decides to opt out of marketing materials
    marketingOptOut: Boolean

    # The buyer's identity document number and type
    identityDocument: IdentityDocumentInput

    # The buyer's secondary identity document number and type
    secondaryIdentityDocument: IdentityDocumentInput

    # The buyer's gender
    gender: Gender

    # The buyer's place of birth
    placeOfBirth: CountryCodes

    # Donor's consent of sharing address
    shareAddressWithDonatee: Boolean

    # Data collected for Common Reporting Standards
    crsData: CommonReportingStandardsInput

    # Primary residential address. Required for some countries
    residentialAddress: AddressInput

    # Determines whether the buyer decided to create an account for a signup incentive
    isSignupIncentiveOptIn: Boolean

    # Data related to the Legal Agreements accepted
    legalAgreements: LegalAgreementsInput
  ): CheckoutSession

  # upgradeGuestToMember mutation takes data from a completed transaction
  # as guest user and upgrades to consumer member account
  #
  # Required auth states: IDENTIFIED
  upgradeGuestToMember(
    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: PhoneInput

    # The buyer's first name.
    firstName: String!

    # The buyer's middle name.
    middleName: String

    # The buyer's last name.
    lastName: String!

    # The buyer's billing address. Required for AMEX card
    billingAddress: AddressInput

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # The buyer's date of birth.
    dateOfBirth: DateOfBirth

    # The buyer's desired password.
    password: String

    # The buyer's nationality.
    nationality: CountryCodes

    # The buyer's occupation (i.e. A.
    occupation: Occupation

    # The buyer's country code.
    country: CountryCodes

    # The buyers's country of residence
    countryOfResidence: CountryCodes

    # The buyer's content identifier that identifies legal requirements agreed to (only applicable for US)
    contentIdentifier: String

    # Determines whether the buyer decides to opt out of marketing materials
    marketingOptOut: Boolean

    # The buyer's identity document number and type
    identityDocument: IdentityDocumentInput

    # The buyer's secondary identity document number and type
    secondaryIdentityDocument: IdentityDocumentInput

    # The buyer's gender
    gender: Gender

    # The buyer's place of birth
    placeOfBirth: CountryCodes

    # Primary residential address. Required for some countries
    residentialAddress: AddressInput

    # Data related to the Legal Agreements accepted
    legalAgreements: LegalAgreementsInput
  ): CheckoutSession

  # createMemberAccount mutation will take a user's information and password and attempt to create an account
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  #
  # Optionally pass a password ("example123") as a String
  # Optionally pass an email ("example@gmail.com") as a String
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a phoneNumber ("800-888-8888") as a String
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 2290ms
  #
  # Required auth states: ANONYMOUS
  createMemberAccount(
    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: PhoneInput

    # The buyer's first name.
    firstName: String!

    # The buyer's middle name.
    middleName: String

    # The buyer's last name.
    lastName: String!

    # The buyer's billing address.
    billingAddress: AddressInput

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # The buyer's date of birth.
    dateOfBirth: DateOfBirth

    # The buyer's desired password
    password: String

    # The buyer's desired shipping address
    shippingAddress: AddressInput

    # The buyer's nationality
    nationality: CountryCodes

    # The buyer's occupation
    occupation: Occupation

    # The buyer's country code
    country: CountryCodes!

    # The buyer's country of residence
    countryOfResidence: CountryCodes

    # The buyer's content identifier that identifies legal requirements agreed to (only applicable for US)
    contentIdentifier: String

    # Determines whether the buyer decides to opt out of marketing materials
    marketingOptOut: Boolean

    # The buyer's identity document number and type
    identityDocument: IdentityDocumentInput

    # The buyer's secondary identity document number and type
    secondaryIdentityDocument: IdentityDocumentInput

    # The buyer's gender
    gender: Gender

    # The buyer's place of birth
    placeOfBirth: CountryCodes

    # Data collected for Common Reporting Standards
    crsData: CommonReportingStandardsInput

    # Primary residential address. Required for some countries
    residentialAddress: AddressInput

    # Data related to the Legal Agreements accepted
    legalAgreements: LegalAgreementsInput
  ): CheckoutSession

  # onboardGuest mutation will take a user's billing information and attempt to create an account
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  #
  # Optionally pass an email ("example@gmail.com") as a String
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a phoneNumber ("800-888-8888") as a String
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 2350ms
  #
  # Required auth states: ANONYMOUS
  onboardGuest(
    # The buyer's billing address. Required for AMEX card
    billingAddress: AddressInput

    # The buyer's bank information
    bank: BankAccountInput

    # The buyer's credit card
    card: CardInput

    # The buyer's country code.
    country: CountryCodes

    # The selected currency conversion type that the user has selected - PAYPAL or VENDOR
    currencyConversionType: CheckoutCurrencyConversionType

    # The buyer's date of birth - FR card type Carte Aurore needs dob
    dateOfBirth: DateOfBirth

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # The buyer's first name.
    firstName: String!

    # The buyer's last name.
    lastName: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: PhoneInput

    # The buyer's desired shipping address.
    shippingAddress: AddressInput

    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # Donor's consent of sharing address
    shareAddressWithDonatee: Boolean
  ): CheckoutSession

  # onboardGuestForInlineXO mutation will take a user's billing information and attempt to create an account
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  #
  # Optionally pass an email ("example@gmail.com") as a String
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a phoneNumber ("800-888-8888") as a String
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  #
  # Returns a CheckoutSession type.
  #
  # Required auth states: ANONYMOUS
  onboardGuestForInlineXO(
    # The buyer's billing address. Required for AMEX card
    billingAddress: AddressInput

    # Billing agreement type
    billingType: String

    # The buyer's credit card
    card: CardInput

    # The buyer's country code.
    country: CountryCodes

    # The selected currency conversion type that the user has selected - PAYPAL or VENDOR
    currencyConversionType: CheckoutCurrencyConversionType

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # The buyer's first name.
    firstName: String!

    # shipping address change is allowed or not
    isChangeShippingAddressAllowed: Boolean

    # The buyer's last name.
    lastName: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: PhoneInput

    # The buyer's desired shipping address.
    shippingAddress: AddressInput

    # A token param (EC, PAY, or BA token) as a String
    token: String!
  ): CheckoutSession

  # createOnboardingPaymentPlan mutation will take a user's shipping information
  # and currencyConversionType and attempt to create a checkout session
  createOnboardingPaymentPlan(
    # currencyConversionType - PAYPAL or VENDOR
    currencyConversionType: CheckoutCurrencyConversionType

    # cvv of the credit card - 3 or 4 digits
    cvv: String

    # In guest transactions we pass encrypted card linked member account number if available
    encryptedCardLoginAccountNumber: String

    # Funding Insrument ID - value starts with CC- for card and BA- for bank
    fundingInstrumentId: String!

    # Donor's consent of sharing address
    shareAddressWithDonatee: Boolean

    # shippingAddress of the transaction
    shippingAddress: AddressInput

    # token EC or WPS token
    token: String!

    # userType GUEST or SIGN_UP
    userType: OnboardingExperienceType!
  ): CheckoutSession

  # The updateCurrencyConversionType mutation will update a currency conversion type
  # (Ex: "PAYPAL" or "VENDOR").
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a conversionType (Ex: "PAYPAL" or "VENDOR") See CheckoutCurrencyConversionType.
  #
  # Average SLA response time - 115ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  updateCurrencyConversionType(
    token: String!
    conversionType: CheckoutCurrencyConversionType!
  ): CheckoutSession

  # The updateShippingAddress mutation will update a shipping address in a Users
  # shipping addresses, which can be used when approving the payment transaction.
  # Requires a token param (EC, PAY, or BA token) as a String.
  # Requires an addressId param as a String.
  # Requires additional parameters for an address (Ex: line1, city, countryCode).
  # Optionally accepts additional parameters to be updated (Ex: givenName, line2, etc.).
  #
  # This mutation does NOT PATCH/DELETE the previous record, rather it adds a new one entirely with a newly created addressId
  #
  # [//]: # (refer to https://github.paypal.com/ApiSpecifications-R/payments.CommonComponentSpecification/blob/v1.3/v1/schema/address.json
  # for required address fields)
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 2300ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  updateShippingAddress(
    token: String!
    addressId: String!
    givenName: String
    familyName: String
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    countryCode: CountryCodes!
    addressLine1: String
    addressLine2: String
    addressLine3: String
    adminArea4: String
    adminArea3: String
    adminArea2: String
    adminArea1: String
  ): CheckoutSession

  # The updateShippingMethods mutation will update shipping options in the cart, or add
  # them if they do not exist
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires an shippingMethods param as a CartShippingMethod
  # Optionally accepts additional parameters to be updated (Ex: givenName, line2, etc.)
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - TBDms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  updateShippingMethods(
    token: String!
    shippingMethods: [ShippingMethodInput]!
  ): CheckoutSession

  # The updateShippingMethodsForGuest mutation will update shipping options in
  # the cart, or add them if they do not exist.
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Required shipping methods as an array of objects.
  #
  # Returns a CheckoutSession type.
  updateShippingMethodsForGuest(
    token: String!
    shippingMethods: [ShippingMethodInput]!
  ): CheckoutSession

  # The updateShipping mutation will update shipping options and amount in
  # the cart, or add them if they do not exist.
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Required shipping methods as an array of objects.
  #
  # Returns a CheckoutSession type.
  updateShipping(clientID: String!, patch: [JSON]!, token: String!): JSON

  # The updateCallbackOptions mutation will update call back shipping methods
  # in to cart. This mutation is for callback url/ instant update api flows.
  #
  # Requires a token param (EC, WPS, PAY, or BA token) as a String
  # Requires shipping options source (FALLBACK/ CALLBACK/ PROFILE ) as a String
  # Optionally accepts shipping methods as an array of objects.
  #
  # Returns a CheckoutSession type.
  updateCallbackOptions(
    token: String!
    shippingOptionsSource: ShippingOptionsSource
    callbackShippingMethods: [CallbackShippingMethodInput]
  ): CheckoutSession

  # The updateProfileShippingOptions mutation will update profile shipping methods
  # in to cart.
  #
  # Requires a token param (EC, WPS, PAY, or BA token) as a String
  # Requires shipping options source (FALLBACK/ CALLBACK/ PROFILE ) as a String
  # Optionally accepts shipping methods as an array of objects.
  # Optionally accept profileOverrideAllowed (this is from the response from SnT
  # which help with shipping calculations) as a boolean
  # Optionally accept hideShipping (this value will help determine the shipping calculations) as a boolean
  #
  # Returns a CheckoutSession type.
  updateProfileShippingOptions(
    token: String!
    profileShippingMethods: [ProfileShippingMethodInput]
    profileOverrideAllowed: Boolean
    hideShipping: Boolean
  ): CheckoutSession

  # The confirmCreditCardCvv mutation will attach the cvv to the user's funding source on PAPS
  #
  # Requires ConfirmedCreditCardCvvInput as an input type, see schema for reference.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  confirmCreditCardCvv(
    token: String!
    input: ConfirmCreditCardCvvInput
    planId: String
  ): CheckoutSession

  # The addCard mutation will do the following depends on how arguments are being
  # passed:
  #   - Add a new card
  #   - Perform billing address validation if address.id is missing
  #   - Update checkoutSession fundingOptions based on the newly added card
  #   - paypalRequestId is unique uuid for each add card request. If we don't get
  # it from front end, we generate it using uuid library else we pass whatever
  # came in request.
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addCard(
    token: String!
    cardType: FundingOptionType = CREDIT_CARD
    card: AddCardInput!
    user: AddCardUserInput!
    address: AddCardBillingAddressInput
    paypalRequestId: String
    isPartialBillingAddress: Boolean
  ): CheckoutSession

  # The addPotentialCard mutation will do the following
  # passed:
  #   - Add a new card to the user wallet
  #   - Update checkoutSession fundingOptions based on the newly added card
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addPotentialCard(
    token: String!
    cardType: FundingOptionType = CREDIT_CARD
    card: PotentialCardInput!
    address: AddCardBillingAddressInput
  ): CheckoutSession

  # The addCardWithoutToken mutation will do the following:
  #   - Perform billing address validation if address.id is missing
  #   - Add a new card
  #   Required auth states: LOGGEDIN
  addCardWithoutToken(
    cardType: FundingOptionType = CREDIT_CARD
    card: AddCardInput!
    user: AddCardUserInput!
    address: AddCardBillingAddressInput!
    isPartialBillingAddress: Boolean
  ): Boolean

  # The updateCard mutation will do the following depends on how arguments are being
  # passed:
  #   - Update a new card
  #   - Perform billing address validation if address.id is missing
  #   - Update checkoutSession fundingOptions
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  updateCard(
    token: String!
    cardType: FundingOptionType = CREDIT_CARD
    card: AddCardInput!
    user: AddCardUserInput!
    address: AddCardBillingAddressInput
    fundingOptionId: String!
  ): CheckoutSession

  # The updateCardWithoutToken mutation will do the following depending on how arguments are being
  # passed:
  #   - Update a new card
  #   - Perform billing address validation if address.id is missing
  # Required auth states: LOGGEDIN
  updateCardWithoutToken(
    cardType: FundingOptionType = CREDIT_CARD
    card: AddCardInput!
    user: AddCardUserInput!
    address: AddCardBillingAddressInput!
    fundingOptionId: String!
  ): Boolean

  # The replaceCard mutation will do the following depends on how arguments are being
  # passed:
  #   - Replace a new card
  #   - Perform billing address validation if address.id is missing
  #   - Update checkoutSession fundingOptions
  #   - fundingOptionId is required for each replace card request, it is acquired
  # from fundingOptionId from declinedInstrument and sent from front end
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  replaceCard(
    token: String!
    card: AddCardInput!
    address: AddCardBillingAddressInput!
    fundingOptionId: String!
  ): CheckoutSession

  # The updateClientConfig mutation will patch in client configuration to the checkout session, to identify
  # the selected funding source, integration type, etc.
  #
  # Required auth states: ANONYMOUS
  updateClientConfig(
    #
    token: String!

    #
    productCode: ProductCodeType

    #
    fundingSource: ButtonFundingSourceType

    #
    integrationArtifact: IntegrationArtifactType

    #
    userExperienceFlow: UserExperienceFlowType

    #
    productFlow: ProductFlowType

    #
    buyerIntent: BuyerIntentType

    # If not provided, will attempt to be detected based on request info.
    channel: ProductChannel

    #
    buttonSessionID: String

    #
    productFeature: ProductFeatureType
  ): Boolean

  # The enableVault mutation will patch in to cart with the client token (containing a customer id), to transform
  # the existing checkout session into a billing agreement / vault session.
  # Also will patch in client configuration to the BA session
  #
  # Required auth states: ANONYMOUS
  enableVault(token: String!, clientConfig: ClientConfigInput): Boolean

  # The deleteVault mutation will remove an existing funding source from the vault
  #
  # Required auth states: IDENTIFIED
  deleteVault(paymentMethodID: String!): Boolean

  # update vault setup token
  #
  # v3/vault/setup-tokens/:id/update is a private endpoint only accessible by internal PayPal services
  # This mutation allows client-side code access to this endpoint while the vault team works on exposing
  # this endpoint externally
  #
  # Oauth2 scope(s): https://uri.paypal.com/services/vault/payment-tokens/read
  updateVaultSetupToken(
    clientId: String!
    idToken: String
    vaultSetupToken: String!
    paymentSource: PaymentSource
  ): VaultSetupTokenResponse

  # The eConsent mutation will update user's edelivery consent
  # E-Sign consent is the process by which US consumers consent to have their
  # notifications and statements delivered electronically
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  eConsent: User

  # Save shared card Consent
  # Check to see if Secondary user has given consent for sharing details with Primary card user
  saveSharedCardConsent(sharedConsent: Boolean!): String

  # Create Credit key in Mayfly before redirecting to CAPE
  createCapeMayflyPayload(
    token: String!
    pageContext: String!
    creditFundingInstrumentId: String!
    userSelectedAddressId: String!
    userSelectedPreferredShippingAddressId: String!
    returnUriBase: String!
    isCreditSecondButton: Boolean
    isCrossCurrencyTransaction: Boolean
    creditIncentiveDetails: CreditIncentiveDetailsInput
    cartAmount: String
    cartCurrency: String
    isPPCReuse: Boolean
    isPPCInstallments: Boolean
  ): String

  # Read Credit key in Mayfly after redirecting from CAPE and update PPC data to GPL cache.
  retrieveCapeMayflyResponse(
    token: String!
    mayflyKey: String!
  ): CreditRedirectMayflyResponse

  # Patch cart with credit installment and update FI.
  processCapeReturn(
    token: String!
    financialInstrumentId: String!
    financialInstrumentDetails: CreditFinancialInstrumentDetailsInput
  ): CheckoutSession

  # trigger post on checkoutSession after user clicks Ready to Continue
  triggerReplan(token: String!): CheckoutSession

  # Remove the constraint on the declined funding instrument
  removeConstraintOnFI(
    token: String!
    fundingOptionId: String!
  ): CheckoutSession

  # The processCreditApplyPortableResponse mutation will decrypt the payload received from CAP and provide with
  # the selectedOffer, Repayment instruments and other required credit information
  # which can be used when selecting the Payment option.
  #
  # Requires a encrypted payload as a String.
  # Optionally accepts token as a String.
  #
  # Returns a CheckoutSession type.
  processCreditApplyPortableResponse(
    #
    encryptedPayload: String!

    #
    token: String!

    # Flag to skip the need/expired Card contingency errors when invoking resolveCheckoutSession
    skipFiContingency: Boolean

    # The FI type used when patching the cart.
    # This is needed to determine the key used to decrypt the encryptedPayload
    type: String
  ): CheckoutSession

  # The clearCreditFinancingOption mutation will delete the credit financing option
  # (deprecated, use updateCheckoutSessionCreditFinancingOption instead)
  clearCreditFinancingOption(token: String!): Boolean
    @deprecated(
      reason: "use updateCheckoutSessionCreditFinancingOption instead"
    )

  # The clearCheckoutSessionCreditFinancingOption mutation will delete the credit financing option
  # (deprecated, use updateCheckoutSessionCreditFinancingOption instead)
  clearCheckoutSessionCreditFinancingOption(token: String!): CheckoutSession
    @deprecated(
      reason: "use updateCheckoutSessionCreditFinancingOption instead"
    )

  # The updateCheckoutSessionCreditFinancingOption mutation will update(add or remove)
  # the credit financing options for a given session
  updateCheckoutSessionCreditFinancingOption(
    token: String!
    fundingInstrumentFinancingDetail: FundingInstrumentFinancingInput
  ): CheckoutSession

  # Clear the real time balance contingency(needRealTimeBalanceForBankAccount) to either allow or disallow
  # the payment in case the user has indicated they want to use this bank .
  #
  # Requires the fundingOption Id of the bank and the EC token
  clearRealTimeBalanceContingency(
    token: String!
    bankId: String!
    error: String
  ): CheckoutSession

  # 3DS 2.0 FI service to handle contingency during addCard: Creates a confirmation resource for a given card
  # URL: /v1/wallet/card-accounts/{card_account_id}/confirmations
  # card-account.create-confirmation
  # Purpose: when fi throws 3ds 2.0 contingency upon addCard call, we need to call this API to start the 3ds 2.0
  # resolution process. This is the first call to make, after Device Data Collection(DDC) is triggered in UI.
  # In response of this API we get the urls needed for cardinal iframe to enter OTP (response key step_up_url)
  threedsCreateConfirmation(
    # Instrument's confirmation status will be marked as confirmed without
    # performing the initiate/complete process if this parameter is true. Default is false
    bypassConfirmationProcess: Boolean = false

    # FI confirmation method - ONLINE_SECURE_AUTHENTICATION ONE_RANDOM_CHARGE_CONFIRMATION TWO_RANDOM_CHARGE_CONFIRMATION
    confirmationMethod: ThreedsConfirmationMethod!

    # The card verification value (CVV) - not required when
    # bypass_confirmation_process is true and confirmation_method is
    # ONLINE_SECURE_AUTHENTICATION
    cvv: String

    # funding Instrument ID - ccId generated by filifecycleserv during add card
    fiId: String

    # Unique ID for 3DS - not required when bypass_confirmation_process is true
    # and confirmation_method is ONLINE_SECURE_AUTHENTICATION
    referenceId: String

    # Sender device data used during the transaction or while onboarding the instrument.
    senderContext: ThreedsSenderContextInput!
  ): ThreedsCreateConfirmationResponse

  # 3DS 2.0 FI service handle contingency during addCard: Updates a confirmation
  # resource for a given card confirmation respource
  # URL: /v1/wallet/card-accounts/{card_account_id}/confirmations/{confirmation_id}/update
  # card-account.update-confirmation
  # Purpose: This API is the last call in 3ds 2.0 resolution process
  # This API is called soon after cardinal calls (after OTP is entered by user) a return url on paypal app
  # After this call returns success we continue to call create checkout session.
  # Upon failure we redirect to hermes from xoon, or
  # we show relevant error messaging on hermes
  threedsUpdateConfirmation(
    # Confirmation ID - this ID is got from createConfirmation call
    confirmationId: String!

    # confirmation method - ONLINE_SECURE_AUTHENTICATION ONE_RANDOM_CHARGE_CONFIRMATION TWO_RANDOM_CHARGE_CONFIRMATION
    # Should remain same as what we used in createConfirmation call
    confirmationMethod: ThreedsConfirmationMethod!

    # The confirmation status to which comfirmation needs to be updated - CONFIRMED, UNCONFIRMED
    # This is defaulted to CONFIRMED in this app before calling FI
    confirmationStatus: String

    # The card verification value (CVV)
    cvv: String!

    # Funding Instrument ID - cc id generated by add fi call
    fiId: String!

    # Unique ID for 3DS - each 3ds 2.0 transaction will have a unique referenceId generated by backend services
    referenceId: String!

    # The ID of the transaction that is associated with this 3D Secure
    # authentication. required only when confirmation method is
    # ONLINE_SECURE_AUTHENTICATION
    # This is the transactionId (key name in carinal response object:
    # TransactionId) returned to our app by cardinal through a callback url
    # we send as part of cardinal iframe load post call
    transactionId: String!
  ): ThreedsUpdateConfirmationResponse

  # 3DS lookup endpoint through inbound switch (switchpaymentsapiserv) used to handle 3DS at transaction time
  # URL: /v1/payment-networks/card-three-d-secure-authentications
  # Purpose: when Symphony throws 3ds 2.0 contingency upon planning call, we need to call this API to start the 3ds 2.0
  # resolution process. This is the first call to make, after Device Data Collection(DDC) is triggered in UI.
  # In response of this API we get the urls needed for cardinal iframe to enter OTP.
  threeDSLookUp(
    token: String
    threedsLookUpPayload: threedsLookUpPayload!
    amount: AmountInput!
    browserInfo: ThreedsBrowserDetailsInput
    productDetails: ProductDetails
    partnerDetails: PartnerDetails
    nativeSDK: Boolean
  ): ThreeDSLookUpResponse

  # 3DS Authenticate endpoint through inbound Switch (switchpaymentsapiserv) used to handle 3DS at transaction time
  # URL: /v1/payment-networks/card-three-d-secure-authentications/${threeDsServerTransactionId}/authenticate
  # Purpose: This API is the last call in 3ds 2.0 resolution process
  # This API is called soon after cardinal calls (after OTP is entered by user) a return url on paypal app.
  # After this call returns success application continue authorize checkout session. Upon failure errors needs to handle
  # at client side(for ex: Incase of xoonboardingnodeweb, error is show on billing page).
  threeDSAuthenticate(
    threeDsServerTransactionId: String!
    authenticatePayload: threedsLookUpPayload!
    paymentAuthenticationRequest: String!
    amount: AmountInput!
    productDetails: ProductDetails
  ): ThreeDSAuthenticateResponse

  # Invalidate Checkout Session Plan to force replanning next time the Checkout Session is queried
  invalidateCheckoutSessionPlan(token: String!): Boolean

  # Upgrade a Low Scope Access Token (LSAT) produced from a client_id without a secret to an upgraded access token
  # that will provide access to GET/PATCH on v2/order and POST v2/order/capture and v2/order/authorize checkout APIs
  upgradeLowScopeAccessToken(
    token: String!
    buyerAccessToken: String!
    merchantLSAT: String!
  ): Boolean

  # Authorize or capture payment using v2/orders/authorize or capture endpoints given intent
  completePayment(
    clientID: String!
    token: String!
    buyerAccessToken: String!
    partnerAttributionId: String
  ): JSON

  # Approve suggested donation
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  approveSuggestedDonation(token: String!): Boolean

  # Mutation to complete 3DS (1.0) confirmation and approve the payment.
  # This is used in full page redirect experience where we complete the 3DS confirmation and approve the payment
  # in a single network call.  This is preferred over `approveMemberPayment` when the payment needs to approved
  # without having to change the plan
  completeThreeDSAndApprovePayment(
    token: String!
    thirdPartyToken: String
    responseParams: [ThreeDSParamsInput]
  ): CheckoutSession

  # Clear 3DS (2.0) contingency. This mutation can be consumed by any other client apps without
  # including any other checkout related business logic
  resolveThreeDsContingency(
    #
    token: String!

    # threeDSTransactionId from the threeDSAuthenticate mutation
    authId: String!

    # Status of the 3DS 2.0 resolution
    status: ResolveThreeDsContingencyStatus!

    # referenceId from PaymentContingency.threeDSContingencyData.resolution.contingencyContext.referenceId
    referenceId: String!

    # ID of the funding option that has the contingency
    creditCardId: String!

    # ID of the plan with the contingency we are resolving. This is required when the plan is not the default plan.
    # Otherwise it is optional.
    planId: String
  ): CheckoutSession

  # Add a bank account candidate.
  addBankCandidate(
    bank: BankAccountInput!
    countryCode: CountryCodes!
    beneficiary: BankAccountBeneficiaryInput
    billingAddress: AddressInput
  ): BankAccount

  # Accept the SEPA Direct Debit Mandate for a given bank account.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  acceptSepaMandate(
    token: String!
    bankId: String!
    planId: String
  ): CheckoutSession

  # Tokenless accept the SEPA Direct Debit Mandate for a given bank account.
  #
  # Required auth states: LOGGEDIN
  acceptSepaMandateWithoutToken(bankId: String!): Boolean

  # The addBank mutation will add a new bank account and update checkoutSession
  # fundingOptions based on the newly added bank account.
  # `authorizations` takes any authorization needs to be completed
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addBank(
    token: String!
    bank: BankAccountInput!
    countryCode: CountryCodes!
    beneficiary: BankAccountBeneficiaryInput
    authorizations: BankAccountAuthorizationsInput
  ): CheckoutSession

  # The addBankAfterStepup mutation is used if the original addBank call throws a
  # RISK_DECLINE_REDIRECT_AUTH_FLOW error from FI due to a SCA
  # requiring stepup. Once the stepup is resolved, the client will call
  # addBankAfterStepup and provide the authContextId they received from
  # xobuyernodeserv in the addBank contingency. The authContextId will be used to
  # grab the original parameters from junonodisk so that the
  # client does not need to re-enter them. Once parameters are grabbed from
  # junonodisk, this operation finishes the addBank steps and adds a
  # new bank account and updates checkoutSession fundingOptions based on the newly added bank account.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addBankAfterStepup(authContextId: String!, token: String!): CheckoutSession

  # The optOutWebLLS mutation will unenroll the user from the autologin aka WebLLS feature
  # Mutation will read the assetValue from cookies unless passed directly
  optOutWebLLS(token: String!): CheckoutSession

  # The applyOfferToUser takes the name of an offer
  # and applies an offer to the user.
  # The offer names are whitelisted here:
  # src/graphql/data/Offers/activeOffers.js
  applyOfferToUser(token: String!, type: OfferPrograms!): CheckoutSession

  # The initiateOtpConfirmation mutation will initiate the one-time-password flow for a card account.
  initiateOtpConfirmation(
    fundingInstrumentId: String!
    phone: PhoneInput!
  ): InitiateOtpConfirmationResponse

  # The completeOtpConfirmation mutation will complete the one-time-password flow for a card account.
  completeOtpConfirmation(
    card: CompleteCardOtpConfirmationInput!
    fundingInstrumentId: String!
    phone: PhoneInput!
  ): CompleteOtpConfirmationResponse

  # Add address to User's Profile and Replan the current Checkout Session.
  addAddressToUser(
    token: String!
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    countryCode: CountryCodes!
    addressLine1: String
    addressLine2: String
    addressLine3: String
    adminArea4: String
    adminArea3: String
    adminArea2: String
    adminArea1: String
    primary: Boolean
    normalize: Boolean = false
  ): CheckoutSession

  # Init phone confirmation
  initiateTwoFactorPhoneConfirmation(
    phoneNumber: String!
    phoneCountry: CountryCodes
    locale: LocaleInput
  ): PhoneConfirmationResponse

  # Confirm phone confirmation
  confirmTwoFactorPhoneConfirmation(
    pin: String!
    verificationId: String!
  ): PhoneConfirmationResponse

  # Marks strongCustomerAuthenticationRequired payment contingency as completed,
  # and removes the contingency from the Checkout Session.
  # Note that a different contingency may be returned after clearing the strongCustomerAuthenticationRequired contingency,
  # so clients should still query for paymentContingencies that are supported.
  completeStrongCustomerAuthentication(token: String!): CheckoutSession

  # Update a post-planning Checkout Session with a funding option ID that was
  # externally updated (eg. through an FI api or some other mutation that does not
  # affect CheckoutSession)
  updateCheckoutSessionFundingOptions(
    #
    token: String!

    # Funding Option ID from FI
    fundingOptionId: String!

    # Pass true if the funding option provided has completed the 3DS 2.0 already, so that the contingency does not get
    # triggered again
    threeDSResolved: Boolean = false
  ): CheckoutSession

  # To create/fetch the Venmo Guest Account information to proceed with Checkout
  venmoCredentialExchange(
    firstName: String!
    lastName: String!
    tspCommonId: String!
    email: String!
    phone: String!
    orderID: String!
  ): VenmoGuestUser

  # Approves the Apple Pay payment.
  approveApplePayPayment(
    token: ApplePayPaymentToken!
    orderID: String!
    clientID: String!
    billingContact: ApplePayPaymentContact!
    shippingContact: ApplePayPaymentContact
  ): JSON

  # Approves the Google Pay payment.
  approveGooglePayPayment(
    paymentMethodData: GooglePayPaymentMethodData!
    orderID: String!
    clientID: String!
    shippingAddress: GooglePayPaymentContact
    email: String
  ): JSON

  # checkoutGuestWithMemberBenefits mutation will take parameters similar to
  # isMemberBenefitsEligible query and trys to checkout a guest user as a
  # member (by generating member security context on xobuyer)
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  # Requires a email ("example@paypal.com") as a String
  # Requires a phoneNumber ("800-888-8888") as a String
  # Requires a country ("US") as a String
  #
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a currencyConversionType
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  # Optionally pass a bank as a BankAccountInput (type, iban, accountNumber, routingNumber)
  #
  # Returns checkoutsession
  #
  # Required auth states: ANONYMOUS
  checkoutGuestWithMemberBenefits(
    # The buyer's billing address. Required for AMEX card
    billingAddress: AddressInput

    # The buyer's bank information
    bank: BankAccountInput

    # The buyer's credit card
    card: CardInput

    # The buyer's country code.
    country: CountryCodes!

    # The selected currency conversion type that the user has selected - PAYPAL or VENDOR
    currencyConversionType: CheckoutCurrencyConversionType

    # The buyer's email address. Maximum length is 127 characters.
    email: String!

    # The buyer's first name.
    firstName: String!

    # The buyer's last name.
    lastName: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: PhoneInput!

    # The buyer's desired shipping address.
    shippingAddress: AddressInput

    # A token param (EC, PAY, or BA token) as a String
    token: String!
  ): CheckoutSession
}

# Mutation root type.  See https://graphql.org/learn/execution/#root-fields-resolvers
type checkoutMutation {
  # The `addBillingAddress` mutation will add a billing address to the Users billing addresses.
  #
  # If an `instrumentId` is passed in, it will associate the billing address with it.
  #
  # - Requires parameters for an address (Ex: line1, line2, etc.).
  # - Optionally accepts an instrumentId param as a String.
  #
  # Returns a CheckoutSession type.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addBillingAddress(
    instrumentId: String
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String!
    addressLine1: String
    addressLine2: String
    addressLine3: String
    adminArea4: String
    adminArea3: String
    adminArea2: String
    adminArea1: String
    countryCode: checkoutCountryCodes!
  ): checkoutAddBillingAddressResponse

  # The resolveNeedPhoneContingency mutation will add a phone number to a User,
  # which is needed to complete a transaction, if a merchant requires a phone number from the customer.
  # An additional call will be made to paymentapiplatformserv to
  # clear the PHONE_NUMBER_REQUIRED contingency from the checkout session.
  #
  # If the consentContentId string is passed, it will be used to update the user notification preferences.
  # The consentContentId string is not mandatory because it is only required for US based users.
  #
  # Returns a CheckoutSession type.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  resolveNeedPhoneContingency(
    # The phone number details entered by the user
    phone: checkoutPhoneInput!

    # Token associated with the transaction
    token: String!

    # The country from the locale metadata query
    country: checkoutCountryCodes!

    # Unique identifier for consent agreement when setting notification preferences
    consentContentId: String
  ): checkoutCheckoutSession

  # The addTaxId mutation will add a Tax Identification number to a Brazil User,
  # if the TAX_ID_REQUIRED contingency is triggered as the user has not yet added a tax id.
  #
  # Requires a:
  #   token param (EC, PAY, or BA token) as a String.
  #   taxId ("123.123.123-12" in BR case) as a String.
  #   type (CPF or CNPJ in BR case) as a TaxIdType.
  #
  # Returns a CheckoutSession type.
  #
  # Required auth states: LOGGEDIN, REMEMBERED.
  addTaxId(
    # A token param (EC token) as a String
    token: String!

    # The Tax Id to be added to the user
    taxId: String!

    # The type of Tax Id to be added to the user (CPF for personal accounts or CNPJ for business accounts)
    type: checkoutTaxIdType!
  ): checkoutCheckoutSession

  # Adds the current user to the list of users who are known to have viewed the
  # PiX interstitial modal
  #
  # Returns a Boolean indicating whether they were successfully added
  addToPiXInterstitialViewedList: Boolean

  # The addShippingAddress mutation will add a shipping address to a
  # Users shipping addresses, which can be used when approving the payment transaction.
  # Requires a token param (EC, PAY, or BA token) as a String.
  # Requires additional parameters for an address (Ex: line1, line2, etc.).
  #
  # Optionally accepts a `normalize` parameter that tells us if we need to try to normalize the address.
  # If a corrected address is returned from the Address Normalization Service,
  # then a `ADDRESS_NORMALIZED` Client Contingency is thrown with the normalized address passed down as data.
  #
  # Optionally accepts a `preferredAddress` parameter that tells us if we need to mark the current address
  # as Preferred for the user.
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 2200ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addShippingAddress(
    token: String!
    givenName: String!
    familyName: String!
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    countryCode: checkoutCountryCodes!
    normalize: Boolean = false
    addressLine1: String
    addressLine2: String
    addressLine3: String
    adminArea4: String
    adminArea3: String
    adminArea2: String
    adminArea1: String
    preferredAddress: Boolean
  ): checkoutCheckoutSession

  # The addUserToCustomerList mutation will add a user to the provided dynamic customer list given the
  # user is present in RPS
  #
  # Requires a dynamic customer list name (Ex: 'CL-6465007365187988655')
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addUserToCustomerList(listName: String!): Boolean

  # The approveGuestPaymentWithCreditCard mutation will approve a guest payment transaction with credit card.
  #
  # If passed an phone number, it will use that phone number for the transaction. Otherwise it will
  # use the one in mayfly checkout session.
  #
  # If passed an first name, it will use that name for the transaction. Otherwise it will
  # use the one in mayfly checkout session.
  #
  # If passed an last name, it will use that name for the transaction. Otherwise it will
  # use the one in mayfly checkout session.
  #
  # If passed an email, it will use that email for the transaction. Otherwise it will
  # use the one in mayfly checkout session.
  #
  # If passed an billing address, it will use that billing address for the transaction. Otherwise it will
  # use the one in mayfly checkout session.
  #
  # If passed an installmentTerm, payment will be approved with selected installment term. Otherwise it will
  # approve with total payment at once. This is only available for Brazil and Mexico at the moment.
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  #
  # Optionally accepts an email as a String
  # Optionally accepts a fist name as a String
  # Optionally accepts a last name as a String
  # Optionally accepts a phone as a String
  # Optionally accepts a billingAddress as a InputAddress
  # Optionally accepts an installmentTerm
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 13000ms
  #
  # Required auth states: ANONYMOUS
  approveGuestPaymentWithCreditCard(
    # The buyer's credit card
    card: checkoutCardInput!

    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phoneNumber: String

    # The buyer's first name.
    firstName: String

    # The buyer's first name.
    lastName: String

    # The buyer's billing address.
    billingAddress: checkoutAddressInput

    # The buyer's shipping address
    shippingAddress: checkoutAddressInput

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # How currency is being converted in this payment. Default method of conversion is paypal.
    currencyConversionType: checkoutCheckoutCurrencyConversionType

    # Installment term chosen by buyer for the payment (Ex: 1)
    installmentTerm: Int
  ): checkoutCheckoutSession

  # The approveMemberPayment mutation will approve a payment for PayPal members.
  #
  # This interface uses funding option IDs, rather than plan IDs.
  #
  # Requires `token`, the EC, PAY or BA token used for this payment.
  #
  # Requires `primaryFundingOptionId`, which is the primary funding option ID used to fund the payment.
  # Optionally accepts `secondaryFundingOptionIds`, which is an Array of funding option IDs.
  # Optionally accepts `rewards`, which is an Object, containing the rewards ID, amount, and currency code.
  #
  # approveMemberPayment will attempt to find the associated plan given those funding option IDs
  # approveMemberPayment will complete a payment for a WPS Payment.
  #
  # If passed `selectedAddressId`, it will select that address for the payment.
  # If passed `preferredFundingOptionId`, it will select that funding option as preferred for future payments.
  # If passed `preferredShippingAddressId`, it will select that address as preferred for future payments.
  # If passed `preAuthorizationRequired`, it will collect Credit Card status from
  # the issuer to check if its valid (Expired Card, Insufficient funds, etc).
  # If passed `cardCvvValue`, it will resolve cvv value for the currently selected card (primaryFundingOptionId).
  # If passed `card3DSResolve3DSCode`, it will resolve 3DS for the currently selected card (primaryFundingOptionId).
  # If passed `legalAgreements`, it will record user legal consent (User Agreement) data on Notice & Consent API.
  #
  # Returns a CheckoutSession type.
  #
  # Please query for state field to get status of checkoutSession when using this Mutation.
  # If successful, state will change to APPROVED.
  # If not successful, check the PaymentContingencies field to see issues that need to be resolved first.
  #
  # Average SLA response time - 2500ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  approveMemberPayment(
    # A token param (EC, PAY, or BA token) as a String
    token: String!

    #
    primaryFundingOptionId: String

    #
    secondaryFundingOptionIds: [String!]

    #
    selectedInstallmentOption: checkoutInstallmentsInput

    #
    rewards: checkoutRewardsInput

    #
    selectedAddressId: String

    #
    preferredFundingOptionId: String

    #
    preferredShippingAddressId: String

    #
    preAuthorizationRequired: Boolean

    #
    cardCvvValue: String

    #
    card3DSResolve3DSCode: String

    #
    fundingMethodType: checkoutFundingInstrumentMethodType

    #
    shareAddressWithDonatee: Boolean

    # Boolean to indicate that user completed auth challenge to resolve strongCustomerAuthenticationRequired contingency
    strongCustomerAuthenticationCompleted: Boolean

    # Boolean to indicate if the primary funding option should be set as StickyFI for a billing agreement, default is true
    setStickyFiRequired: Boolean = true

    # ID of a quote for an asset that needs to be sold. Required if the funding
    # option ID corresponds to an asset that needs to be sold, like Crypto
    cryptocurrencyQuoteId: String

    # Value is set to true when the user chooses to enable fullwallet feature
    fullWalletOptIn: Boolean

    # Base 64 encoded paycode
    paycodeEncrypted: String

    # Set the balance preference of the billing agreement. If opted in, uses
    # balance first for all billing agreement transactions
    balancePreference: checkoutBalancePreference

    # Data related to the Legal Agreements accepted
    legalAgreements: checkoutLegalAgreementsInput
  ): checkoutCheckoutSession

  # The approvePayment mutation will approve a payment transaction.
  # If passed an planId, it will select that plan for the transaction.
  # If passed an addressId, it will select that address for the transaction.
  # First, plans will be selected, then addresses will be selected, then the
  # payment will be approved.
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a planId as a String
  # Optionally accepts an addressId as a String
  #
  # Returns a CheckoutSession type.
  #
  # Please query for state field to get status of checkoutSession when using this Mutation.
  # If successful, state will change to APPROVED.
  # If not successful, check the PaymentContingencies field to see issues that need to be resolved first.
  #
  # Average SLA response time - 2500ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  approvePayment(
    #
    token: String!

    #
    selectedPlanId: String!

    #
    selectedAddressId: String

    #
    preferredFundingOptionId: String

    #
    preferredShippingAddressId: String

    # Boolean to indicate that user completed auth challenge to resolve strongCustomerAuthenticationRequired contingency
    strongCustomerAuthenticationCompleted: Boolean
  ): checkoutCheckoutSession

  # The oneClickPayment mutation will plan and approve a payment in one go.
  # Any contingencies will result in launching the full checkout flow
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  oneClickPayment(
    token: String!
    selectedInstrumentId: String!
    selectedInstrumentType: String!
    useExistingPlanning: Boolean
    selectedPlanId: String
  ): checkoutUser

  # This handles the patch and approval process when a user attempts to process a split payment transaction
  # through the Split Tender interface.
  #
  # Returns a CheckoutSession type
  #
  # Required auth states: LOGGEDIN
  approveMemberPaymentWithSplitFundingOptions(
    #
    token: String!

    #
    splitFundingOptions: [checkoutSplitFundingOptionsInput]!

    #
    selectedAddressId: String

    #
    preferredShippingAddressId: String

    # Value is set to true when the user chooses to enable fullwallet feature
    fullWalletOptIn: Boolean
  ): checkoutCheckoutSession

  # The approveGuestSignUpPayment mutation will approve a payment transaction for a signup/guest flow
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 500ms
  #
  # Required auth states: LOGGEDIN, IDENTIFIED
  approveGuestSignUpPayment(token: String!): checkoutCheckoutSession

  # Preauthorize plan by calling XOPG from SignupLite
  #
  # Required auth states: LOGGEDIN, IDENTIFIED
  preAuthorizePayment(token: String!): checkoutCheckoutSession

  # The attemptSetStickyFi mutation will set the sticky/primary funding instrument for billing with purchase on sign up flow
  #
  # Returns a CheckoutSession type.
  #
  # Required auth states: LOGGEDIN
  attemptSetStickyFi(
    token: String!
    instrumentId: String
  ): checkoutCheckoutSession

  # CompleteThreeDSConfirmation mutation will take in a third_party_response token that will be processed
  # by card3dsAuthenticationServ. If successful, additional call will be made to paymentapiplatformserv to
  # clear the 3DS contingency from the checkout session
  #
  # Requires a thirdPartyToken ("ASDFASDFASDFASDFASDFASDFASDFASDF") as a String
  # Requires a token param (EC, PAY, or BA token) as a String
  #
  # Average SLA response time - 1400ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  completeThreeDSConfirmation(
    # The third party confirmation string
    thirdPartyToken: String!

    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # Array of response parameters from required to complete 3DS verification
    responseParams: [checkoutThreeDSParamsInput]
  ): checkoutCheckoutSession

  # The deleteShippingAddress mutation will delete a shipping address from a Users
  # shipping addresses, so it cannot be used when approving a payment transaction.
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires an addressId param as a String Returns a CheckoutSession type.
  #
  # Average SLA response time - 900ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  deleteShippingAddress(
    token: String!
    addressId: String!
  ): checkoutCheckoutSession

  # signupNewMember mutation will take a user's billing information and password and attempt to create an account
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  #
  # Optionally pass a password ("example123") as a String
  # Optionally pass an email ("example@gmail.com") as a String
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a phoneNumber ("800-888-8888") as a String
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 2350ms
  #
  # Required auth states: ANONYMOUS
  signUpNewMember(
    # The buyer's credit card
    card: checkoutCardInput

    # The buyer's bank information
    bank: checkoutBankAccountInput

    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: checkoutPhoneInput

    # The buyer's first name.
    firstName: String!

    # The buyer's middle name.
    middleName: String

    # The buyer's last name.
    lastName: String!

    # The buyer's billing address. Required for AMEX card
    billingAddress: checkoutAddressInput

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # The buyer's date of birth.
    dateOfBirth: checkoutDateOfBirth

    # The buyer's desired password.
    password: String

    # The buyer's desired installment payment plan
    selectedInstallmentOption: checkoutInstallmentsInput

    # The buyer's desired shipping address.
    shippingAddress: checkoutAddressInput

    # The buyer's nationality.
    nationality: checkoutCountryCodes

    # The buyer's occupation (i.e. A.
    occupation: checkoutOccupation

    # The buyer's country code.
    country: checkoutCountryCodes

    # The buyers's country of residence
    countryOfResidence: checkoutCountryCodes

    # The buyer's content identifier that identifies legal requirements agreed to (only applicable for US)
    contentIdentifier: String

    # The selected currency conversion type that the user has selected - PAYPAL or VENDOR
    currencyConversionType: checkoutCheckoutCurrencyConversionType

    # Determines whether the buyer decides to opt out of marketing materials
    marketingOptOut: Boolean

    # The buyer's identity document number and type
    identityDocument: checkoutIdentityDocumentInput

    # The buyer's secondary identity document number and type
    secondaryIdentityDocument: checkoutIdentityDocumentInput

    # The buyer's gender
    gender: checkoutGender

    # The buyer's place of birth
    placeOfBirth: checkoutCountryCodes

    # Donor's consent of sharing address
    shareAddressWithDonatee: Boolean

    # Data collected for Common Reporting Standards
    crsData: checkoutCommonReportingStandardsInput

    # Primary residential address. Required for some countries
    residentialAddress: checkoutAddressInput

    # Determines whether the buyer decided to create an account for a signup incentive
    isSignupIncentiveOptIn: Boolean

    # Data related to the Legal Agreements accepted
    legalAgreements: checkoutLegalAgreementsInput
  ): checkoutCheckoutSession

  # upgradeGuestToMember mutation takes data from a completed transaction
  # as guest user and upgrades to consumer member account
  #
  # Required auth states: IDENTIFIED
  upgradeGuestToMember(
    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: checkoutPhoneInput

    # The buyer's first name.
    firstName: String!

    # The buyer's middle name.
    middleName: String

    # The buyer's last name.
    lastName: String!

    # The buyer's billing address. Required for AMEX card
    billingAddress: checkoutAddressInput

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # The buyer's date of birth.
    dateOfBirth: checkoutDateOfBirth

    # The buyer's desired password.
    password: String

    # The buyer's nationality.
    nationality: checkoutCountryCodes

    # The buyer's occupation (i.e. A.
    occupation: checkoutOccupation

    # The buyer's country code.
    country: checkoutCountryCodes

    # The buyers's country of residence
    countryOfResidence: checkoutCountryCodes

    # The buyer's content identifier that identifies legal requirements agreed to (only applicable for US)
    contentIdentifier: String

    # Determines whether the buyer decides to opt out of marketing materials
    marketingOptOut: Boolean

    # The buyer's identity document number and type
    identityDocument: checkoutIdentityDocumentInput

    # The buyer's secondary identity document number and type
    secondaryIdentityDocument: checkoutIdentityDocumentInput

    # The buyer's gender
    gender: checkoutGender

    # The buyer's place of birth
    placeOfBirth: checkoutCountryCodes

    # Primary residential address. Required for some countries
    residentialAddress: checkoutAddressInput

    # Data related to the Legal Agreements accepted
    legalAgreements: checkoutLegalAgreementsInput
  ): checkoutCheckoutSession

  # createMemberAccount mutation will take a user's information and password and attempt to create an account
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  #
  # Optionally pass a password ("example123") as a String
  # Optionally pass an email ("example@gmail.com") as a String
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a phoneNumber ("800-888-8888") as a String
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 2290ms
  #
  # Required auth states: ANONYMOUS
  createMemberAccount(
    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: checkoutPhoneInput

    # The buyer's first name.
    firstName: String!

    # The buyer's middle name.
    middleName: String

    # The buyer's last name.
    lastName: String!

    # The buyer's billing address.
    billingAddress: checkoutAddressInput

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # The buyer's date of birth.
    dateOfBirth: checkoutDateOfBirth

    # The buyer's desired password
    password: String

    # The buyer's desired shipping address
    shippingAddress: checkoutAddressInput

    # The buyer's nationality
    nationality: checkoutCountryCodes

    # The buyer's occupation
    occupation: checkoutOccupation

    # The buyer's country code
    country: checkoutCountryCodes!

    # The buyer's country of residence
    countryOfResidence: checkoutCountryCodes

    # The buyer's content identifier that identifies legal requirements agreed to (only applicable for US)
    contentIdentifier: String

    # Determines whether the buyer decides to opt out of marketing materials
    marketingOptOut: Boolean

    # The buyer's identity document number and type
    identityDocument: checkoutIdentityDocumentInput

    # The buyer's secondary identity document number and type
    secondaryIdentityDocument: checkoutIdentityDocumentInput

    # The buyer's gender
    gender: checkoutGender

    # The buyer's place of birth
    placeOfBirth: checkoutCountryCodes

    # Data collected for Common Reporting Standards
    crsData: checkoutCommonReportingStandardsInput

    # Primary residential address. Required for some countries
    residentialAddress: checkoutAddressInput

    # Data related to the Legal Agreements accepted
    legalAgreements: checkoutLegalAgreementsInput
  ): checkoutCheckoutSession

  # onboardGuest mutation will take a user's billing information and attempt to create an account
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  #
  # Optionally pass an email ("example@gmail.com") as a String
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a phoneNumber ("800-888-8888") as a String
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 2350ms
  #
  # Required auth states: ANONYMOUS
  onboardGuest(
    # The buyer's billing address. Required for AMEX card
    billingAddress: checkoutAddressInput

    # The buyer's bank information
    bank: checkoutBankAccountInput

    # The buyer's credit card
    card: checkoutCardInput

    # The buyer's country code.
    country: checkoutCountryCodes

    # The selected currency conversion type that the user has selected - PAYPAL or VENDOR
    currencyConversionType: checkoutCheckoutCurrencyConversionType

    # The buyer's date of birth - FR card type Carte Aurore needs dob
    dateOfBirth: checkoutDateOfBirth

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # The buyer's first name.
    firstName: String!

    # The buyer's last name.
    lastName: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: checkoutPhoneInput

    # The buyer's desired shipping address.
    shippingAddress: checkoutAddressInput

    # A token param (EC, PAY, or BA token) as a String
    token: String!

    # Donor's consent of sharing address
    shareAddressWithDonatee: Boolean
  ): checkoutCheckoutSession

  # onboardGuestForInlineXO mutation will take a user's billing information and attempt to create an account
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  #
  # Optionally pass an email ("example@gmail.com") as a String
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a phoneNumber ("800-888-8888") as a String
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  #
  # Returns a CheckoutSession type.
  #
  # Required auth states: ANONYMOUS
  onboardGuestForInlineXO(
    # The buyer's billing address. Required for AMEX card
    billingAddress: checkoutAddressInput

    # Billing agreement type
    billingType: String

    # The buyer's credit card
    card: checkoutCardInput

    # The buyer's country code.
    country: checkoutCountryCodes

    # The selected currency conversion type that the user has selected - PAYPAL or VENDOR
    currencyConversionType: checkoutCheckoutCurrencyConversionType

    # The buyer's email address. Maximum length is 127 characters.
    email: String

    # The buyer's first name.
    firstName: String!

    # shipping address change is allowed or not
    isChangeShippingAddressAllowed: Boolean

    # The buyer's last name.
    lastName: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: checkoutPhoneInput

    # The buyer's desired shipping address.
    shippingAddress: checkoutAddressInput

    # A token param (EC, PAY, or BA token) as a String
    token: String!
  ): checkoutCheckoutSession

  # createOnboardingPaymentPlan mutation will take a user's shipping information
  # and currencyConversionType and attempt to create a checkout session
  createOnboardingPaymentPlan(
    # currencyConversionType - PAYPAL or VENDOR
    currencyConversionType: checkoutCheckoutCurrencyConversionType

    # cvv of the credit card - 3 or 4 digits
    cvv: String

    # In guest transactions we pass encrypted card linked member account number if available
    encryptedCardLoginAccountNumber: String

    # Funding Insrument ID - value starts with CC- for card and BA- for bank
    fundingInstrumentId: String!

    # Donor's consent of sharing address
    shareAddressWithDonatee: Boolean

    # shippingAddress of the transaction
    shippingAddress: checkoutAddressInput

    # token EC or WPS token
    token: String!

    # userType GUEST or SIGN_UP
    userType: checkoutOnboardingExperienceType!
  ): checkoutCheckoutSession

  # The updateCurrencyConversionType mutation will update a currency conversion type
  # (Ex: "PAYPAL" or "VENDOR").
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a conversionType (Ex: "PAYPAL" or "VENDOR") See CheckoutCurrencyConversionType.
  #
  # Average SLA response time - 115ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  updateCurrencyConversionType(
    token: String!
    conversionType: checkoutCheckoutCurrencyConversionType!
  ): checkoutCheckoutSession

  # The updateShippingAddress mutation will update a shipping address in a Users
  # shipping addresses, which can be used when approving the payment transaction.
  # Requires a token param (EC, PAY, or BA token) as a String.
  # Requires an addressId param as a String.
  # Requires additional parameters for an address (Ex: line1, city, countryCode).
  # Optionally accepts additional parameters to be updated (Ex: givenName, line2, etc.).
  #
  # This mutation does NOT PATCH/DELETE the previous record, rather it adds a new one entirely with a newly created addressId
  #
  # [//]: # (refer to https://github.paypal.com/ApiSpecifications-R/payments.CommonComponentSpecification/blob/v1.3/v1/schema/address.json
  # for required address fields)
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - 2300ms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  updateShippingAddress(
    token: String!
    addressId: String!
    givenName: String
    familyName: String
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    countryCode: checkoutCountryCodes!
    addressLine1: String
    addressLine2: String
    addressLine3: String
    adminArea4: String
    adminArea3: String
    adminArea2: String
    adminArea1: String
  ): checkoutCheckoutSession

  # The updateShippingMethods mutation will update shipping options in the cart, or add
  # them if they do not exist
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires an shippingMethods param as a CartShippingMethod
  # Optionally accepts additional parameters to be updated (Ex: givenName, line2, etc.)
  #
  # Returns a CheckoutSession type.
  #
  # Average SLA response time - TBDms
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  updateShippingMethods(
    token: String!
    shippingMethods: [checkoutShippingMethodInput]!
  ): checkoutCheckoutSession

  # The updateShippingMethodsForGuest mutation will update shipping options in
  # the cart, or add them if they do not exist.
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Required shipping methods as an array of objects.
  #
  # Returns a CheckoutSession type.
  updateShippingMethodsForGuest(
    token: String!
    shippingMethods: [checkoutShippingMethodInput]!
  ): checkoutCheckoutSession

  # The updateShipping mutation will update shipping options and amount in
  # the cart, or add them if they do not exist.
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Required shipping methods as an array of objects.
  #
  # Returns a CheckoutSession type.
  updateShipping(
    clientID: String!
    patch: [checkoutJSON]!
    token: String!
  ): checkoutJSON

  # The updateCallbackOptions mutation will update call back shipping methods
  # in to cart. This mutation is for callback url/ instant update api flows.
  #
  # Requires a token param (EC, WPS, PAY, or BA token) as a String
  # Requires shipping options source (FALLBACK/ CALLBACK/ PROFILE ) as a String
  # Optionally accepts shipping methods as an array of objects.
  #
  # Returns a CheckoutSession type.
  updateCallbackOptions(
    token: String!
    shippingOptionsSource: checkoutShippingOptionsSource
    callbackShippingMethods: [checkoutCallbackShippingMethodInput]
  ): checkoutCheckoutSession

  # The updateProfileShippingOptions mutation will update profile shipping methods
  # in to cart.
  #
  # Requires a token param (EC, WPS, PAY, or BA token) as a String
  # Requires shipping options source (FALLBACK/ CALLBACK/ PROFILE ) as a String
  # Optionally accepts shipping methods as an array of objects.
  # Optionally accept profileOverrideAllowed (this is from the response from SnT
  # which help with shipping calculations) as a boolean
  # Optionally accept hideShipping (this value will help determine the shipping calculations) as a boolean
  #
  # Returns a CheckoutSession type.
  updateProfileShippingOptions(
    token: String!
    profileShippingMethods: [checkoutProfileShippingMethodInput]
    profileOverrideAllowed: Boolean
    hideShipping: Boolean
  ): checkoutCheckoutSession

  # The confirmCreditCardCvv mutation will attach the cvv to the user's funding source on PAPS
  #
  # Requires ConfirmedCreditCardCvvInput as an input type, see schema for reference.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  confirmCreditCardCvv(
    token: String!
    input: checkoutConfirmCreditCardCvvInput
    planId: String
  ): checkoutCheckoutSession

  # The addCard mutation will do the following depends on how arguments are being
  # passed:
  #   - Add a new card
  #   - Perform billing address validation if address.id is missing
  #   - Update checkoutSession fundingOptions based on the newly added card
  #   - paypalRequestId is unique uuid for each add card request. If we don't get
  # it from front end, we generate it using uuid library else we pass whatever
  # came in request.
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addCard(
    token: String!
    cardType: checkoutFundingOptionType = CREDIT_CARD
    card: checkoutAddCardInput!
    user: checkoutAddCardUserInput!
    address: checkoutAddCardBillingAddressInput
    paypalRequestId: String
    isPartialBillingAddress: Boolean
  ): checkoutCheckoutSession

  # The addPotentialCard mutation will do the following
  # passed:
  #   - Add a new card to the user wallet
  #   - Update checkoutSession fundingOptions based on the newly added card
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addPotentialCard(
    token: String!
    cardType: checkoutFundingOptionType = CREDIT_CARD
    card: checkoutPotentialCardInput!
    address: checkoutAddCardBillingAddressInput
  ): checkoutCheckoutSession

  # The addCardWithoutToken mutation will do the following:
  #   - Perform billing address validation if address.id is missing
  #   - Add a new card
  #   Required auth states: LOGGEDIN
  addCardWithoutToken(
    cardType: checkoutFundingOptionType = CREDIT_CARD
    card: checkoutAddCardInput!
    user: checkoutAddCardUserInput!
    address: checkoutAddCardBillingAddressInput!
    isPartialBillingAddress: Boolean
  ): Boolean

  # The updateCard mutation will do the following depends on how arguments are being
  # passed:
  #   - Update a new card
  #   - Perform billing address validation if address.id is missing
  #   - Update checkoutSession fundingOptions
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  updateCard(
    token: String!
    cardType: checkoutFundingOptionType = CREDIT_CARD
    card: checkoutAddCardInput!
    user: checkoutAddCardUserInput!
    address: checkoutAddCardBillingAddressInput
    fundingOptionId: String!
  ): checkoutCheckoutSession

  # The updateCardWithoutToken mutation will do the following depending on how arguments are being
  # passed:
  #   - Update a new card
  #   - Perform billing address validation if address.id is missing
  # Required auth states: LOGGEDIN
  updateCardWithoutToken(
    cardType: checkoutFundingOptionType = CREDIT_CARD
    card: checkoutAddCardInput!
    user: checkoutAddCardUserInput!
    address: checkoutAddCardBillingAddressInput!
    fundingOptionId: String!
  ): Boolean

  # The replaceCard mutation will do the following depends on how arguments are being
  # passed:
  #   - Replace a new card
  #   - Perform billing address validation if address.id is missing
  #   - Update checkoutSession fundingOptions
  #   - fundingOptionId is required for each replace card request, it is acquired
  # from fundingOptionId from declinedInstrument and sent from front end
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  replaceCard(
    token: String!
    card: checkoutAddCardInput!
    address: checkoutAddCardBillingAddressInput!
    fundingOptionId: String!
  ): checkoutCheckoutSession

  # The updateClientConfig mutation will patch in client configuration to the checkout session, to identify
  # the selected funding source, integration type, etc.
  #
  # Required auth states: ANONYMOUS
  updateClientConfig(
    #
    token: String!

    #
    productCode: checkoutProductCodeType

    #
    fundingSource: checkoutButtonFundingSourceType

    #
    integrationArtifact: checkoutIntegrationArtifactType

    #
    userExperienceFlow: checkoutUserExperienceFlowType

    #
    productFlow: checkoutProductFlowType

    #
    buyerIntent: checkoutBuyerIntentType

    # If not provided, will attempt to be detected based on request info.
    channel: checkoutProductChannel

    #
    buttonSessionID: String

    #
    productFeature: checkoutProductFeatureType
  ): Boolean

  # The enableVault mutation will patch in to cart with the client token (containing a customer id), to transform
  # the existing checkout session into a billing agreement / vault session.
  # Also will patch in client configuration to the BA session
  #
  # Required auth states: ANONYMOUS
  enableVault(token: String!, clientConfig: checkoutClientConfigInput): Boolean

  # The deleteVault mutation will remove an existing funding source from the vault
  #
  # Required auth states: IDENTIFIED
  deleteVault(paymentMethodID: String!): Boolean

  # update vault setup token
  #
  # v3/vault/setup-tokens/:id/update is a private endpoint only accessible by internal PayPal services
  # This mutation allows client-side code access to this endpoint while the vault team works on exposing
  # this endpoint externally
  #
  # Oauth2 scope(s): https://uri.paypal.com/services/vault/payment-tokens/read
  updateVaultSetupToken(
    clientId: String!
    idToken: String
    vaultSetupToken: String!
    paymentSource: checkoutPaymentSource
  ): checkoutVaultSetupTokenResponse

  # The eConsent mutation will update user's edelivery consent
  # E-Sign consent is the process by which US consumers consent to have their
  # notifications and statements delivered electronically
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  eConsent: checkoutUser

  # Save shared card Consent
  # Check to see if Secondary user has given consent for sharing details with Primary card user
  saveSharedCardConsent(sharedConsent: Boolean!): String

  # Create Credit key in Mayfly before redirecting to CAPE
  createCapeMayflyPayload(
    token: String!
    pageContext: String!
    creditFundingInstrumentId: String!
    userSelectedAddressId: String!
    userSelectedPreferredShippingAddressId: String!
    returnUriBase: String!
    isCreditSecondButton: Boolean
    isCrossCurrencyTransaction: Boolean
    creditIncentiveDetails: checkoutCreditIncentiveDetailsInput
    cartAmount: String
    cartCurrency: String
    isPPCReuse: Boolean
    isPPCInstallments: Boolean
  ): String

  # Read Credit key in Mayfly after redirecting from CAPE and update PPC data to GPL cache.
  retrieveCapeMayflyResponse(
    token: String!
    mayflyKey: String!
  ): checkoutCreditRedirectMayflyResponse

  # Patch cart with credit installment and update FI.
  processCapeReturn(
    token: String!
    financialInstrumentId: String!
    financialInstrumentDetails: checkoutCreditFinancialInstrumentDetailsInput
  ): checkoutCheckoutSession

  # trigger post on checkoutSession after user clicks Ready to Continue
  triggerReplan(token: String!): checkoutCheckoutSession

  # Remove the constraint on the declined funding instrument
  removeConstraintOnFI(
    token: String!
    fundingOptionId: String!
  ): checkoutCheckoutSession

  # The processCreditApplyPortableResponse mutation will decrypt the payload received from CAP and provide with
  # the selectedOffer, Repayment instruments and other required credit information
  # which can be used when selecting the Payment option.
  #
  # Requires a encrypted payload as a String.
  # Optionally accepts token as a String.
  #
  # Returns a CheckoutSession type.
  processCreditApplyPortableResponse(
    #
    encryptedPayload: String!

    #
    token: String!

    # Flag to skip the need/expired Card contingency errors when invoking resolveCheckoutSession
    skipFiContingency: Boolean

    # The FI type used when patching the cart.
    # This is needed to determine the key used to decrypt the encryptedPayload
    type: String
  ): checkoutCheckoutSession

  # The clearCreditFinancingOption mutation will delete the credit financing option
  # (deprecated, use updateCheckoutSessionCreditFinancingOption instead)
  clearCreditFinancingOption(token: String!): Boolean
    @deprecated(
      reason: "use updateCheckoutSessionCreditFinancingOption instead"
    )

  # The clearCheckoutSessionCreditFinancingOption mutation will delete the credit financing option
  # (deprecated, use updateCheckoutSessionCreditFinancingOption instead)
  clearCheckoutSessionCreditFinancingOption(
    token: String!
  ): checkoutCheckoutSession
    @deprecated(
      reason: "use updateCheckoutSessionCreditFinancingOption instead"
    )

  # The updateCheckoutSessionCreditFinancingOption mutation will update(add or remove)
  # the credit financing options for a given session
  updateCheckoutSessionCreditFinancingOption(
    token: String!
    fundingInstrumentFinancingDetail: checkoutFundingInstrumentFinancingInput
  ): checkoutCheckoutSession

  # Clear the real time balance contingency(needRealTimeBalanceForBankAccount) to either allow or disallow
  # the payment in case the user has indicated they want to use this bank .
  #
  # Requires the fundingOption Id of the bank and the EC token
  clearRealTimeBalanceContingency(
    token: String!
    bankId: String!
    error: String
  ): checkoutCheckoutSession

  # 3DS 2.0 FI service to handle contingency during addCard: Creates a confirmation resource for a given card
  # URL: /v1/wallet/card-accounts/{card_account_id}/confirmations
  # card-account.create-confirmation
  # Purpose: when fi throws 3ds 2.0 contingency upon addCard call, we need to call this API to start the 3ds 2.0
  # resolution process. This is the first call to make, after Device Data Collection(DDC) is triggered in UI.
  # In response of this API we get the urls needed for cardinal iframe to enter OTP (response key step_up_url)
  threedsCreateConfirmation(
    # Instrument's confirmation status will be marked as confirmed without
    # performing the initiate/complete process if this parameter is true. Default is false
    bypassConfirmationProcess: Boolean = false

    # FI confirmation method - ONLINE_SECURE_AUTHENTICATION ONE_RANDOM_CHARGE_CONFIRMATION TWO_RANDOM_CHARGE_CONFIRMATION
    confirmationMethod: checkoutThreedsConfirmationMethod!

    # The card verification value (CVV) - not required when
    # bypass_confirmation_process is true and confirmation_method is
    # ONLINE_SECURE_AUTHENTICATION
    cvv: String

    # funding Instrument ID - ccId generated by filifecycleserv during add card
    fiId: String

    # Unique ID for 3DS - not required when bypass_confirmation_process is true
    # and confirmation_method is ONLINE_SECURE_AUTHENTICATION
    referenceId: String

    # Sender device data used during the transaction or while onboarding the instrument.
    senderContext: checkoutThreedsSenderContextInput!
  ): checkoutThreedsCreateConfirmationResponse

  # 3DS 2.0 FI service handle contingency during addCard: Updates a confirmation
  # resource for a given card confirmation respource
  # URL: /v1/wallet/card-accounts/{card_account_id}/confirmations/{confirmation_id}/update
  # card-account.update-confirmation
  # Purpose: This API is the last call in 3ds 2.0 resolution process
  # This API is called soon after cardinal calls (after OTP is entered by user) a return url on paypal app
  # After this call returns success we continue to call create checkout session.
  # Upon failure we redirect to hermes from xoon, or
  # we show relevant error messaging on hermes
  threedsUpdateConfirmation(
    # Confirmation ID - this ID is got from createConfirmation call
    confirmationId: String!

    # confirmation method - ONLINE_SECURE_AUTHENTICATION ONE_RANDOM_CHARGE_CONFIRMATION TWO_RANDOM_CHARGE_CONFIRMATION
    # Should remain same as what we used in createConfirmation call
    confirmationMethod: checkoutThreedsConfirmationMethod!

    # The confirmation status to which comfirmation needs to be updated - CONFIRMED, UNCONFIRMED
    # This is defaulted to CONFIRMED in this app before calling FI
    confirmationStatus: String

    # The card verification value (CVV)
    cvv: String!

    # Funding Instrument ID - cc id generated by add fi call
    fiId: String!

    # Unique ID for 3DS - each 3ds 2.0 transaction will have a unique referenceId generated by backend services
    referenceId: String!

    # The ID of the transaction that is associated with this 3D Secure
    # authentication. required only when confirmation method is
    # ONLINE_SECURE_AUTHENTICATION
    # This is the transactionId (key name in carinal response object:
    # TransactionId) returned to our app by cardinal through a callback url
    # we send as part of cardinal iframe load post call
    transactionId: String!
  ): checkoutThreedsUpdateConfirmationResponse

  # 3DS lookup endpoint through inbound switch (switchpaymentsapiserv) used to handle 3DS at transaction time
  # URL: /v1/payment-networks/card-three-d-secure-authentications
  # Purpose: when Symphony throws 3ds 2.0 contingency upon planning call, we need to call this API to start the 3ds 2.0
  # resolution process. This is the first call to make, after Device Data Collection(DDC) is triggered in UI.
  # In response of this API we get the urls needed for cardinal iframe to enter OTP.
  threeDSLookUp(
    token: String
    threedsLookUpPayload: checkoutthreedsLookUpPayload!
    amount: checkoutAmountInput!
    browserInfo: checkoutThreedsBrowserDetailsInput
    productDetails: checkoutProductDetails
    partnerDetails: checkoutPartnerDetails
    nativeSDK: Boolean
  ): checkoutThreeDSLookUpResponse

  # 3DS Authenticate endpoint through inbound Switch (switchpaymentsapiserv) used to handle 3DS at transaction time
  # URL: /v1/payment-networks/card-three-d-secure-authentications/${threeDsServerTransactionId}/authenticate
  # Purpose: This API is the last call in 3ds 2.0 resolution process
  # This API is called soon after cardinal calls (after OTP is entered by user) a return url on paypal app.
  # After this call returns success application continue authorize checkout session. Upon failure errors needs to handle
  # at client side(for ex: Incase of xoonboardingnodeweb, error is show on billing page).
  threeDSAuthenticate(
    threeDsServerTransactionId: String!
    authenticatePayload: checkoutthreedsLookUpPayload!
    paymentAuthenticationRequest: String!
    amount: checkoutAmountInput!
    productDetails: checkoutProductDetails
  ): checkoutThreeDSAuthenticateResponse

  # Invalidate Checkout Session Plan to force replanning next time the Checkout Session is queried
  invalidateCheckoutSessionPlan(token: String!): Boolean

  # Upgrade a Low Scope Access Token (LSAT) produced from a client_id without a secret to an upgraded access token
  # that will provide access to GET/PATCH on v2/order and POST v2/order/capture and v2/order/authorize checkout APIs
  upgradeLowScopeAccessToken(
    token: String!
    buyerAccessToken: String!
    merchantLSAT: String!
  ): Boolean

  # Authorize or capture payment using v2/orders/authorize or capture endpoints given intent
  completePayment(
    clientID: String!
    token: String!
    buyerAccessToken: String!
    partnerAttributionId: String
  ): checkoutJSON

  # Approve suggested donation
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  approveSuggestedDonation(token: String!): Boolean

  # Mutation to complete 3DS (1.0) confirmation and approve the payment.
  # This is used in full page redirect experience where we complete the 3DS confirmation and approve the payment
  # in a single network call.  This is preferred over `approveMemberPayment` when the payment needs to approved
  # without having to change the plan
  completeThreeDSAndApprovePayment(
    token: String!
    thirdPartyToken: String
    responseParams: [checkoutThreeDSParamsInput]
  ): checkoutCheckoutSession

  # Clear 3DS (2.0) contingency. This mutation can be consumed by any other client apps without
  # including any other checkout related business logic
  resolveThreeDsContingency(
    #
    token: String!

    # threeDSTransactionId from the threeDSAuthenticate mutation
    authId: String!

    # Status of the 3DS 2.0 resolution
    status: checkoutResolveThreeDsContingencyStatus!

    # referenceId from PaymentContingency.threeDSContingencyData.resolution.contingencyContext.referenceId
    referenceId: String!

    # ID of the funding option that has the contingency
    creditCardId: String!

    # ID of the plan with the contingency we are resolving. This is required when the plan is not the default plan.
    # Otherwise it is optional.
    planId: String
  ): checkoutCheckoutSession

  # Add a bank account candidate.
  addBankCandidate(
    bank: checkoutBankAccountInput!
    countryCode: checkoutCountryCodes!
    beneficiary: checkoutBankAccountBeneficiaryInput
    billingAddress: checkoutAddressInput
  ): checkoutBankAccount

  # Accept the SEPA Direct Debit Mandate for a given bank account.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  acceptSepaMandate(
    token: String!
    bankId: String!
    planId: String
  ): checkoutCheckoutSession

  # Tokenless accept the SEPA Direct Debit Mandate for a given bank account.
  #
  # Required auth states: LOGGEDIN
  acceptSepaMandateWithoutToken(bankId: String!): Boolean

  # The addBank mutation will add a new bank account and update checkoutSession
  # fundingOptions based on the newly added bank account.
  # `authorizations` takes any authorization needs to be completed
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addBank(
    token: String!
    bank: checkoutBankAccountInput!
    countryCode: checkoutCountryCodes!
    beneficiary: checkoutBankAccountBeneficiaryInput
    authorizations: checkoutBankAccountAuthorizationsInput
  ): checkoutCheckoutSession

  # The addBankAfterStepup mutation is used if the original addBank call throws a
  # RISK_DECLINE_REDIRECT_AUTH_FLOW error from FI due to a SCA
  # requiring stepup. Once the stepup is resolved, the client will call
  # addBankAfterStepup and provide the authContextId they received from
  # xobuyernodeserv in the addBank contingency. The authContextId will be used to
  # grab the original parameters from junonodisk so that the
  # client does not need to re-enter them. Once parameters are grabbed from
  # junonodisk, this operation finishes the addBank steps and adds a
  # new bank account and updates checkoutSession fundingOptions based on the newly added bank account.
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  addBankAfterStepup(
    authContextId: String!
    token: String!
  ): checkoutCheckoutSession

  # The optOutWebLLS mutation will unenroll the user from the autologin aka WebLLS feature
  # Mutation will read the assetValue from cookies unless passed directly
  optOutWebLLS(token: String!): checkoutCheckoutSession

  # The applyOfferToUser takes the name of an offer
  # and applies an offer to the user.
  # The offer names are whitelisted here:
  # src/graphql/data/Offers/activeOffers.js
  applyOfferToUser(
    token: String!
    type: checkoutOfferPrograms!
  ): checkoutCheckoutSession

  # The initiateOtpConfirmation mutation will initiate the one-time-password flow for a card account.
  initiateOtpConfirmation(
    fundingInstrumentId: String!
    phone: checkoutPhoneInput!
  ): checkoutInitiateOtpConfirmationResponse

  # The completeOtpConfirmation mutation will complete the one-time-password flow for a card account.
  completeOtpConfirmation(
    card: checkoutCompleteCardOtpConfirmationInput!
    fundingInstrumentId: String!
    phone: checkoutPhoneInput!
  ): checkoutCompleteOtpConfirmationResponse

  # Add address to User's Profile and Replan the current Checkout Session.
  addAddressToUser(
    token: String!
    line1: String
    line2: String
    city: String
    state: String
    postalCode: String
    countryCode: checkoutCountryCodes!
    addressLine1: String
    addressLine2: String
    addressLine3: String
    adminArea4: String
    adminArea3: String
    adminArea2: String
    adminArea1: String
    primary: Boolean
    normalize: Boolean = false
  ): checkoutCheckoutSession

  # Init phone confirmation
  initiateTwoFactorPhoneConfirmation(
    phoneNumber: String!
    phoneCountry: checkoutCountryCodes
    locale: checkoutLocaleInput
  ): checkoutPhoneConfirmationResponse

  # Confirm phone confirmation
  confirmTwoFactorPhoneConfirmation(
    pin: String!
    verificationId: String!
  ): checkoutPhoneConfirmationResponse

  # Marks strongCustomerAuthenticationRequired payment contingency as completed,
  # and removes the contingency from the Checkout Session.
  # Note that a different contingency may be returned after clearing the strongCustomerAuthenticationRequired contingency,
  # so clients should still query for paymentContingencies that are supported.
  completeStrongCustomerAuthentication(token: String!): checkoutCheckoutSession

  # Update a post-planning Checkout Session with a funding option ID that was
  # externally updated (eg. through an FI api or some other mutation that does not
  # affect CheckoutSession)
  updateCheckoutSessionFundingOptions(
    #
    token: String!

    # Funding Option ID from FI
    fundingOptionId: String!

    # Pass true if the funding option provided has completed the 3DS 2.0 already, so that the contingency does not get
    # triggered again
    threeDSResolved: Boolean = false
  ): checkoutCheckoutSession

  # To create/fetch the Venmo Guest Account information to proceed with Checkout
  venmoCredentialExchange(
    firstName: String!
    lastName: String!
    tspCommonId: String!
    email: String!
    phone: String!
    orderID: String!
  ): checkoutVenmoGuestUser

  # Approves the Apple Pay payment.
  approveApplePayPayment(
    token: checkoutApplePayPaymentToken!
    orderID: String!
    clientID: String!
    billingContact: checkoutApplePayPaymentContact!
    shippingContact: checkoutApplePayPaymentContact
  ): checkoutJSON

  # Approves the Google Pay payment.
  approveGooglePayPayment(
    paymentMethodData: checkoutGooglePayPaymentMethodData!
    orderID: String!
    clientID: String!
    shippingAddress: checkoutGooglePayPaymentContact
    email: String
  ): checkoutJSON

  # checkoutGuestWithMemberBenefits mutation will take parameters similar to
  # isMemberBenefitsEligible query and trys to checkout a guest user as a
  # member (by generating member security context on xobuyer)
  #
  # Requires a token param (EC, PAY, or BA token) as a String
  # Requires a firstName ("John") as a String
  # Requires a lastName ("Smith") as a String
  # Requires a email ("example@paypal.com") as a String
  # Requires a phoneNumber ("800-888-8888") as a String
  # Requires a country ("US") as a String
  #
  # Optionally pass a billingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a currencyConversionType
  # Optionally pass a shippingAddress as an AddressInput (country, postalCode, state)
  # Optionally pass a card as a CardInput (cardNumber, postalCode, cvv, expirationDate)
  # Optionally pass a bank as a BankAccountInput (type, iban, accountNumber, routingNumber)
  #
  # Returns checkoutsession
  #
  # Required auth states: ANONYMOUS
  checkoutGuestWithMemberBenefits(
    # The buyer's billing address. Required for AMEX card
    billingAddress: checkoutAddressInput

    # The buyer's bank information
    bank: checkoutBankAccountInput

    # The buyer's credit card
    card: checkoutCardInput

    # The buyer's country code.
    country: checkoutCountryCodes!

    # The selected currency conversion type that the user has selected - PAYPAL or VENDOR
    currencyConversionType: checkoutCheckoutCurrencyConversionType

    # The buyer's email address. Maximum length is 127 characters.
    email: String!

    # The buyer's first name.
    firstName: String!

    # The buyer's last name.
    lastName: String!

    # The phone number, in E.123 format (Ex: 123-123-1234). Maximum length is 50 characters.
    phone: checkoutPhoneInput!

    # The buyer's desired shipping address.
    shippingAddress: checkoutAddressInput

    # A token param (EC, PAY, or BA token) as a String
    token: String!
  ): checkoutCheckoutSession
}

# Response wrapper for addBillingAddress.
type checkoutAddBillingAddressResponse {
  # Whether or not a billing address has been added.
  success: Boolean
}

# An enumeration of Tax Id types.
# CPF, CNPJ
enum checkoutTaxIdType {
  # Tax Id for BR personal accounts
  CPF

  # Tax Id for BR business accounts
  CNPJ
}

# Allows selecting an installment option for use when paying
#
# Used in the `approveMemberPayment` mutation.
#
# Example input (with discount):
# ```
# "installmentOption: {
#   term: 1,
#   paymentValue: '237.50',
#   paymentCurrency: 'BRL',
#   discountValue: '12.50',
#   discountCurrency: 'BRL',
#   discountPercentage: '5.0',
#   totalCostValue: '237.50',
#   totalCostCurrency: 'BRL',
# };
# ```
#
# Example input (without discount):
# ```
# "installmentOption": {
#   term: 10,
#   paymentValue: '25.00',
#   paymentCurrency: 'BRL',
#   totalCostValue: '250.00',
#   totalCostCurrency: 'BRL',
# };
# ```
input checkoutInstallmentsInput {
  # Installment term (Ex: 5)
  term: Int!

  # Monthly payment for the selected installment term (Ex: '25.00')
  paymentValue: String!

  # Monthly payment currency code for selected installment (Ex: 'BRL')
  paymentCurrency: String!

  # Value of the merchant provided discount for the selected installment term (Ex: '12.50')
  discountValue: String

  # Currency code for the merchant provided discount (Ex: 'BRL')
  discountCurrency: String

  # Merchant provided discount percentage for the selected installment term (Ex: '5.0')
  discountPercentage: String

  # Total cost of the purchase (Ex: 250.00)
  totalCostValue: String!

  # Currency code for the total cost of the purchase (Ex: 'BRL')
  totalCostCurrency: String!
}

# Rewards input when paying with rewards.
#
# Used in the `approveMemberPayment` mutation.
#
# Example input:
# ```
# "rewards": {
#   "id": "GI-XXXXXXXXXXXXX",
#   "amount": "20",
#   "currency": "USD"
# }
# ```
input checkoutRewardsInput {
  # Rewards funding source ID
  id: String!

  # Rewards amount to use toward the transaction
  amount: String!

  # Rewards currency code
  currency: String!
}

# Encapsulates all properties related to the Legal Agreements accepted by the buyer.
input checkoutLegalAgreementsInput {
  # User Agreement accepted by the buyer
  userAgreement: checkoutLegalAgreementInput
}

# Encapsulates all properties related to a Legal Agreement accepted by the buyer.
# This definition is based on OAS API definition for create entities endpoint.
# OAS API Definition: https://ppaas/api/3719176155268672#apiReference (/v1/onboarding/create-entities).
input checkoutLegalAgreementInput {
  # Agreement major version accepted by the buyer.
  majorVersion: String!

  # Agreement minor version accepted by the buyer.
  minorVersion: String!
}

# Represents the data required for completing an Approve Payment for Split Tender
input checkoutSplitFundingOptionsInput {
  # Funding Instrument ID
  id: ID!

  # Funding Instrument Type
  fundingInstrumentType: checkoutFundingInstrumentType!

  # Amount to apply to Funding Instrument
  amount: checkoutAmountInput!

  # User Selected Instrument to be the Backup/Primary - must have one in the list
  isPrimaryInstrument: Boolean!
}

# Type of funding instrument
enum checkoutFundingInstrumentType {
  # Bank
  BANK

  # Credit card
  CARD

  # PayPal Balance
  BALANCE

  # PayPal Credit
  CREDIT

  # Incentive
  INCENTIVE

  # Standalone reward
  STANDALONE_REWARDS
}

# Represents the data required for completing 3DS verification
input checkoutThreeDSParamsInput {
  # The type of the response param
  key: String

  # Value of the response param
  value: String
}

# Date of Birth input type
input checkoutDateOfBirth {
  # Specific day of birth
  day: checkoutDobDay

  # Month of birth
  month: checkoutDobMonth

  # Year of birth
  year: checkoutDobYear
}

# Date of Birth
scalar checkoutDobDay

# Date of Birth Month
scalar checkoutDobMonth

# Date of Birth Year
scalar checkoutDobYear

# An enumeration of all occupations that a user can select
enum checkoutOccupation {
  # Accounting
  ACCOUNTING

  # Administration
  ADMINISTRATION

  # Arts, Culture
  ARTS_AND_CULTURE

  # Business
  BUSINESS

  # Communications
  COMMUNICATIONS

  # Customer Service
  CUSTOMER_SERVICE

  # Education
  EDUCATION

  # Energy, Utilities
  ENERGY_AND_UTILITIES

  # Engineering
  ENGINEERING

  # Finance
  FINANCE

  # Financial Services
  FINANCIAL_SERVICES

  # Government
  GOVERNMENT

  # Health
  HEALTH

  # Hospitality
  HOSPITALITY

  # Human Resources
  HUMAN_RESOURCES

  # Internet
  INTERNET

  # Legal
  LEGAL

  # Manufacturing
  MANUFACTURING

  # Marketing
  MARKETING

  # Non-profit
  NON_PROFIT

  # Recreation
  RECREATION

  # Religion
  RELIGION

  # Research
  RESEARCH

  # Sales
  SALES

  # Sports, Fitness
  SPORTS_AND_FITNESS

  # Student
  STUDENT

  # Technology
  TECHNOLOGY

  # Trade
  TRADE

  # Transportation
  TRANSPORTATION

  # Travel
  TRAVEL

  # Items below are a new set for occupancy list, currently in A/B test
  # Experiment: FEATURE_SIGNUP_OCCUPATION_LIST
  #
  # Business Management - Accountant
  BUS_MGMT_ACCOUNTANT

  # Business Management - Accounts Payables/Receivables
  BUS_MGMT_ACCTS_PAY_RECV

  # Business Management - Analyst
  BUS_MGMT_ANALYST

  # Business Management - Benefits Administrator
  BUS_MGMT_BENEFITS_ADMIN

  # Business Management - Board Member
  BUS_MGMT_BOARD_MEMBER

  # Business Management - Chief Executive Officer
  BUS_MGMT_CEO

  # Business Management - Chief Financial Officer
  BUS_MGMT_CFO

  # Business Management - Chief Marketing Officer
  BUS_MGMT_CMO

  # Business Management - Consultant
  BUS_MGMT_CONSULTANT

  # Business Management - Chief Operating Officer
  BUS_MGMT_COO

  # Business Management - Corporate Auditor
  BUS_MGMT_CORP_AUDITOR

  # Business Management - Chief Risk Officer
  BUS_MGMT_CRO

  # Business Management - Executive
  BUS_MGMT_EXECUTIVE

  # Business Management - HR Administrator
  BUS_MGMT_HR_ADMIN

  # Business Management - Inside Sales
  BUS_MGMT_INSIDE_SALES

  # Business Management - Mergers & Acquisitions
  BUS_MGMT_MA

  # Business Management - Others
  BUS_MGMT_OTHERS

  # Business Management - Outside Sales
  BUS_MGMT_OUTSIDE_SALES

  # Business Management - Payroll Administrator
  BUS_MGMT_PAYROLL_ADMIN

  # Business Management - President
  BUS_MGMT_PRESIDENT

  # Business Management - Project Manager
  BUS_MGMT_PROJECT_MGR

  # Business Management - Records Manager
  BUS_MGMT_RECORDS_MGR

  # Business Management - Recruiter
  BUS_MGMT_RECRUITER

  # Business Management - Secretary
  BUS_MGMT_SECRETARY

  # Business Management - Strategy
  BUS_MGMT_STRATEGY

  # Business Management - Telemarketing
  BUS_MGMT_TELEMARKETING

  # Business Management - Training
  BUS_MGMT_TRAINING

  # Business Management - Treasurer
  BUS_MGMT_TREASURER

  # Construction - Apprentice
  CONSTRUCTION_APPRENTICE

  # Construction - Carpenter
  CONSTRUCTION_CARPENTER

  # Construction - Drywall
  CONSTRUCTION_DRYWALL

  # Construction - Electrician
  CONSTRUCTION_ELECTRICIAN

  # Construction - Floor Installer
  CONSTRUCTION_FLOOR_INSTALLER

  # Construction - Framer
  CONSTRUCTION_FRAMER

  # Construction - Heating/HVAC
  CONSTRUCTION_HEATING_HVAC

  # Construction - Ironworker
  CONSTRUCTION_IRONWORKER

  # Construction - Landscaper
  CONSTRUCTION_LANDSCAPER

  # Construction - Mason
  CONSTRUCTION_MASON

  # Construction - Metal Fabrication
  CONSTRUCTION_METAL_FABRICATION

  # Construction - Others
  CONSTRUCTION_OTHERS

  # Construction - Painter
  CONSTRUCTION_PAINTER

  # Construction - Plumber
  CONSTRUCTION_PLUMBER

  # Construction - Roofer
  CONSTRUCTION_ROOFER

  # Construction - Supervisor
  CONSTRUCTION_SUPERVISOR

  # Construction - Surveyor
  CONSTRUCTION_SURVEYOR

  # Construction - Tile Installer
  CONSTRUCTION_TILE_INSTALLER

  # Creative - Advertising Executive
  CREATIVE_ADVERTISING_EXEC

  # Creative - Advertising Sales
  CREATIVE_ADVERTISING_SALES

  # Creative - Artist
  CREATIVE_ARTIST

  # Creative - Author
  CREATIVE_AUTHOR

  # Creative - Blogger
  CREATIVE_BLOGGER

  # Creative - Computer Animator
  CREATIVE_COMPUTER_ANIMATOR

  # Creative - Content Creator
  CREATIVE_CONTENT_CREATOR

  # Creative - Fashion Designer
  CREATIVE_FASHION_DESIGNER

  # Creative - Industrial Design
  CREATIVE_INDUSTRIAL_DESIGN

  # Creative - Interior Designer
  CREATIVE_INTERIOR_DESIGNER

  # Creative - Musician
  CREATIVE_MUSICIAN

  # Creative - Others
  CREATIVE_OTHERS

  # Creative - Photographer
  CREATIVE_PHOTOGRAPHER

  # Creative - Publisher
  CREATIVE_PUBLISHER

  # Creative - Sculptor
  CREATIVE_SCULPTOR

  # Creative - Sound Technician
  CREATIVE_SOUND_TECHNICIAN

  # Creative - Web Designer
  CREATIVE_WEB_DESIGNER

  # Education - Administrator
  EDUCATION_ADMINISTRATOR

  # Education - Adult Educator
  EDUCATION_ADULT_EDUCATOR

  # Education - Early Child Development
  EDUCATION_EARLY_CHILD_DEVT

  # Education - Librarian
  EDUCATION_LIBRARIAN

  # Education - Others
  EDUCATION_OTHERS

  # Education - Principal/Director
  EDUCATION_PRINCIPAL_VP

  # Education - Professor
  EDUCATION_PROFESSOR

  # Education - Software Trainer
  EDUCATION_SOFTWARE_TRAINER

  # Education - Special Education
  EDUCATION_SPECIAL_EDUCATION

  # Education - Teacher-College/University
  EDUCATION_TEACHER_COLL_UNIV

  # Education - Teacher-Elementary
  EDUCATION_TEACHER_ELEMENTARY

  # Education - Teacher-Pre School
  EDUCATION_TEACHER_PRE_SCHOOL

  # Education - Teacher-Secondary
  EDUCATION_TEACHER_SECONDARY

  # Education - Teaching Assistant
  EDUCATION_TEACHING_ASSISTANT

  # Engineer - Aeronautic
  ENGINEER_AERONAUTIC

  # Engineer - Architect
  ENGINEER_ARCHITECT

  # Engineer - Bio-Engineering
  ENGINEER_BIO_ENGINEERING

  # Engineer - Chemical
  ENGINEER_CHEMICAL

  # Engineer - Civil
  ENGINEER_CIVIL

  # Engineer - Drafting/CAD
  ENGINEER_DRAFTING_CAD

  # Engineer - Electrical
  ENGINEER_ELECTRICAL

  # Engineer - Energy
  ENGINEER_ENERGY

  # Engineer - Environmental/Geology
  ENGINEER_ENVIRO_GEO

  # Engineer - Industrial
  ENGINEER_INDUSTRIAL

  # Engineer - Marine
  ENGINEER_MARINE

  # Engineer - Mechanical
  ENGINEER_MECHANICAL

  # Engineer - Others
  ENGINEER_OTHERS

  # Engineer - Process
  ENGINEER_PROCESS

  # Engineer - Town/City Planning
  ENGINEER_TOWN_CITY_PLANNING

  # Engineer - Urban Planner
  ENGINEER_URBAN_PLANNER

  # Financial - Accountant
  FINANCIAL_ACCOUNTANT

  # Financial - Actuarial Analysis
  FINANCIAL_ACTUARIAL_ANALYSIS

  # Financial - Administrator/Executive Support
  FINANCIAL_ADMIN_EXEC_SUPPORT

  # Financial - Advisor
  FINANCIAL_ADVISOR

  # Financial - Analysis/Research
  FINANCIAL_ANALYSIS_RESEARCH

  # Financial - Bank Manager
  FINANCIAL_BANK_MANAGER

  # Financial - Bank Teller
  FINANCIAL_BANK_TELLER

  # Financial - Bookkeeper
  FINANCIAL_BOOKKEEPER

  # Financial - Consultant
  FINANCIAL_CONSULTANT

  # Financial - Credit Analyst
  FINANCIAL_CREDIT_ANALYST

  # Financial - Credit Manager
  FINANCIAL_CREDIT_MANAGER

  # Financial - Cust Service Representative
  FINANCIAL_CUST_SERVICE_REP

  # Financial - Data Entry
  FINANCIAL_DATA_ENTRY

  # Financial - Debt Collections
  FINANCIAL_DEBT_COLLECTIONS

  # Financial - Economist
  FINANCIAL_ECONOMIST

  # Financial - Fund Accounting
  FINANCIAL_FUND_ACCOUNTING

  # Financial - Insurance Broker
  FINANCIAL_INSURANCE_BROKER

  # Financial - Insurance Claims
  FINANCIAL_INSURANCE_CLAIMS

  # Financial - Investment Analyst
  FINANCIAL_INVESTMENT_ANALYST

  # Financial - Investment Broker
  FINANCIAL_INVESTMENT_BROKER

  # Financial - Loan Officer
  FINANCIAL_LOAN_OFFICER

  # Financial - Manager
  FINANCIAL_MANAGER

  # Financial - Others
  FINANCIAL_OTHERS

  # Health - Anesthesiologist
  HEALTH_ANESTHESIOLOGIST

  # Health - Dental Hygienist
  HEALTH_DENTAL_HYGIENIST

  # Health - Dentist
  HEALTH_DENTIST

  # Health - Dietary Specialist
  HEALTH_DIETARY_SPECIALIST

  # Health - Doctor - General
  HEALTH_DOCTOR_GENERAL

  # Health - Doctor - Specialist
  HEALTH_DOCTOR_SPECIALIST

  # Health - EMT/Paramedic
  HEALTH_EMT_PARAMEDIC

  # Health - Healthcare Aid
  HEALTH_HEALTHCARE_AID

  # Health - Hospital Management
  HEALTH_HOSPITAL_MGMT

  # Health - Imaging Technician
  HEALTH_IMAGING_TECHNICIAN

  # Health - Lab Tech/Pathology
  HEALTH_LAB_TECH_PATHOLOGY

  # Health - Medical Practitioner
  HEALTH_MEDICAL_PRACTITIONER

  # Health - Nurse
  HEALTH_NURSE

  # Health - Occupational Therapy
  HEALTH_OCCUPATIONAL_THERAPY

  # Health - Office Manager
  HEALTH_OFFICE_MANAGER

  # Health - Optical Specialist
  HEALTH_OPTICAL_SPECIALIST

  # Health - Others
  HEALTH_OTHERS

  # Health - Pharmacist
  HEALTH_PHARMACIST

  # Health - Physiotherapist
  HEALTH_PHYSIOTHERAPIST

  # Health - Psychiatrist
  HEALTH_PSYCHIATRIST

  # Health - Psychologist
  HEALTH_PSYCHOLOGIST

  # Health - Public Health Administrator
  HEALTH_PUBLIC_HEALTH_ADMIN

  # Health - Radiologist
  HEALTH_RADIOLOGIST

  # Health - Social Services
  HEALTH_SOCIAL_SERVICES

  # Health - Sports Medicine Specialist
  HEALTH_SPORTS_MED_SPECIALIST

  # Health - Surgeon
  HEALTH_SURGEON

  # Health - Veterinary
  HEALTH_VETERINARY

  # Hospitality - Bartender
  HOSPITALITY_BARTENDER

  # Hospitality - Chef/Cook
  HOSPITALITY_CHEF_COOK

  # Hospitality - Concierge
  HOSPITALITY_CONCIERGE

  # Hospitality - Dishwasher
  HOSPITALITY_DISHWASHER

  # Hospitality - Event Planner
  HOSPITALITY_EVENT_PLANNER

  # Hospitality - Food Services
  HOSPITALITY_FOOD_SERVICES

  # Hospitality - Guest Services
  HOSPITALITY_GUEST_SERVICES

  # Hospitality - Host/Hostess
  HOSPITALITY_HOST_HOSTESS

  # Hospitality - Hotel Management
  HOSPITALITY_HOTEL_MANAGEMENT

  # Hospitality - Janitor
  HOSPITALITY_JANITOR

  # Hospitality - Laundry
  HOSPITALITY_LAUNDRY

  # Hospitality - Others
  HOSPITALITY_OTHERS

  # Hospitality - Pilot
  HOSPITALITY_PILOT

  # Hospitality - Reception
  HOSPITALITY_RECEPTION

  # Hospitality - Restaurant Management
  HOSPITALITY_RESTAURANT_MGMT

  # Hospitality - Room Service
  HOSPITALITY_ROOM_SERVICE

  # Hospitality - Ship Captain
  HOSPITALITY_SHIP_CAPTAIN

  # Hospitality - Tour Guide
  HOSPITALITY_TOUR_GUIDE

  # Hospitality - Tour Operator
  HOSPITALITY_TOUR_OPERATOR

  # Hospitality - Travel Agent
  HOSPITALITY_TRAVEL_AGENT

  # Hospitality - Waiter/Server
  HOSPITALITY_WAITER_SERVER

  # Hospitality - Wine Steward
  HOSPITALITY_WINE_STEWARD

  # Install/Repair - Electrician
  INSTALL_REPAIR_ELECTRICIAN

  # Install/Repair - Equipment
  INSTALL_REPAIR_EQUIPMENT

  # Install/Repair - Facility Manager
  INSTALL_REPAIR_FACILITY_MGR

  # Install/Repair - Locksmith
  INSTALL_REPAIR_LOCKSMITH

  # Install/Repair - Others
  INSTALL_REPAIR_OTHERS

  # Install/Repair - Plumber
  INSTALL_REPAIR_PLUMBER

  # Install/Repair - Small Engine
  INSTALL_REPAIR_SMALL_ENGINE

  # Legal - Bailiff
  LEGAL_BAILIFF

  # Legal - Bylaw Enforcement
  LEGAL_BYLAW_ENFORCEMENT

  # Legal - Court Administrator
  LEGAL_COURT_ADMINISTRATOR

  # Legal - Court Reporter
  LEGAL_COURT_REPORTER

  # Legal - Customs Officer
  LEGAL_CUSTOMS_OFFICER

  # Legal - Judge
  LEGAL_JUDGE

  # Legal - Lawyer - Criminal
  LEGAL_LAWYER_CRIMINAL

  # Legal - Lawyer - Family
  LEGAL_LAWYER_FAMILY

  # Legal - Lawyer - Labour
  LEGAL_LAWYER_LABOUR

  # Legal - Lawyer - Patent/IP
  LEGAL_LAWYER_PATENT_IP

  # Legal - Lawyer - Real Estate
  LEGAL_LAWYER_REAL_ESTATE

  # Legal - Lawyer - Tax
  LEGAL_LAWYER_TAX

  # Legal - Lawyer
  LEGAL_LAWYER

  # Legal - Others
  LEGAL_OTHERS

  # Legal - Paralegal/Law Clerk
  LEGAL_PARALEGAL_LAW_CLERK

  # Legal - Police Officer
  LEGAL_POLICE_OFFICER

  # Legal - Prison Guard
  LEGAL_PRISON_GUARD

  # Legal - Regulation Compliance
  LEGAL_REG_COMPLIANCE

  # Legal - Secretary
  LEGAL_SECRETARY

  # Logistics - Bike Courier
  LOGISTICS_BIKE_COURIER

  # Logistics - Cargo Handler
  LOGISTICS_CARGO_HANDLER

  # Logistics - Courier
  LOGISTICS_COURIER

  # Logistics - Customs Broker
  LOGISTICS_CUSTOMS_BROKER

  # Logistics - Dispatcher
  LOGISTICS_DISPATCHER

  # Logistics - Driver
  LOGISTICS_DRIVER

  # Logistics - Hazardous Materials Handler
  LOGISTICS_HAZ_MAT_HANDLER

  # Logistics - Import/Export
  LOGISTICS_IMPORT_EXPORT

  # Logistics - Inventory Management
  LOGISTICS_INVENTORY_MGMT

  # Logistics - Machine Operator
  LOGISTICS_MACHINE_OPERATOR

  # Logistics - Mail Carrier
  LOGISTICS_MAIL_CARRIER

  # Logistics - Mail Room
  LOGISTICS_MAIL_ROOM

  # Logistics - Others
  LOGISTICS_OTHERS

  # Logistics - Rail Operator
  LOGISTICS_RAIL_OPERATOR

  # Logistics - Ship Captain
  LOGISTICS_SHIP_CAPTAIN

  # Logistics - Shipper/Receiver
  LOGISTICS_SHIPPER_RECEIVER

  # Logistics - Vendor Management
  LOGISTICS_VENDOR_MGMT

  # Natural Resources - Arborist
  NAT_RESOURCES_ARBORIST

  # Natural Resources - Biologic Research
  NAT_RESOURCES_BIO_RESEARCH

  # Natural Resources - Chemist
  NAT_RESOURCES_CHEMIST

  # Natural Resources - Consultant
  NAT_RESOURCES_CONSULTANT

  # Natural Resources - Engineer
  NAT_RESOURCES_ENGINEER

  # Natural Resources - Environmental Analyst
  NAT_RESOURCES_ENVIRO_ANALYST

  # Natural Resources - Environmental Science
  NAT_RESOURCES_ENVIRO_SCIENCE

  # Natural Resources - Farmer
  NAT_RESOURCES_FARMER

  # Natural Resources - Fisherman
  NAT_RESOURCES_FISHERMAN

  # Natural Resources - Land Surveyor
  NAT_RESOURCES_LAND_SURVEYOR

  # Natural Resources - Logger
  NAT_RESOURCES_LOGGER

  # Natural Resources - Metallurgist
  NAT_RESOURCES_METALLURGIST

  # Natural Resources - Miner
  NAT_RESOURCES_MINER

  # Natural Resources - Oil Worker
  NAT_RESOURCES_OIL_WORKER

  # Natural Resources - Others
  NAT_RESOURCES_OTHERS

  # Natural Resources - Project Manager
  NAT_RESOURCES_PROJECT_MGR

  # Others
  OTHERS

  # Public Service - City Counselor
  PUBLIC_SVC_CITY_COUNSELOR

  # Public Service - Federal Member of Parliament
  PUBLIC_SVC_FEDERAL_MP

  # Public Service - Firefighter
  PUBLIC_SVC_FIREFIGHTER

  # Public Service - Imam
  PUBLIC_SVC_IMAM

  # Public Service - Municipal Clerk
  PUBLIC_SVC_MUNICIPAL_CLERK

  # Public Service - Nun
  PUBLIC_SVC_NUN

  # Public Service - Others
  PUBLIC_SVC_OTHERS

  # Public Service - Police Officer
  PUBLIC_SVC_POLICE_OFFICER

  # Public Service - Politician
  PUBLIC_SVC_POLITICIAN

  # Public Service - Priest
  PUBLIC_SVC_PRIEST

  # Public Service - Provincial MPP
  PUBLIC_SVC_PROVINCIAL_MPP

  # Public Service - Rabbi
  PUBLIC_SVC_RABBI

  # Public Service - Spiritual Leader
  PUBLIC_SVC_SPIRITUAL_LEADER

  # Public Service - Waste Removal
  PUBLIC_SVC_WASTE_REMOVAL

  # Retail - Buyer
  RETAIL_BUYER

  # Retail - Cashier
  RETAIL_CASHIER

  # Retail - Executive
  RETAIL_EXECUTIVE

  # Retail - Franchisee
  RETAIL_FRANCHISEE

  # Retail - Franchisor
  RETAIL_FRANCHISOR

  # Retail - Marketing
  RETAIL_MARKETING

  # Retail - Merchandiser
  RETAIL_MERCHANDISER

  # Retail - Night Crew
  RETAIL_NIGHT_CREW

  # Retail - Others
  RETAIL_OTHERS

  # Retail - Pharmacist
  RETAIL_PHARMACIST

  # Retail - Stock Room
  RETAIL_STOCK_ROOM

  # Retail - Store Manager
  RETAIL_STORE_MANAGER

  # Retail - Travel Agent
  RETAIL_TRAVEL_AGENT

  # Retired
  RETIRED

  # Technology - Chief Information Officer
  TECH_CIO

  # Technology - Code Developer
  TECH_CODE_DEVELOPER

  # Technology - Database Administrator
  TECH_DATABASE_ADMIN

  # Technology - Information Security
  TECH_INFORMATION_SECURITY

  # Technology - Infrastructure Administrator
  TECH_INFRASTRUCTURE_ADMIN

  # Technology - Network Architect
  TECH_NETWORK_ARCHITECT

  # Technology - Others
  TECH_OTHERS

  # Technology - Project Manager
  TECH_PROJECT_MANAGER

  # Technology - Quality Analyst
  TECH_QUALITY_ANALYST

  # Technology - Support Analyst
  TECH_SUPPORT_ANALYST

  # Technology - Systems Analyst
  TECH_SYSTEMS_ANALYST

  # Technology - Systems Architect
  TECH_SYSTEMS_ARCHITECT

  # Technology - Technical Writer
  TECH_TECHNICAL_WRITER

  # Technology - Telecom Administrator
  TECH_TELECOM_ADMIN

  # Technology - Website Developer
  TECH_WEBSITE_DEVELOPER

  # Unemployed
  UNEMPLOYED
}

# IdentityDocumentInput type represents an identification doc to be added to an account
input checkoutIdentityDocumentInput {
  # The type of id
  type: checkoutIdentityDocumentType!

  # The value of the identity document. Ex(S1234567)
  value: String!
}

# An enumeration of types that a Identification Type can be.
# DRIVERS_LICENSE,NATIONAL_ID, etc.al
enum checkoutIdentityDocumentType {
  # A CPF type of Identity Document (used in Brazil)
  CPF

  # A drivers license type of Identity Document
  DRIVERS_LICENSE

  # A medical insurance id type of Identity Document (used as secondary ID in Russia)
  MEDICAL_INSURANCE_ID

  # A national id type of Identity Document
  NATIONAL_ID

  # A passport number type of Identity Document
  PASSPORT_NUMBER

  # A pension fund id type of Identity Document (used as secondary ID in Russia)
  PENSION_FUND_ID

  # A tax identification number type of Identity Document (used as secondary ID in Russia)
  TAX_IDENTIFICATION_NUMBER

  # A temporary national id type of Identity Document
  TEMPORARY_NATIONAL_ID
}

# An enumeration of the gender of a user. This is based off of the ISO/IEC5218 standard.
enum checkoutGender {
  # Not known
  NOT_KNOWN

  # Male
  MALE

  # Female
  FEMALE

  # Not applicable
  NOT_APPLICABLE
}

# Encapsulates all properties related to the Common Reporting Standards mandate.
# This new mandate requires PayPal to gather tax information from the user so PayPal can
# report that to the goverment.
input checkoutCommonReportingStandardsInput {
  # Whether or not the user pays taxes in a different country
  subjectToTaxOutsideLegalCountry: Boolean!

  # Encapsulates all additional information the user needs to present when paying taxes in another country
  taxDetails: [checkoutTaxDetailsInput]

  # Buyer's first name (Ex: 'John')
  firstName: String!

  # Buyer's last name (Ex: 'Smith')
  lastName: String!
}

# Encapsulates all additional information the user needs to present when paying taxes in another country
input checkoutTaxDetailsInput {
  # A two character country code -- Ex: AU
  countryCode: checkoutCountryCodes!

  # The value that is associated with the taxpayer ID -- Ex: SSN: 999-323-1234
  taxPayerIdValue: String

  # Reasons to why an user does not have a Taxpayer ID
  noTaxPayerIdReason: String
}

# Shipping methods to display to the buyer
input checkoutShippingMethodInput {
  # Unique ID which represents this option
  id: String!

  # Type of shipping method (Ex: 'SHIPPING')
  type: checkoutShippingMethodType!

  # Custom label to display to the buyer for this method
  label: String!

  # Amount value for this method
  amount: checkoutAmountInput!

  # Whether or not this is the selected method
  selected: Boolean!
}

# Shipping methods to display to the buyer
input checkoutCallbackShippingMethodInput {
  # Custom label to display to the buyer for this method
  label: String

  # Shipping Amount value for this method
  shippingAmount: checkoutAmountInput!

  # Whether or not this is the selected method
  selected: Boolean!

  # Default shipping method returned from cart/profile/callback url
  default: Boolean!

  # Insurance Amount value for this method
  insuranceAmount: checkoutAmountInput

  # Tax Amount value for this method
  taxAmount: checkoutAmountInput
}

# Shipping methods to display to the buyer
input checkoutProfileShippingMethodInput {
  # Custom label to display to the buyer for this method
  label: String

  # Shipping Amount value for this method
  shippingAmount: checkoutAmountInput!

  # Whether or not this is the selected method
  selected: Boolean!

  # Default shipping method returned from cart/profile/callback url
  default: Boolean!

  # Tax Amount value for this method
  taxAmount: checkoutAmountInput

  # Shipping method that is mapped over to get the value passed to payload
  shippingMethodType: String
}

# Represents the desired data for confirming a credit card's cvv
input checkoutConfirmCreditCardCvvInput {
  # An ecrypted credit card is as a String (Ex: 'CCA2NP3NVAPABBQ')
  encryptedId: String!

  # The last four digits of the user's credit card number as a String (Ex: '7062')
  lastFourDigits: String!

  # The credit card's cvv number as a String (Ex: '123')
  cvv: String!

  # The card issuer as a CardIssuerType(Ex: 'VISA')
  type: checkoutCardIssuerType!
}

# Card input type for adding a new card
#
# See: https://github.paypal.com/Checkout/xo-hermes-fi/blob/master/apis/addCard/inputSchema.js#L42
input checkoutAddCardInput {
  # The card issuer as a CardIssuerType (Ex: 'VISA', 'AMEX', 'MASTER', 'DISCOVER')
  type: checkoutCardIssuerType!

  # 13 to 19 digits number of a card. (Ex: '4111111111111111')
  number: String!

  # 3 or 4 digits security code of the given card (Ex: '123' or '3456') depends on the type of credit card
  securityCode: String

  # 2 digits code for expiration month for the given card (Ex: '01', '12', '10')
  expiryMonth: String

  # 4 digits code for the expiration year for the given card. (Ex, '2020')
  expiryYear: String

  # Starting month for the given card. (Ex: '01', '02', '12')
  startMonth: String

  # Starting year for the given card. (Ex: '2018')
  startYear: String

  # Some Debit Cards and Credit Cards have an Issue Number, which is normally `01`
  # unless the card has been replaced at any time.
  #
  # **Maestro cards**, for example, have an issue number.
  issueNumber: String
}

# User input type for adding a new card
#
# See: https://github.paypal.com/Checkout/xo-hermes-fi/blob/master/apis/addCard/inputSchema.js#L16
input checkoutAddCardUserInput {
  # User's first name (Ex: 'John')
  firstName: String!

  # User's last name (Ex: 'Greathouse')
  lastName: String!

  # 2 digits code for the actual date for user's birthday (Ex: '21', '05')
  dobDay: String

  # 2 digits code for the actual mnonth for user's birthday (Ex: '01', '10')
  dobMonth: String

  # 4 digits code for the actual year for user's birthady (Ex: '1988', '1963)
  dobYear: String
}

# Billing address input type for adding a new card
#
# See: https://github.paypal.com/Checkout/xo-hermes-fi/blob/master/apis/addCard/inputSchema.js#L81
input checkoutAddCardBillingAddressInput {
  # Existing billing address Id (Ex: '7100887737437037359')
  id: String

  # @Deprecated: Coarse format addresses are being phased out for portable format
  # addresses. Use addressLine1 instead for portable format.
  line1: String

  # @Deprecated: Coarse format addresses are being phased out for portable format
  # addresses. Use addressLine2 instead for portable format.
  line2: String

  # @Deprecated: Coarse format addresses are being phased out for portable format
  # addresses. Use adminArea2 instead for portable format.
  city: String

  # @Deprecated: Coarse format addresses are being phased out for portable format
  # addresses. Use adminArea1 instead for portable format.
  state: String

  # A billing address two-letter country code (Ex: 'US')
  country: String

  # @Deprecated: Coarse format addresses are being phased out for portable format
  # addresses. Use adminArea1 instead for portable format.
  postalCode: String

  # Portable address: An address first line street address
  addressLine1: String

  # Portable address: An address second line street address
  addressLine2: String

  # Portable address: An address third line street address
  addressLine3: String

  # Portable address: An address first line admin area
  adminArea1: String

  # Portable address: An address second line admin area
  adminArea2: String

  # Portable address: An address third line admin area
  adminArea3: String

  # Portable address: An address forth line admin area
  adminArea4: String

  # Portable address: An address two-letter country code
  countryCode: String
}

# PotentialCard input type represents a card to be added to an account
input checkoutPotentialCardInput {
  # potential card uuid  (Ex: 'uuid1234'). Unique identifier of the potential card.
  id: String!

  # 3 or 4 digits security code of the given card (Ex: '123' or '3456') depends on the type of credit card
  cardVerificationCode: String!
}

# Types of client config product code
# https://github.paypal.com/ApiSpecifications-R/CommonComponentsSpecification/blob/master/v4/schema/json/openapi-2.0/client_configuration.json#L9
enum checkoutProductCodeType {
  # The payment acceptance solution is a billing agreement.
  BILLING_AGREEMENTS

  # Billing plan and subcription solution
  BILLING_SUBSCRIPTIONS

  # The payment acceptance solution is credit card.
  DIRECT_CREDIT_CARD

  # The payment acceptance solution is express checkout.
  EXPRESS_CHECKOUT

  # The payment acceptance solution is website payment standard.
  WEBSITE_PAYMENTS_STANDARD
}

# Types of client config integration artifact
enum checkoutIntegrationArtifactType {
  # Use this when Merchant has integrated with an old version of BRAINTREE_VZERO that does not ingest JS_V3 or V4.
  BRAINTREE_VZERO

  # Checkout.js v3
  JS_V3

  # Checkout.js v4
  JS_V4

  # Use this when Merchant has integrated using Future Payments Mobile Integration.
  NATIVE_SDK

  # Integration type is not defined
  NONE

  # PayPal Javascript SDK
  PAYPAL_JS_SDK
}

# Types of client config user experience
enum checkoutUserExperienceFlowType {
  # The consumer's browser does a 302 redirect to <a
  # href="https://www.paypal.com/us/home">paypal.com</a> from the third-party site.
  FULL_PAGE_REDIRECT

  # The flow is initated via Honey modal
  HONEY_MODAL

  # Incontext window
  INCONTEXT

  # Inline iframe
  INLINE

  # Native SDK
  NATIVE

  # The flow is initiated via Paypal Consumer app
  PAYPAL_CONSUMER_APP

  # Implicit login on web channel
  WEB_LLS
}

# Types of client config product flow
# https://github.paypal.com/ApiSpecifications-R/CommonComponentsSpecification/blob/master/v4/schema/json/openapi-2.0/product_experience.json#L305
enum checkoutProductFlowType {
  # Accelerated Checkout Flow
  ACCELERATED_CHECKOUT

  # A buyer signing up for a billing agreement.
  BUYER_APPROVAL_BILLING_AGREEMENT_CREATE

  # A buyer signing up for a Subscription.
  BUYER_APPROVAL_SUBSCRIPTIONS_CREATE

  # A purchase flow which buyer also approves creation of a billing agreement.
  BUYER_APPROVAL_BILLING_AGREEMENT_WITH_PURCHASE

  # An applicant applies for a credit product from a checkout session.
  CREDIT_APPLIED_AT_CHECKOUT

  # Identifies transactions to a crowdfunded money pool.
  CROWDFUNDING_CAMPAIGNS

  # Flow identifier for donation collected as crowd funding for a charity.
  CROWDFUNDING_CAMPAIGNS_CHARITIES

  # Flow identifier to say donation flow from button code we share with merchant.
  DONATE_BUTTON

  # Flow identifier to say donation flow in regualar internal from button code shared with merchant.
  DONATE_BUTTON_RECURRING

  # Flow identifier to say crowd funding donation flow from button code we share with merchant.
  DONATE_BUTTON_CAMPAIGN

  # Flow identifier to say donation collected through PayPal Giving Fund.
  FUNDRAISER_DIRECT

  # Flow identifier to say donation collected through PayPal Giving Fund for a partner.
  FUNDRAISER_PARTNER

  # A purchase flow where buyer is redirected from Hosted Sole Solution checkout application
  HOSTED_SOLE_SOLUTION

  # A web application handles the user's checkout interaction.
  HERMES

  # The application handles the PayPal Plus flow.
  PAYPAL_PLUS

  # Smart Payment Buttons
  SMART_PAYMENT_BUTTONS
}

# Types of buyer intent
enum checkoutBuyerIntentType {
  # pay
  PAY

  # pay_with_different_account
  PAY_WITH_DIFFERENT_ACCOUNT

  # pay_with_different_funding_shipping
  PAY_WITH_DIFFERENT_FUNDING_SHIPPING
}

# The channel (type of browser/device) that the user is coming from
# https://github.paypal.com/ApiSpecifications-R/CommonComponentsSpecification/blob/master/v4/schema/json/openapi-2.0/product_experience.json#L232
enum checkoutProductChannel {
  # A native app on a mobile device.
  MOBILE_APP

  # A browser on a mobile device.
  MOBILE_WEB

  # A browser on a PC.
  WEB
}

# Types of product feature
# https://github.paypal.com/ApiSpecifications-R/CommonComponentsSpecification/blob/master/v4/schema/json/openapi-2.0/client_configuration.json#L163
enum checkoutProductFeatureType {
  # The payment product features a payment for donations.
  DONATION
}

# CCO Input
input checkoutClientConfigInput {
  # Type of client config product code
  productCode: checkoutProductCodeType

  # Type of client config button funding source
  fundingSource: checkoutButtonFundingSourceType

  # Merchant integration (Ex: sdk, v3, v4..)
  integrationArtifact: checkoutIntegrationArtifactType

  # How the flow was initiated (Ex: Honey, redirect, inline iframe..)
  userExperienceFlow: checkoutUserExperienceFlowType

  # Flow type (Ex: buyer BA, suscription, hermes, SPB, Donation
  productFlow: checkoutProductFlowType

  # Buyer pay intent type
  buyerIntent: checkoutBuyerIntentType

  # Channel (Ex: Web, app) If not provided, will attempt to be detected based on request info.
  channel: checkoutProductChannel

  # ButtonSessionID
  buttonSessionID: String

  # The payment product features a payment for donations
  productFeature: checkoutProductFeatureType
}

# Payment Source object to store in vault. Currently only supporting Card but will also accept paypal, venmo, and apple pay
input checkoutPaymentSource {
  # card
  card: checkoutCard
}

# Card
input checkoutCard {
  # number
  number: String!

  # expiry
  expiry: String!

  # name
  name: String

  # cvv
  securityCode: String

  # billing address
  billingAddress: checkoutBillingAddress
}

# BillingAddress
input checkoutBillingAddress {
  # postal code
  postalCode: String
}

# response object from the v3/vault/setup-token endpoint. This particular object is a token definition
type checkoutVaultSetupTokenResponse {
  # id of the setup token
  id: String

  # customer
  customer: checkoutCustomer

  # status of token
  status: checkoutStatus

  # links
  links: [checkoutLink]
}

# customer object, currently consists of only a customer id
type checkoutCustomer {
  # id
  id: String
}

# status of token
enum checkoutStatus {
  # A setup token is initialized with minimal information, more data must be added to the setup-token to be vaulted
  CREATED

  # buyer contingency
  PAYER_ACTION_REQUIRED

  # Setup token is ready to be vaulted. If a buyer approval contigency was returned, it is has been approved
  APPROVED

  # The payment token has been vaulted
  VAULTED

  # A vaulted payment method token has been tokenized for short term (one time) use
  TOKENIZED
}

# object that includes links to perform additional actions on a token
type checkoutLink {
  # href
  href: String

  # rel
  rel: String

  # method
  method: String

  # encType
  encType: String
}

# Credit Incentive Details
input checkoutCreditIncentiveDetailsInput {
  # Incentive offer ID
  offerProgramId: String

  # Incentive offer value
  offerValue: String

  # Incentive offer currency code
  offerCurrencyCode: String

  # Incentive offer program code
  offerProgramCode: String

  # Touchpoint of incentive offer
  touchpoint: String

  # Headline text
  headlineText: String

  # Offer text 1
  offerText1: String

  # Offer text 2
  offerText2: String

  # Terms link
  termsLink: String

  # Terms link text
  termsLinkText: String

  # Terms text
  termsText: String

  # Buy item ID, same as reference ID
  buyItemId: String
}

# Mayfly response from redirecting back from CAPE
type checkoutCreditRedirectMayflyResponse {
  # Credit decision
  credit_decision: String

  # Credit FI ID
  financial_instrument_id: String

  # Installment details
  financial_instrument_details: checkoutCreditRedirectFinancialInstrumentDetails

  # Is reuse
  is_reuse: Boolean

  # Login details
  login_details: checkoutCreditRedirectLoginDetails

  # User selected shipping address
  user_selected_address_id: String

  # User selected preferred shipping address
  user_selected_preferred_shipping_address_id: String
}

# Installment details
type checkoutCreditRedirectFinancialInstrumentDetails {
  # Financing code
  financing_code: String

  # APR
  apr: String

  # Terms
  term: Int

  # Credit type
  credit_type: String

  # PayPal subsidy
  paypal_subsidy: Boolean

  # Monthly percentage rate
  monthly_percentage_rate: String

  # Total cost
  total_cost: String

  # Total interest
  total_interest: String

  # Monthly payment
  monthly_payment: String

  # Currency
  currency: String
}

# User account details
type checkoutCreditRedirectLoginDetails {
  # Whether a new account was created
  new_account_created: Boolean

  # PP account number
  paypal_account_number: String
}

# Credit FI details
input checkoutCreditFinancialInstrumentDetailsInput {
  # Financing code
  financingCode: String

  # APR
  apr: String

  # Terms
  term: Int

  # Credit type
  creditType: String

  # PayPal subsidy
  paypalSubsidy: Boolean

  # Monthly percentage rate
  monthlyPercentageRate: String

  # Total cost
  totalCost: String

  # Total interest
  totalInterest: String

  # Monthly payment
  monthlyPayment: String

  # Currency
  currency: String
}

# The fiancing properties of selcted funding source
input checkoutFundingInstrumentFinancingInput {
  # Funding instrument's ID (Ex: 'BA8JUE35JC6JBU4')
  id: ID

  # Identifier of the financing option assocaited to the funding instrument
  financingCode: String
}

# An enumeration of confirmation methods in 3DS 2.0 stack.
# ONLINE_SECURE_AUTHENTICATION, ONE_RANDOM_CHARGE_CONFIRMATION, TWO_RANDOM_CHARGE_CONFIRMATION
enum checkoutThreedsConfirmationMethod {
  # Used in all web flows - hermes xoon etc.
  ONLINE_SECURE_AUTHENTICATION

  # possible enum value, do not use for hermes, xoon
  ONE_RANDOM_CHARGE_CONFIRMATION

  # possible enum value, do not use for hermes, xoon
  TWO_RANDOM_CHARGE_CONFIRMATION
}

# 3DS new switch inbound service: sender context for 3ds FI create-confirmation call
input checkoutThreedsSenderContextInput {
  # Indicates Header Information of the browser used during the transaction
  browserDetails: checkoutThreedsBrowserDetailsInput!

  # Channel where 3DS is performed - MOBILE, COMPUTER, TABLET, UNKNOWN
  paymentMode: checkoutThreedsPaymentDevice!

  # Indicates channel of the device - SDK,BROWSER,3RI
  deviceChannel: String!
}

# 3DS new switch inbound service: browser details for 3ds FI create-confirmation call
input checkoutThreedsBrowserDetailsInput {
  # Indicates browser color used during the transaction -
  # UNKNOWN,1_BIT,4_BITS,8_BITS,15_BITS,16_BITS,24_BITS,32_BITS,48_BITS - getting
  # it as Int and form internally
  colorDepth: Int!

  # Indicates if browser is Java enabled or not
  javaEnabled: Boolean

  # Indicates browser language set during the transaction
  language: String

  # Indicates browser screen height set during the transaction
  screenHeight: Int!

  # Indicates browser screen width set during the transaction
  screenWidth: Int!

  # Indicates Time Zone used during the transaction
  timeZoneOffset: Int!

  # window size - FULL_PAGE
  windowSize: String

  # user  agent - used during transaction to override the header value
  userAgent: String
}

# An enumeration of paymentMode in 3DS 2.0 stack.
enum checkoutThreedsPaymentDevice {
  # pass when the device is Mobile
  MOBILE

  # pass when the device is a Computer
  COMPUTER

  # pass when the device is a Tablet
  TABLET

  # pass when the device type is not known
  UNKNOWN
}

# 3DS new switch inbound service: Creates a confirmation resource for a given card
# URL: /v1/wallet/card-accounts/{card_account_id}/confirmations
# card-account.create-confirmation
type checkoutThreedsCreateConfirmationResponse {
  # Brand of the Card
  brand: String

  # FI confirmation ID
  confirmationId: String

  # FI confirmation method - ONLINE_SECURE_AUTHENTICATION ONE_RANDOM_CHARGE_CONFIRMATION TWO_RANDOM_CHARGE_CONFIRMATION
  confirmationMethod: checkoutThreedsConfirmationMethod

  # The encoded payment request generated by Centinel.
  payload: String

  # Indicates whether online authentication is required or not. Only applicable for 3DS
  redirectUrl: checkoutGenericURL

  # Unique ID generated by this API. This is populated only when 3DS is required
  # and request is not in transactional context. Only applicable for 3DS
  referenceId: String

  # Over all 3DS Status - SUCCESS, FAILED
  status: String

  # The fully qualified URL to redirect the Consumer to complete the Consumer
  # Authentication transaction using the Cardinal Cruise API integration.
  stepUpUrl: checkoutGenericURL

  # The ID of the transaction that is associated with this 3D Secure authentication. Only applicable for 3DS
  transactionId: String

  # 3DS version 1.0/2.0. Only applicable for 3DS
  version: String
}

# 3DS new switch inbound service: Updates a confirmation resource for a given card confirmation respource
# URL: /v1/wallet/card-accounts/{card_account_id}/confirmations/{confirmation_id}/update
# card-account.update-confirmation
type checkoutThreedsUpdateConfirmationResponse {
  # 3DS version 1.0/2.0. Only applicable for 3DS
  version: String

  # FI confirmation method - ONLINE_SECURE_AUTHENTICATION ONE_RANDOM_CHARGE_CONFIRMATION TWO_RANDOM_CHARGE_CONFIRMATION
  confirmationMethod: checkoutThreedsConfirmationMethod

  # Over all 3DS Status
  status: String
}

# Three DS LookUp payload
input checkoutthreedsLookUpPayload {
  # reference ID for the 3DS of the Card
  threeDSReferenceId: String!

  # clients identification for downstream services. EX: HERMES, HELIOS, etc
  flowId: String!

  # encrypted card number that needs to be passed to ACE which is returned in 3DS contingency from post of checkoutsession
  encryptedCardNumber: String!

  # credit card Id - PayPal internal credit card id
  creditCardId: String

  # The card financial instrument (FI) brand.
  cardBrand: checkoutCardIssuerType

  # expiration month
  expirationMonth: String!

  # expiration year - 4 digit year
  expirationYear: String!

  # card usage - possible values CREDIT or DEBIT
  cardUsage: checkoutFundingInstrumentSubType

  # @Deprecated: This value is determined based on data in the checkout session
  cardTransactionCharacteristics: checkoutCardTransactionType

  # billing address of card
  billingAddress: checkoutAddressInput

  # merchant category code
  merchantCategoryCode: String

  # Reason for 3DS contingency
  threeDSContingencyReason: checkoutThreedsContingencyReasonType

  # Source for 3DS contingency
  threeDSContingencySource: checkoutThreedsContingencySourceType

  # Unbranded Payment Indicator
  unbrandedPaymentIndicator: Boolean
}

# An enumeration of card transaction characteristics. PRE_AUTH, FINAL_AUTH, RECURRING_PAYMENT, UNKNOWN
enum checkoutCardTransactionType {
  # The card characteristics is for Pre Auth
  PRE_AUTH

  # The card characteristics is for Final Auth
  FINAL_AUTH

  # The card characteristics is for RECURRING_PAYMENT
  RECURRING_PAYMENT

  # The card characteristics is for not known
  UNKNOWN
}

# Product Details
input checkoutProductDetails {
  # Product code
  productCode: checkoutThreedsProductCode

  # Product Feature
  productFeature: checkoutThreedsProductFeature

  # Api
  api: checkoutThreedsapi

  # Integration Artifact
  integrationArtifact: checkoutThreedsIntegrationArtifacts

  # Experience
  userExperienceFlow: checkoutThreedsUserExperienceFlow

  # Entry Point
  entryPoint: checkoutThreedsEntryPoint

  # Payment Method - reused  entry point
  paymentMethod: checkoutThreedsEntryPoint

  # Product Flow
  productFlow: checkoutThreedsProductFlow
}

# An enumeration of Product Code in 3DS 2.0 stack.
enum checkoutThreedsProductCode {
  # Express Checkout
  EXPRESS_CHECKOUT

  # WPS
  WEBSITE_PAYMENT_STANDARD

  # DCC
  DIRECT_CREDIT_CARD

  # BA
  BILLING_AGREEMENTS

  # SUBSCRIPTIONS
  BILLING_SUBSCRIPTIONS

  # Masspay
  PAYOUTS
}

# An enumeration of Product feature in 3DS 2.0 stack.
enum checkoutThreedsProductFeature {
  # Orders
  ORDERS

  # PayPal Complete Payments
  PAYPAL_COMPLETE_PAYMENTS

  # Direct Credit Card (DCC / UCC)
  DIRECT_CREDIT_CARD_API

  # None
  NONE
}

# An enumeration of Product api in 3DS 2.0 stack.
enum checkoutThreedsapi {
  # Payment V1
  PAYMENTS_V1

  # Order V1
  ORDER_V1

  # Order V2
  ORDER_V2

  # Legacy apis
  LEGACY_CHECKOUT_API

  # Billing V1
  BILLING_V1

  # Legacy Billing apis
  LEGACY_BILLING_API

  # Subscriptions V1
  SUBSCRIPTIONS_V1

  # RP
  RECURRING_PAYMENTS_V1

  # Legacy RP
  LEGACY_RECURRING_PAYMENTS

  # None
  NONE
}

# An enumeration of Product integration artifact in 3DS 2.0 stack.
enum checkoutThreedsIntegrationArtifacts {
  # PayPal sdk
  PAYPAL_JS_SDK

  # SPB V3
  JS_V3

  # SPB V4
  JS_V4

  # BT VZERO
  BRAINTREE_VZERO

  # Native SDK
  NATIVE_SDK

  # None
  NONE
}

# An enumeration of Product experience flow in 3DS 2.0 stack.
enum checkoutThreedsUserExperienceFlow {
  # Full Page - The consumer's browser does a 302 redirect to <a
  # href='https://www.paypal.com/us/home'>paypal.com</a> from the third-party site.
  FULL_PAGE_REDIRECT

  # InContext - The buyer interacts with <a
  # href='https://www.paypal.com/us/home'>paypal.com</a> in an iframe or pop up
  # window, which is a modal that is outside or hovers over the existing merchant experience.
  INCONTEXT

  # Inline - The buyer interacts with <a
  # href='https://www.paypal.com/us/home'>paypal.com</a> through an iframe on the
  # merchant site, and is in line with the existing merchant experience.
  INLINE

  # Native - The buyer interacts with PayPal through PayPal's native SDK.
  NATIVE

  # Full Page - The buyer interacts with PayPal by opening PayPal.com directly on browser
  FULL_PAGE
}

# An enumeration of Product entry point in 3DS 2.0 stack.
enum checkoutThreedsEntryPoint {
  # Venmo - The transaction is initiated from Venmo.
  PAY_WITH_VENMO

  # Card - The transaction is initiated from a credit card.
  PAY_WITH_CARD

  # PayPal - The transaction is initiated from PayPal.
  PAY_WITH_PAYPAL

  # Credit - The transaction is initiated from PayPal credit.
  PAY_WITH_PAYPAL_CREDIT

  # Alternate Payment - The transaction is initiated from Alternative Payment AliPay.
  PAY_WITH_ALTPAY_ALIPAY

  # Alternate Payment - The transaction is initiated from Alternative Payment Bancontact.
  PAY_WITH_ALTPAY_BANCONTACT

  # Alternate Payment - The transaction is initiated from Alternative Payment Boleto.
  PAY_WITH_ALTPAY_BOLETO

  # Alternate Payment - The transaction is initiated from Alternative Payment Boletobancario.
  PAY_WITH_ALTPAY_BOLETOBANCARIO

  # Alternate Payment - The transaction is initiated from Alternative Payment EPS.
  PAY_WITH_ALTPAY_EPS

  # Alternate Payment - The transaction is initiated from Alternative Payment iDeal.
  PAY_WITH_ALTPAY_IDEAL

  # Alternate Payment - The transaction is initiated from Alternative Payment MyBank.
  PAY_WITH_ALTPAY_MYBANK

  # Alternate Payment - The transaction is initiated from Alternative Payment OXXO.
  PAY_WITH_ALTPAY_OXXO

  # Alternate Payment - The transaction is initiated from Alternative Payment P24.
  PAY_WITH_ALTPAY_P24

  # Alternate Payment - The transaction is initiated from Alternative Payment Sofort.
  PAY_WITH_ALTPAY_SOFORT

  # Alternate Payment - The transaction is initiated from Alternative Payment WeChatPay.
  PAY_WITH_ALTPAY_WECHATPAY

  # Alternate Payment - The transaction is initiated from Alternative Payment Zimpler.
  PAY_WITH_ALTPAY_ZIMPLER

  # Alternate Payment - The transaction is initiated from Alternative Payment Multibanco.
  PAY_WITH_ALTPAY_MULTIBANCO

  # Alternate Payment - The transaction is initiated from Alternative Payment Satispay.
  PAY_WITH_ALTPAY_SATISPAY

  # Alternate Payment - The transaction is initiated from Alternative Payment Paidy.
  PAY_WITH_ALTPAY_PAIDY

  # Unknown
  UNKNOWN
}

# An enumeration of Product flow in 3DS 2.0 stack.
enum checkoutThreedsProductFlow {
  # Legacy Checkout API Flow
  LEGACY

  # Hermes - A web application handles the user's checkout interaction.
  HERMES

  # Prox - An eBay application handles the user's PayPal checkout experience.
  PROX

  # SPB
  SMART_PAYMENT_BUTTONS

  # HSS
  HOSTED_SOLE_SOLUTION

  # HSS Payflow
  HOSTED_SOLE_SOLUTION_PAY_FLOW

  # PP+
  PAYPAL_PLUS

  # BA Create - A buyer signing up for a billing agreement
  BUYER_APPROVAL_BILLING_AGREEMENT_CREATE

  # BA Modify - A billing agreement modification flow intiated by consumer on paypal.com
  CONSUMER_EXP_BILLING_AGREEMENT_MODIFY

  # BA with purchase - A purchase flow which buyer also approves creation of a billing agreement
  BUYER_APPROVAL_BILLING_AGREEMENT_WITH_PURCHASE

  # Subscriptions Create- A buyer signing up for a Subscription.
  BUYER_APPROVAL_SUBSCRIPTIONS_CREATE

  # Subscriptions Modify - A subscription modification flow intiated by consumer on paypal.com.
  CONSUMER_EXP_SUBSCRIPTIONS_MODIFY
}

# Partner Details
input checkoutPartnerDetails {
  # Partner / facilitator Account Number
  accountNumber: String

  # account status
  accountStatus: checkoutAccountStatus

  # is restricted account
  restrictedAccount: Boolean

  # account type
  accountType: checkoutAccountType

  # email address
  emailAddress: String

  # party id
  partyId: String

  # phone info
  phoneInfo: checkoutPhoneInput

  # Business information
  businessInformation: checkoutBusinessInformation
}

# An enumeration of user account status. (Ex: 'OPEN / CLOSED / LOCKED / UNKNOWN')
enum checkoutAccountStatus {
  # User account status is OPEN
  OPEN

  # User account status is CLOSED
  CLOSED

  # User account status is LOCKED
  LOCKED

  # User account status is UNKNOWN
  UNKNOWN
}

# An enumeration of user account type. (Ex: 'ANONYMOUS / GUEST / PERSONAL / BUSINESS')
enum checkoutAccountType {
  # User account is an anonymous account
  ANONYMOUS

  # User account is a guest account
  GUEST

  # User account is a personal account
  PERSONAL

  # User account is a business account
  BUSINESS
}

# Business Information
input checkoutBusinessInformation {
  # Business name
  businessName: String

  # Soft descriptor
  softDescriptor: String

  # Notify url
  notifyUrl: String

  # Merchant category code
  merchantCategoryCode: String

  # Business tagging id
  businessTaggingId: String
}

# Encapsulates all properties related to a ThreeDSLookUpResponse.
type checkoutThreeDSLookUpResponse {
  # The transaction handle, transaction ID, and instruction ID.
  transactionId: String

  # The 3D Secure authentication version that was used to process the transaction.
  # (e.g. 1.0.2 or 2.1.0) It is usually an output from Cardinal authentication APIs.
  threeDSVersion: String

  # Status of authentication eligibility. If not Y, then the cardholder is not eligible for authentication.
  # Possible values are: Y: Enrolled N: Not enrolled U: Cardholder authentication unavailable.
  enrollmentStatus: checkoutEnrollmentStatusType

  # Indicates liability of 3DS transaction is shifted to issuer.
  liabilityShift: Boolean

  # This is the raw value received from the external source.
  # This should be passed on the authorization transaction to the Gateway/Processor.
  threeDSEcommerceIndicator: String

  # The card financial instrument (FI) brand.
  cardBrandProcessed: checkoutCardIssuerType

  # Transaction Signature status identifier.
  # Possible Enums values are
  #   "YES": "Indicates that the signature of the PARes has been validated
  # successfully and the message contents can be trusted"
  #   "NO": "Indicates that the PARes could not be validated."
  signatureVerificationStatus: checkoutSignatureVerificationStatus

  # Overall 3DS status of the transaction
  threeDSStatus: String

  # The payment authentication parameter to send to the third-party URL during redirect.
  paymentAuthenticationRequest: String

  # Clients embed access control server (ACS) URL in payload while redirecting to complete 3DS challenge with issuer.
  acsURL: checkoutGenericURL

  # The third-party URL to which to redirect the card holder to complete the 3D Secure authentication.
  redirectURL: checkoutGenericURL

  # The normalized description for the transaction status.
  transactionStatusCode: String

  # The response message.
  transactionStatusMessage: String

  # Unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
  threeDsServerTransactionId: String

  # Provides additional information as to why the transaction status result has the specific value.
  threeDsAuthenticationReason: String

  # Universal cardholder presence indicator (e.g. whether UCAF is supported, whether it is populated, etc.).
  threeDSUcafIndicator: String

  # The outcome of the issuer's authentication.
  authenticationThreeDSStatus: String

  # The processor trace number.
  threeDsProcessorTraceNumber: String

  # The CAVV value is a cryptographic value calculated by the issuer.
  # The CAVV is unique to the cardholder and to the transaction that was authenticated.
  # Also known as CAVV for Visa VbV and JCB JSecure.
  cavv: String

  # Indicates the algorithm used to generate the CAVV/AAV value.
  cavvAlgorithm: String

  # Xid field contains the vsec transaction ID (XID) that is a unique number
  # generated by the merchant server to identify the transaction.
  xid: String

  # The PayPal acquiring BIN to be used for authorization.
  paypalAcquiringBin: String

  # The PayPal acquiring MID to be used for authorization.
  paypalAcquiringMid: String

  # Unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction.
  accessControlServerTransactionId: String

  # Unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
  dsTransactionId: String

  # Pares Status
  paresStatus: String
}

# Supported Enrollment Status enum values
enum checkoutEnrollmentStatusType {
  # Bank is participating in 3-D Secure protocol and will return the ACSUrl
  YES

  # Bank is not participating in 3-D Secure protocol
  NO

  # The DS or ACS is not available for authentication at the time of the request
  UNAVAILABLE

  # Merchant authentication rule is triggered to bypass authentication in this use case
  BYPASS

  # Unknown
  UNKNOWN
}

# Lists possible transaction Signature status identifier.
enum checkoutSignatureVerificationStatus {
  # Indicates that the signature of the PARes (Payment Authentication Response)
  # has been validated successfully and the message contents can be trusted
  YES

  # Indicates that the PARes could not be validated.
  NO
}

# Encapsulates all properties related to a ThreeDSLookUp.
type checkoutThreeDSAuthenticateResponse {
  # The Electronic Commerce Indicator (ECI).
  # MasterCard: 01: Merchant Liability 02: Issuer Liability Visa: 05: Issuer
  # Liability 06: Issuer Liability 07: Merchant Liability.
  # Possible Enums values are
  #   "NO_SECURITY": "No security. This matches the raw ECI flag of 00 or 07."
  #   "CHANNEL_ENCRYPTION": "Channel encryption."
  #   "RECURRING_TRANSACTION": "Recurring transaction."
  #   "APPROVED_AUTHENTICATION": "Approved authentication. This matches the raw ECI flag of 02 or 05."
  #   "SINGLE_PAYMENT_TRANSACTION": "Single payment transaction."
  #   "INSTALLMENT_PAYMENT": "Installment payment."
  #   "ATTEMPTED_AUTHENTICATION": "Attempted authentication. This matches the raw ECI flag of 01 or 06."
  #   "SECURITY_NO_AUTHENTICATION": "Security no authentication."
  eciIndicator: String

  # Universal cardholder presence indicator (e.g. whether UCAF is supported, whether it is populated, etc.).
  # Possible Enums values are
  #   "NOT_SUPPORTED": "Not supported."
  #   "SUPPORTED_NOT_POPULATED": "Supported, not populated."
  #   "SUPPORTED_POPULATED": "supported and populated."
  #   "SUPPORTED_STATIC_AVV_POPULATED": "Supported static avv populated."
  #   "ISSUER_RISK_DECISION": "Issuer risk decision."
  #   "MERCHANT_RISK_DECISION": "Merchant risk decision."
  #   "PARTIAL_SHIPMENT_OR_RECURRING_PAYMENT": "Partial shipment Or Recurring payment."
  ucafIndicator: String

  # The outcome of the issuer's authentication.
  # Possible values are: Y: Successful; merchant is protected. N: Failed; no protection.
  #   U: Unable to complete; no protection. A: Successful; merchant is protected.
  authenticationThreeDSStatus: String

  # The 3D Secure authentication version that was used to process the transaction.
  # (e.g. 1.0.2 or 2.1.0) It is usually an output from Cardinal authentication APIs.
  threeDSVersion: String

  # The transaction handle, transaction ID, and instruction ID.
  threeDSTransactionId: String

  # Indicates the type of authentication that was used to challenge the card holder.
  # Possible Enums values are
  #   "STATIC": "Indicates Fixed Password."
  #   "DYNAMIC": "Indicates One Time Password, could be single step or multi step."
  #   "OUT_OF_BAND": "Indicates Biometric, over the phone."
  #   "DECOUPLED": "Indicates decoupled authentication."
  authenticationType: String

  # Transaction Signature status identifier.
  # Possible Enums values are
  #   "YES": "Indicates that the signature of the PARes has been validated
  # successfully and the message contents can be trusted"
  #   "NO": "Indicates that the PARes could not be validated."
  signatureVerificationStatus: checkoutSignatureVerificationStatus

  # This flag is an indicator whether to throw 3DS contingency or not.
  skipThreeDSEnforcement: Boolean

  # The card financial instrument (FI) brand.
  cardBrandProcessed: checkoutCardIssuerType

  # This is the raw value received from the external source.
  # This should be passed on the authorization transaction to the Gateway/Processor.
  threeDSEcommerceIndicator: String

  # This is the raw value received from the external source. Transaction Signature status identifier.
  # Possible Enums values are
  #   "Y": "Successful - Signature validation is successful."
  #   "N": "Failed - Indicates that the payload could not be validated."
  threeDSSignatureStatus: String

  # This is the raw value received from the external source.
  # Universal Cardholder Authentication Field (UCAF) Indicator value provided by the issuer.
  # Possible Enums values are
  #   "0": "Non-SecureCode transaction, bypassed by the Merchant."
  #   "1": "Merchant-Only SecureCode transaction."
  #   "2": "Fully authenticated SecureCode transaction."
  threeDSUcafIndicator: String

  # Indicates liability of 3DS transaction is shifted to issuer.
  liabilityShift: Boolean

  # Overall 3DS status of the transaction.
  # Possible Enums values are
  #   "UNKNOWN": "The 3DS transaction status is unknown."
  #   "SUCCESS": "The 3DS transaction is approved or accepted."
  #   "DECLINE": "The 3DS transaction is declined by external entity or per internal business rules."
  #   "SYSTEM_ERROR": "The 3DS transaction is error due to external or internal system issues."
  #   "CHALLENGE_REQUIRED": "Indicates 3DS challenge required."
  threeDSStatus: String

  # Status of authentication eligibility. If not Y, then the cardholder is not eligible for authentication.
  # Possible values are: Y: Enrolled N: Not enrolled U: Cardholder authentication unavailable.
  enrollmentStatus: checkoutEnrollmentStatusType

  # Provides additional information as to why the transaction status result has the specific value.
  threeDsAuthenticationReason: String

  # The CAVV value is a cryptographic value calculated by the issuer.
  # The CAVV is unique to the cardholder and to the transaction that was authenticated.
  # Also known as CAVV for Visa VbV and JCB JSecure.
  cavv: String

  # Indicates the algorithm used to generate the CAVV/AAV value.
  cavvAlgorithm: String

  # Xid field contains the vsec transaction ID (XID) that is a unique number
  # generated by the merchant server to identify the transaction.
  xid: String

  # The PayPal acquiring BIN to be used for authorization.
  paypalAcquiringBin: String

  # The PayPal acquiring MID to be used for authorization.
  paypalAcquiringMid: String

  # Unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction.
  accessControlServerTransactionId: String

  # Unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
  dsTransactionId: String

  # Pares Status
  paresStatus: String
}

# Allowed statuses for resolveThreeDsContingency status
enum checkoutResolveThreeDsContingencyStatus {
  # 3DS resolution flow was successful
  SUCCESS

  # 3DS resolution flow failed due to error or decline
  FAILURE
}

# Bank Account Beneficiary Input
input checkoutBankAccountBeneficiaryInput {
  # The first name of the bank account's beneficiary.
  firstName: String

  # The last name of the bank account's beneficiary.
  lastName: String

  # The birth date of the bank account's beneficiary
  birthDate: checkoutDateOfBirth

  # Phone number of the bank account's beneficiary
  phone: checkoutPhoneInput
}

# Extra arguments needed for Add Bank flow.
input checkoutBankAccountAuthorizationsInput {
  # Indicates whether the bank has to resolve sepa authorization
  acceptSepa: Boolean
}

# Encapsulates the status of initiate otp confirmation response.
type checkoutInitiateOtpConfirmationResponse {
  # Overall Status of initiate otp call
  status: String
}

# Complete card otp confirmation input for otp verification for a new card.
input checkoutCompleteCardOtpConfirmationInput {
  # 3 or 4 digits security code of a card (Ex: '123')
  securityCode: String

  # Expiration date of a card (Ex: '02/2021')
  expirationDate: String

  # one time password code entered by the user (Ex: 1234)
  otpCode: String!
}

# Encapsulates the status of complete otp confirmation response.
type checkoutCompleteOtpConfirmationResponse {
  # Overall status of complete otp call
  status: String
}

# Phone confirmation response
type checkoutPhoneConfirmationResponse {
  # Verification ID from identity2faserv
  id: String

  # Phone confirmation state
  state: checkoutPhoneConfirmationState

  # Expiry of the phone confirmation session
  validUntil: checkoutGenericDate
}

# Phone confirmation state
enum checkoutPhoneConfirmationState {
  # PENDING
  PENDING

  # CONFIRMED
  CONFIRMED

  # UNKNOWN
  UNKNOWN
}

# Venmo Shadow Guest account details needed for Checkout
type checkoutVenmoGuestUser {
  # Venmo User's full name
  name: checkoutPersonName

  # Venmo User's email as shown on ther Venmo app profile
  email: checkoutEmail

  # The digital CVV of an Open Loop Token instrument
  dcvv: String

  # The paypal Instrument ID associated to the Venmo Guest Account
  instrumentID: String

  # Venmo Guest Account Access Token
  accessToken: String
}

# Schema for Apple Pay payment token
input checkoutApplePayPaymentToken {
  # Payment method: 'debit' | 'credit' | 'prepaid' | 'store'
  paymentMethod: checkoutApplePayPaymentMethod

  # Transaction identifier
  transactionIdentifier: String

  # Payment data
  paymentData: checkoutJSON
}

# Schema for Apple Pay payment method
input checkoutApplePayPaymentMethod {
  # A string, suitable for display, that describes the card.
  displayName: String

  # Name of the payment network backing the card
  network: String

  # A value representing the card's type of payment.
  type: String

  # The payment pass object currently selected to complete the payment.
  paymentPass: checkoutApplePayPaymentPass

  # Billing contact associated with the card.
  billingContact: checkoutApplePayPaymentContact
}

# Schema for Apple Pay payment method
input checkoutApplePayPaymentPass {
  # The unique identifier for the primary account number for the payment card.
  primaryAccountIdentifier: String

  # A version of the primary account number suitable for display in your UI.
  primaryAccountNumberSuffix: String

  # The unique identifier for the device-specific account number.
  deviceAccountIdentifier: String

  # A version of the device account number suitable for display in your UI.
  deviceAccountNumberSuffix: String

  # Activation state: activated | requiresActivation | activating | suspended | deactivated
  activationState: String
}

# Schema for Apple Pay contact
input checkoutApplePayPaymentContact {
  # Phone number from Apple
  phoneNumber: String

  # Email address from Apple
  emailAddress: String

  # First name from Apple
  givenName: String

  # Last name from Apple
  familyName: String

  # Phonetic first name from Apple
  phoneticGivenName: String

  # Phonetic last name from Apple
  phoneticFamilyName: String

  # Address from Apple
  addressLines: [String]

  # Township from Apple
  subLocality: String

  # City from Apple
  locality: String

  # Postal code from Apple
  postalCode: String

  # County from Apple
  subAdministrativeArea: String

  # State from Apple
  administrativeArea: String

  # Country from Apple
  country: String

  # Country code from Apple
  countryCode: checkoutCountryCodes
}

# Google Pay Payment Method Data
# See: https://developers.google.com/pay/api/web/reference/response-objects#PaymentMethodData
input checkoutGooglePayPaymentMethodData {
  # Description: User-facing message to describe the payment method that funds this transaction.
  description: String

  # Tokenization Data: Payment tokenization data for the selected payment method.
  tokenizationData: checkoutGooglePayTokenizationData

  # Type: PaymentMethod type selected in the Google Pay payment sheet.
  type: String

  # Info: The value of this property depends on the payment method type returned. For CARD will be CardInfo.
  info: checkoutGooglePayPaymentMethodDataInfo
}

# Google Pay Payment Tokenization Data
# See: https://developers.google.com/pay/api/web/reference/response-objects#PaymentMethodTokenizationData
input checkoutGooglePayTokenizationData {
  # The type of tokenization to be applied to the selected payment method. This
  # value matches the type set in PaymentMethodTokenizationSpecification.
  type: String

  # Tokenization Data: Payment tokenization data for the selected payment method.
  token: String
}

# Google Pay Payment Method Data > Info
# The value of the info property depends on the payment method type returned. For CARD type the value will be CardInfo.
# https://developers.google.com/pay/api/web/reference/response-objects#CardInfo
input checkoutGooglePayPaymentMethodDataInfo {
  # Card Details: The details about the card. This value is commonly the last four
  # digits of the selected payment account number.
  cardDetails: String

  # Assurance Details: This object provides information about the validation
  # performed on the returned payment data if assuranceDetailsRequired is set to
  # true in the CardParameters.
  assuranceDetails: checkoutJSON

  # Card Network: The payment card network of the selected payment.
  cardNetwork: String

  # Billing Address: The billing address associated with the provided payment
  # method, if billingAddressRequired is set to true in CardParameters.
  billingAddress: checkoutGooglePayPaymentContact
}

# Schema for Google Pay contact
# https://developers.google.com/pay/api/web/reference/response-objects#Address
input checkoutGooglePayPaymentContact {
  # The full name of the addressee.
  name: String

  # The postal or ZIP code.
  postalCode: String

  # ISO 3166-1 alpha-2 country code.
  countryCode: String

  # A telephone number, if phoneNumberRequired is set to true in the PaymentDataRequest.
  phoneNumber: String

  # The first line of the address.
  address1: String

  # The second line of the address.
  address2: String

  # The third line of the address.
  address3: String

  # City, town, neighborhood, or suburb.
  locality: String

  # A country subdivision, such as a state or province.
  administrativeArea: String

  # The sorting code.
  sortingCode: String
}

#
type billingMutation {
  # create billing agreement context
  billingAgreementContext(
    billingAgreementId: String!
    billingAgreementOptions: billingbillingAgreementContextInput
  ): billingBillingAgreementContext

  # set sticky instrument
  setSticky(
    billingAgreementId: String!
    fundingOptionID: String!
  ): billingBillingAgreementContext

  #
  addCard(
    billingAgreementId: String!
    card: billingCardInput!
    user: billingUserInput!
    billingAddress: billingAddAddressInput!
    uiChannel: String!
    updateCard: Boolean
  ): billingBillingAgreementContext

  # set preferred instrument
  setPreferredFI(
    billingAgreementId: String!
    fundingOptionID: String!
    uiChannel: String!
  ): billingBillingAgreementContext

  # set preferred address
  setPreferredAddress(
    billingAgreementId: String!
    addressId: String!
  ): billingBillingAgreementContext

  # set selected address
  setSelectedAddress(
    billingAgreementId: String!
    addressId: String!
  ): billingBillingAgreementContext

  # confirm credit card cvv
  confirmCreditCardCvv(
    billingAgreementId: String!
    input: billingConfirmCreditCardCvvInput
  ): billingBillingAgreementContext

  # validate Address
  validateAddress(address: billingAddressInput!): billingNormalizedAddress

  # normalizeAddress
  normalizeAddress(address: billingAddressInput!): billingNormalizedAddress

  # add tax id for BR buyer
  addTaxId(
    billingAgreementId: String!
    taxDetails: billingTaxInput!
  ): billingBillingAgreementContext

  # authorize call for billing agreement
  authorize(
    #
    billingAgreementId: String!

    #
    fundingOptionID: String

    #
    fundingPreference: billingFundingPreferenceInput

    #
    addressId: String

    # Data related to the Legal Agreements accepted
    legalAgreements: billingLegalAgreementsInput
  ): billingBillingAgreementContext

  # update shipping Address
  updateShippingAddress(
    billingAgreementId: String!
    address: billingShippingAddressInput!
  ): billingBillingAgreementContext

  # The acceptEconsent mutation will update user's edelivery consent
  # E-Sign consent is the process by which US consumers consent to have their
  # notifications and statements delivered electronically
  #
  # Required auth states: LOGGEDIN, REMEMBERED, or IDENTIFIED
  acceptEconsent(billingAgreementId: String!): billingBillingAgreementContext

  # update billing agreement
  updateBillingAgreement(
    input: billingUpdateBillingAgreementInput!
  ): billingBillingAgreement
}

# Card input type represents for a card
input billingCardInput {
  # 13 to 19 digits number of the card. (Ex: '4111111111111111')
  cardNumber: String!

  # type of the card. (Ex: 'CREDIT'/'DEBIT')
  type: billingCardType

  # name of the card. (Ex: 'VISA')
  name: String

  # 3 or 4 digits security code of the card (Ex: '123')
  securityCode: String!

  # Expiration date of the card (Ex: '02/2020')
  expirationDate: String

  # Start date of the card (Ex: '02/2018')
  startDate: String

  # Issue number for Maestro/ Switch cards (Ex: '01')
  issueNumber: String
}

# An enumeration of types that a Card can be.
enum billingCardType {
  # For Credit card
  CREDIT

  # For Debit card
  DEBIT

  # For prepaid card
  PREPAID
}

# User input type represents buyer
input billingUserInput {
  # first name of buyer
  firstName: String!

  # last name of buyer
  lastName: String

  # DOB of buyer in mm/dd/yyyy format (Ex: '02/02/1994')
  dateOfBirth: String
}

# Buyer address
input billingAddAddressInput {
  # address id of the existing address if buyer doesn't add new address
  addressId: String

  # if buyer adds new address then provide address details
  address: billingAddressInput
}

# Represents the desired data for confirming a credit card's cvv
input billingConfirmCreditCardCvvInput {
  # An ecrypted credit card is as a String (Ex: 'CCA2NP3NVAPABBQ')
  encryptedId: String!

  # The last four digits of the user's credit card number as a String (Ex: '7062')
  lastFourDigits: String!

  # The credit card's cvv number as a String (Ex: '123')
  cvv: String!

  # The card issuer as a CardIssuerType(Ex: 'VISA')
  type: billingCardIssuerType!
}

# An enumeration of credit card issuers that a card can have.
# VISA, MASTERCARD, AMEX, etc
enum billingCardIssuerType {
  # Amex
  AMEX

  # Visa
  VISA

  # Visa
  VISAE

  # Mastercard
  MCARD

  # Mastercard
  MASTERCARD

  # Mastercard
  MASTER_CARD

  #
  DISCOVER

  # Discover
  DISC

  # Maestro
  SWITCH

  # Maestro
  SWTCH

  # Maestro
  SOLO

  # Maestro
  MAESTRO

  # Maestro
  MSTRO

  # JCB
  JCB

  # CB Nationale
  CBN

  # CB Nationale
  CB_NATIONALE

  # Cofinoga
  CONF

  # Cofinoga
  COFINOGA

  # Celem
  CELEM

  # Cetelem
  CETELEM

  # Cofidis
  COFID

  # Cofidis
  COFIDIS

  # Elo
  ELO

  # Hiper
  HIPER

  # Hipercard
  HIPERCARD

  # China Union Pay
  CHINA_UNION_PAY

  # China Union Pay
  CUP

  # Diners
  DINERS
}

# Buyer address
type billingNormalizedAddress {
  # first line street address (Ex: '2211 North 1st St')
  line1: String!

  # second line street address (Ex: 'Apt 123')
  line2: String

  # city (Ex: 'San Jose')
  city: String

  # state/province (Ex: 'CA')
  state: String

  # postal code (Ex: '95131')
  postcode: String

  # two-letter country code (Ex: 'US')
  country: String!

  # status of user input address (EX: 'NORMALIZED_USER_ADDRESS')
  normalizationStatus: billingNormalizationStatus

  # An Address on a single line (Ex: '2211 North 1st St, Apt 123, San Jose, CA 95131')
  fullAddress: String
}

# An enumeration of address normalization status.
enum billingNormalizationStatus {
  #
  NORMALIZED_USER_ADDRESS

  #
  UNNORMALIZED_USER_ADDRESS
}

# Buyer tax_id information (required for BR buyers)
input billingTaxInput {
  # tax type (Ex: 'CPF')
  type: billingTaxType!

  # tax id value (Ex: '12345678901')
  value: String!

  # issuer of the tax id (Ex: 'BR_CPF')
  issuer: String!

  # issuer country (Ex: 'BR')
  issuerCountry: String!

  # place of Issue (Ex: 'BR')
  placeOfIssue: String!
}

# An enumeration of tax type for BR.
enum billingTaxType {
  #
  CPF

  #
  CNPJ
}

# FundingPreference input type represents FI input for particular billingAgreementContext
input billingFundingPreferenceInput {
  # preferred fundingOptionId
  fundingOptionId: String

  # balancePreference for particular context
  balancePreference: billingBalancePreference
}

# Encapsulates all properties related to the Legal Agreements accepted by the buyer.
input billingLegalAgreementsInput {
  # User Agreement accepted by the buyer
  userAgreement: billingLegalAgreementInput
}

# Encapsulates all properties related to a Legal Agreement accepted by the buyer.
# This definition is based on OAS API definition for create entities endpoint.
# OAS API Definition: https://ppaas/api/3719176155268672#apiReference (/v1/onboarding/create-entities).
input billingLegalAgreementInput {
  # Agreement major version accepted by the buyer.
  majorVersion: String!

  # Agreement minor version accepted by the buyer.
  minorVersion: String!
}

# Shipping address (required for updating an existing shipping address identified via addressId)
input billingShippingAddressInput {
  # An Address ID (Ex: '285166')
  addressId: String!

  # An Address first line street address (Ex: '2211 North 1st St')
  line1: String!

  # An Address second line street address (Ex: 'Apt 123')
  line2: String

  # An Address city (Ex: 'San Jose')
  city: String!

  # An Address state/province (Ex: 'CA')
  state: String

  # An Address postal code (Ex: '95131')
  postcode: String!

  # An Address two-letter country code (Ex: 'US')
  country: String!

  # If an Address is the default shipping address
  isDefaultShipping: Boolean

  # If an Address is the default shipping address
  isDefault: Boolean

  # An Address is selected. If you are listing out addresses in a UI, and
  # need to show that an address is selected, use this property.
  isSelected: Boolean

  # An Address is disabled for transaction
  disableForTransaction: Boolean

  # The normalization status of Address (Required for Brazil)
  normalizationStatus: billingNormalizationAddressStatus

  # A name associated with the address
  name: billingPersonNameInput!
}

# Person Name Input refers to the buyer name
input billingPersonNameInput {
  # first name of buyer
  firstName: String

  # last name of buyer
  lastName: String
}

# Encapsulates all properties related to updateBillingAgreement mutation.
input billingUpdateBillingAgreementInput {
  # billingAgreement id
  id: String!

  # Modify operations on the billingAgreement which can be add, replace or remove
  operations: [billingOperation!]!
}

# Modify operations supported on BillingAgreement
input billingOperation {
  #
  replace: billingReplaceOperation
}

# Replace an existing attribute with the provided details
input billingReplaceOperation {
  # Replaces existing status
  status: String

  # Replaces existing note
  statusChangeNote: String

  # Replaces existing selected FI with new FI
  selectedFundingOption: billingSelectedFundingOptionInput
}

# Encapsulates all properties related to updating selectedOption.
input billingSelectedFundingOptionInput {
  # fundingOption id that will become new FID
  fundingOptionId: String!

  # currencyConversionPreference for new FID
  currencyConversionPreference: billingCurrencyConversionType

  # If FId is of newly added FI then this field should be set to true
  newFundingOption: Boolean

  # Unique reference id for 3DS authentication in case if 3DS is handled
  threeDSReferenceId: String

  # Unique handle for for each authorizaton initiated by customer/cardholder in case if 3DS is handled
  threeDSHandle: String

  # Unique reference id for for each authorizaton initiated by customer/cardholder
  citReferenceId: String

  # If there was cit contingency for the FI then caller should set this parameter
  # to true So, that billing graphql can do auth on buyer's card
  citAuthRequired: Boolean

  # balancePreference for particular BA
  balancePreference: billingBalancePreference
}

# Response wrapper for addBillingAddress.
type AddBillingAddressResponse {
  # Whether or not a billing address has been added.
  success: Boolean
}

# An enumeration of Tax Id types.
# CPF, CNPJ
enum TaxIdType {
  # Tax Id for BR personal accounts
  CPF

  # Tax Id for BR business accounts
  CNPJ
}

# Allows selecting an installment option for use when paying
#
# Used in the `approveMemberPayment` mutation.
#
# Example input (with discount):
# ```
# "installmentOption: {
#   term: 1,
#   paymentValue: '237.50',
#   paymentCurrency: 'BRL',
#   discountValue: '12.50',
#   discountCurrency: 'BRL',
#   discountPercentage: '5.0',
#   totalCostValue: '237.50',
#   totalCostCurrency: 'BRL',
# };
# ```
#
# Example input (without discount):
# ```
# "installmentOption": {
#   term: 10,
#   paymentValue: '25.00',
#   paymentCurrency: 'BRL',
#   totalCostValue: '250.00',
#   totalCostCurrency: 'BRL',
# };
# ```
input InstallmentsInput {
  # Installment term (Ex: 5)
  term: Int!

  # Monthly payment for the selected installment term (Ex: '25.00')
  paymentValue: String!

  # Monthly payment currency code for selected installment (Ex: 'BRL')
  paymentCurrency: String!

  # Value of the merchant provided discount for the selected installment term (Ex: '12.50')
  discountValue: String

  # Currency code for the merchant provided discount (Ex: 'BRL')
  discountCurrency: String

  # Merchant provided discount percentage for the selected installment term (Ex: '5.0')
  discountPercentage: String

  # Total cost of the purchase (Ex: 250.00)
  totalCostValue: String!

  # Currency code for the total cost of the purchase (Ex: 'BRL')
  totalCostCurrency: String!
}

# Rewards input when paying with rewards.
#
# Used in the `approveMemberPayment` mutation.
#
# Example input:
# ```
# "rewards": {
#   "id": "GI-XXXXXXXXXXXXX",
#   "amount": "20",
#   "currency": "USD"
# }
# ```
input RewardsInput {
  # Rewards funding source ID
  id: String!

  # Rewards amount to use toward the transaction
  amount: String!

  # Rewards currency code
  currency: String!
}

# Encapsulates all properties related to the Legal Agreements accepted by the buyer.
input LegalAgreementsInput {
  # User Agreement accepted by the buyer
  userAgreement: LegalAgreementInput
}

# Encapsulates all properties related to a Legal Agreement accepted by the buyer.
# This definition is based on OAS API definition for create entities endpoint.
# OAS API Definition: https://ppaas/api/3719176155268672#apiReference (/v1/onboarding/create-entities).
input LegalAgreementInput {
  # Agreement major version accepted by the buyer.
  majorVersion: String!

  # Agreement minor version accepted by the buyer.
  minorVersion: String!
}

# Represents the data required for completing an Approve Payment for Split Tender
input SplitFundingOptionsInput {
  # Funding Instrument ID
  id: ID!

  # Funding Instrument Type
  fundingInstrumentType: FundingInstrumentType!

  # Amount to apply to Funding Instrument
  amount: AmountInput!

  # User Selected Instrument to be the Backup/Primary - must have one in the list
  isPrimaryInstrument: Boolean!
}

# Type of funding instrument
enum FundingInstrumentType {
  # Bank
  BANK

  # Credit card
  CARD

  # PayPal Balance
  BALANCE

  # PayPal Credit
  CREDIT

  # Incentive
  INCENTIVE

  # Standalone reward
  STANDALONE_REWARDS
}

# Represents the data required for completing 3DS verification
input ThreeDSParamsInput {
  # The type of the response param
  key: String

  # Value of the response param
  value: String
}

# Date of Birth input type
input DateOfBirth {
  # Specific day of birth
  day: DobDay

  # Month of birth
  month: DobMonth

  # Year of birth
  year: DobYear
}

# Date of Birth
scalar DobDay

# Date of Birth Month
scalar DobMonth

# Date of Birth Year
scalar DobYear

# An enumeration of all occupations that a user can select
enum Occupation {
  # Accounting
  ACCOUNTING

  # Administration
  ADMINISTRATION

  # Arts, Culture
  ARTS_AND_CULTURE

  # Business
  BUSINESS

  # Communications
  COMMUNICATIONS

  # Customer Service
  CUSTOMER_SERVICE

  # Education
  EDUCATION

  # Energy, Utilities
  ENERGY_AND_UTILITIES

  # Engineering
  ENGINEERING

  # Finance
  FINANCE

  # Financial Services
  FINANCIAL_SERVICES

  # Government
  GOVERNMENT

  # Health
  HEALTH

  # Hospitality
  HOSPITALITY

  # Human Resources
  HUMAN_RESOURCES

  # Internet
  INTERNET

  # Legal
  LEGAL

  # Manufacturing
  MANUFACTURING

  # Marketing
  MARKETING

  # Non-profit
  NON_PROFIT

  # Recreation
  RECREATION

  # Religion
  RELIGION

  # Research
  RESEARCH

  # Sales
  SALES

  # Sports, Fitness
  SPORTS_AND_FITNESS

  # Student
  STUDENT

  # Technology
  TECHNOLOGY

  # Trade
  TRADE

  # Transportation
  TRANSPORTATION

  # Travel
  TRAVEL

  # Items below are a new set for occupancy list, currently in A/B test
  # Experiment: FEATURE_SIGNUP_OCCUPATION_LIST
  #
  # Business Management - Accountant
  BUS_MGMT_ACCOUNTANT

  # Business Management - Accounts Payables/Receivables
  BUS_MGMT_ACCTS_PAY_RECV

  # Business Management - Analyst
  BUS_MGMT_ANALYST

  # Business Management - Benefits Administrator
  BUS_MGMT_BENEFITS_ADMIN

  # Business Management - Board Member
  BUS_MGMT_BOARD_MEMBER

  # Business Management - Chief Executive Officer
  BUS_MGMT_CEO

  # Business Management - Chief Financial Officer
  BUS_MGMT_CFO

  # Business Management - Chief Marketing Officer
  BUS_MGMT_CMO

  # Business Management - Consultant
  BUS_MGMT_CONSULTANT

  # Business Management - Chief Operating Officer
  BUS_MGMT_COO

  # Business Management - Corporate Auditor
  BUS_MGMT_CORP_AUDITOR

  # Business Management - Chief Risk Officer
  BUS_MGMT_CRO

  # Business Management - Executive
  BUS_MGMT_EXECUTIVE

  # Business Management - HR Administrator
  BUS_MGMT_HR_ADMIN

  # Business Management - Inside Sales
  BUS_MGMT_INSIDE_SALES

  # Business Management - Mergers & Acquisitions
  BUS_MGMT_MA

  # Business Management - Others
  BUS_MGMT_OTHERS

  # Business Management - Outside Sales
  BUS_MGMT_OUTSIDE_SALES

  # Business Management - Payroll Administrator
  BUS_MGMT_PAYROLL_ADMIN

  # Business Management - President
  BUS_MGMT_PRESIDENT

  # Business Management - Project Manager
  BUS_MGMT_PROJECT_MGR

  # Business Management - Records Manager
  BUS_MGMT_RECORDS_MGR

  # Business Management - Recruiter
  BUS_MGMT_RECRUITER

  # Business Management - Secretary
  BUS_MGMT_SECRETARY

  # Business Management - Strategy
  BUS_MGMT_STRATEGY

  # Business Management - Telemarketing
  BUS_MGMT_TELEMARKETING

  # Business Management - Training
  BUS_MGMT_TRAINING

  # Business Management - Treasurer
  BUS_MGMT_TREASURER

  # Construction - Apprentice
  CONSTRUCTION_APPRENTICE

  # Construction - Carpenter
  CONSTRUCTION_CARPENTER

  # Construction - Drywall
  CONSTRUCTION_DRYWALL

  # Construction - Electrician
  CONSTRUCTION_ELECTRICIAN

  # Construction - Floor Installer
  CONSTRUCTION_FLOOR_INSTALLER

  # Construction - Framer
  CONSTRUCTION_FRAMER

  # Construction - Heating/HVAC
  CONSTRUCTION_HEATING_HVAC

  # Construction - Ironworker
  CONSTRUCTION_IRONWORKER

  # Construction - Landscaper
  CONSTRUCTION_LANDSCAPER

  # Construction - Mason
  CONSTRUCTION_MASON

  # Construction - Metal Fabrication
  CONSTRUCTION_METAL_FABRICATION

  # Construction - Others
  CONSTRUCTION_OTHERS

  # Construction - Painter
  CONSTRUCTION_PAINTER

  # Construction - Plumber
  CONSTRUCTION_PLUMBER

  # Construction - Roofer
  CONSTRUCTION_ROOFER

  # Construction - Supervisor
  CONSTRUCTION_SUPERVISOR

  # Construction - Surveyor
  CONSTRUCTION_SURVEYOR

  # Construction - Tile Installer
  CONSTRUCTION_TILE_INSTALLER

  # Creative - Advertising Executive
  CREATIVE_ADVERTISING_EXEC

  # Creative - Advertising Sales
  CREATIVE_ADVERTISING_SALES

  # Creative - Artist
  CREATIVE_ARTIST

  # Creative - Author
  CREATIVE_AUTHOR

  # Creative - Blogger
  CREATIVE_BLOGGER

  # Creative - Computer Animator
  CREATIVE_COMPUTER_ANIMATOR

  # Creative - Content Creator
  CREATIVE_CONTENT_CREATOR

  # Creative - Fashion Designer
  CREATIVE_FASHION_DESIGNER

  # Creative - Industrial Design
  CREATIVE_INDUSTRIAL_DESIGN

  # Creative - Interior Designer
  CREATIVE_INTERIOR_DESIGNER

  # Creative - Musician
  CREATIVE_MUSICIAN

  # Creative - Others
  CREATIVE_OTHERS

  # Creative - Photographer
  CREATIVE_PHOTOGRAPHER

  # Creative - Publisher
  CREATIVE_PUBLISHER

  # Creative - Sculptor
  CREATIVE_SCULPTOR

  # Creative - Sound Technician
  CREATIVE_SOUND_TECHNICIAN

  # Creative - Web Designer
  CREATIVE_WEB_DESIGNER

  # Education - Administrator
  EDUCATION_ADMINISTRATOR

  # Education - Adult Educator
  EDUCATION_ADULT_EDUCATOR

  # Education - Early Child Development
  EDUCATION_EARLY_CHILD_DEVT

  # Education - Librarian
  EDUCATION_LIBRARIAN

  # Education - Others
  EDUCATION_OTHERS

  # Education - Principal/Director
  EDUCATION_PRINCIPAL_VP

  # Education - Professor
  EDUCATION_PROFESSOR

  # Education - Software Trainer
  EDUCATION_SOFTWARE_TRAINER

  # Education - Special Education
  EDUCATION_SPECIAL_EDUCATION

  # Education - Teacher-College/University
  EDUCATION_TEACHER_COLL_UNIV

  # Education - Teacher-Elementary
  EDUCATION_TEACHER_ELEMENTARY

  # Education - Teacher-Pre School
  EDUCATION_TEACHER_PRE_SCHOOL

  # Education - Teacher-Secondary
  EDUCATION_TEACHER_SECONDARY

  # Education - Teaching Assistant
  EDUCATION_TEACHING_ASSISTANT

  # Engineer - Aeronautic
  ENGINEER_AERONAUTIC

  # Engineer - Architect
  ENGINEER_ARCHITECT

  # Engineer - Bio-Engineering
  ENGINEER_BIO_ENGINEERING

  # Engineer - Chemical
  ENGINEER_CHEMICAL

  # Engineer - Civil
  ENGINEER_CIVIL

  # Engineer - Drafting/CAD
  ENGINEER_DRAFTING_CAD

  # Engineer - Electrical
  ENGINEER_ELECTRICAL

  # Engineer - Energy
  ENGINEER_ENERGY

  # Engineer - Environmental/Geology
  ENGINEER_ENVIRO_GEO

  # Engineer - Industrial
  ENGINEER_INDUSTRIAL

  # Engineer - Marine
  ENGINEER_MARINE

  # Engineer - Mechanical
  ENGINEER_MECHANICAL

  # Engineer - Others
  ENGINEER_OTHERS

  # Engineer - Process
  ENGINEER_PROCESS

  # Engineer - Town/City Planning
  ENGINEER_TOWN_CITY_PLANNING

  # Engineer - Urban Planner
  ENGINEER_URBAN_PLANNER

  # Financial - Accountant
  FINANCIAL_ACCOUNTANT

  # Financial - Actuarial Analysis
  FINANCIAL_ACTUARIAL_ANALYSIS

  # Financial - Administrator/Executive Support
  FINANCIAL_ADMIN_EXEC_SUPPORT

  # Financial - Advisor
  FINANCIAL_ADVISOR

  # Financial - Analysis/Research
  FINANCIAL_ANALYSIS_RESEARCH

  # Financial - Bank Manager
  FINANCIAL_BANK_MANAGER

  # Financial - Bank Teller
  FINANCIAL_BANK_TELLER

  # Financial - Bookkeeper
  FINANCIAL_BOOKKEEPER

  # Financial - Consultant
  FINANCIAL_CONSULTANT

  # Financial - Credit Analyst
  FINANCIAL_CREDIT_ANALYST

  # Financial - Credit Manager
  FINANCIAL_CREDIT_MANAGER

  # Financial - Cust Service Representative
  FINANCIAL_CUST_SERVICE_REP

  # Financial - Data Entry
  FINANCIAL_DATA_ENTRY

  # Financial - Debt Collections
  FINANCIAL_DEBT_COLLECTIONS

  # Financial - Economist
  FINANCIAL_ECONOMIST

  # Financial - Fund Accounting
  FINANCIAL_FUND_ACCOUNTING

  # Financial - Insurance Broker
  FINANCIAL_INSURANCE_BROKER

  # Financial - Insurance Claims
  FINANCIAL_INSURANCE_CLAIMS

  # Financial - Investment Analyst
  FINANCIAL_INVESTMENT_ANALYST

  # Financial - Investment Broker
  FINANCIAL_INVESTMENT_BROKER

  # Financial - Loan Officer
  FINANCIAL_LOAN_OFFICER

  # Financial - Manager
  FINANCIAL_MANAGER

  # Financial - Others
  FINANCIAL_OTHERS

  # Health - Anesthesiologist
  HEALTH_ANESTHESIOLOGIST

  # Health - Dental Hygienist
  HEALTH_DENTAL_HYGIENIST

  # Health - Dentist
  HEALTH_DENTIST

  # Health - Dietary Specialist
  HEALTH_DIETARY_SPECIALIST

  # Health - Doctor - General
  HEALTH_DOCTOR_GENERAL

  # Health - Doctor - Specialist
  HEALTH_DOCTOR_SPECIALIST

  # Health - EMT/Paramedic
  HEALTH_EMT_PARAMEDIC

  # Health - Healthcare Aid
  HEALTH_HEALTHCARE_AID

  # Health - Hospital Management
  HEALTH_HOSPITAL_MGMT

  # Health - Imaging Technician
  HEALTH_IMAGING_TECHNICIAN

  # Health - Lab Tech/Pathology
  HEALTH_LAB_TECH_PATHOLOGY

  # Health - Medical Practitioner
  HEALTH_MEDICAL_PRACTITIONER

  # Health - Nurse
  HEALTH_NURSE

  # Health - Occupational Therapy
  HEALTH_OCCUPATIONAL_THERAPY

  # Health - Office Manager
  HEALTH_OFFICE_MANAGER

  # Health - Optical Specialist
  HEALTH_OPTICAL_SPECIALIST

  # Health - Others
  HEALTH_OTHERS

  # Health - Pharmacist
  HEALTH_PHARMACIST

  # Health - Physiotherapist
  HEALTH_PHYSIOTHERAPIST

  # Health - Psychiatrist
  HEALTH_PSYCHIATRIST

  # Health - Psychologist
  HEALTH_PSYCHOLOGIST

  # Health - Public Health Administrator
  HEALTH_PUBLIC_HEALTH_ADMIN

  # Health - Radiologist
  HEALTH_RADIOLOGIST

  # Health - Social Services
  HEALTH_SOCIAL_SERVICES

  # Health - Sports Medicine Specialist
  HEALTH_SPORTS_MED_SPECIALIST

  # Health - Surgeon
  HEALTH_SURGEON

  # Health - Veterinary
  HEALTH_VETERINARY

  # Hospitality - Bartender
  HOSPITALITY_BARTENDER

  # Hospitality - Chef/Cook
  HOSPITALITY_CHEF_COOK

  # Hospitality - Concierge
  HOSPITALITY_CONCIERGE

  # Hospitality - Dishwasher
  HOSPITALITY_DISHWASHER

  # Hospitality - Event Planner
  HOSPITALITY_EVENT_PLANNER

  # Hospitality - Food Services
  HOSPITALITY_FOOD_SERVICES

  # Hospitality - Guest Services
  HOSPITALITY_GUEST_SERVICES

  # Hospitality - Host/Hostess
  HOSPITALITY_HOST_HOSTESS

  # Hospitality - Hotel Management
  HOSPITALITY_HOTEL_MANAGEMENT

  # Hospitality - Janitor
  HOSPITALITY_JANITOR

  # Hospitality - Laundry
  HOSPITALITY_LAUNDRY

  # Hospitality - Others
  HOSPITALITY_OTHERS

  # Hospitality - Pilot
  HOSPITALITY_PILOT

  # Hospitality - Reception
  HOSPITALITY_RECEPTION

  # Hospitality - Restaurant Management
  HOSPITALITY_RESTAURANT_MGMT

  # Hospitality - Room Service
  HOSPITALITY_ROOM_SERVICE

  # Hospitality - Ship Captain
  HOSPITALITY_SHIP_CAPTAIN

  # Hospitality - Tour Guide
  HOSPITALITY_TOUR_GUIDE

  # Hospitality - Tour Operator
  HOSPITALITY_TOUR_OPERATOR

  # Hospitality - Travel Agent
  HOSPITALITY_TRAVEL_AGENT

  # Hospitality - Waiter/Server
  HOSPITALITY_WAITER_SERVER

  # Hospitality - Wine Steward
  HOSPITALITY_WINE_STEWARD

  # Install/Repair - Electrician
  INSTALL_REPAIR_ELECTRICIAN

  # Install/Repair - Equipment
  INSTALL_REPAIR_EQUIPMENT

  # Install/Repair - Facility Manager
  INSTALL_REPAIR_FACILITY_MGR

  # Install/Repair - Locksmith
  INSTALL_REPAIR_LOCKSMITH

  # Install/Repair - Others
  INSTALL_REPAIR_OTHERS

  # Install/Repair - Plumber
  INSTALL_REPAIR_PLUMBER

  # Install/Repair - Small Engine
  INSTALL_REPAIR_SMALL_ENGINE

  # Legal - Bailiff
  LEGAL_BAILIFF

  # Legal - Bylaw Enforcement
  LEGAL_BYLAW_ENFORCEMENT

  # Legal - Court Administrator
  LEGAL_COURT_ADMINISTRATOR

  # Legal - Court Reporter
  LEGAL_COURT_REPORTER

  # Legal - Customs Officer
  LEGAL_CUSTOMS_OFFICER

  # Legal - Judge
  LEGAL_JUDGE

  # Legal - Lawyer - Criminal
  LEGAL_LAWYER_CRIMINAL

  # Legal - Lawyer - Family
  LEGAL_LAWYER_FAMILY

  # Legal - Lawyer - Labour
  LEGAL_LAWYER_LABOUR

  # Legal - Lawyer - Patent/IP
  LEGAL_LAWYER_PATENT_IP

  # Legal - Lawyer - Real Estate
  LEGAL_LAWYER_REAL_ESTATE

  # Legal - Lawyer - Tax
  LEGAL_LAWYER_TAX

  # Legal - Lawyer
  LEGAL_LAWYER

  # Legal - Others
  LEGAL_OTHERS

  # Legal - Paralegal/Law Clerk
  LEGAL_PARALEGAL_LAW_CLERK

  # Legal - Police Officer
  LEGAL_POLICE_OFFICER

  # Legal - Prison Guard
  LEGAL_PRISON_GUARD

  # Legal - Regulation Compliance
  LEGAL_REG_COMPLIANCE

  # Legal - Secretary
  LEGAL_SECRETARY

  # Logistics - Bike Courier
  LOGISTICS_BIKE_COURIER

  # Logistics - Cargo Handler
  LOGISTICS_CARGO_HANDLER

  # Logistics - Courier
  LOGISTICS_COURIER

  # Logistics - Customs Broker
  LOGISTICS_CUSTOMS_BROKER

  # Logistics - Dispatcher
  LOGISTICS_DISPATCHER

  # Logistics - Driver
  LOGISTICS_DRIVER

  # Logistics - Hazardous Materials Handler
  LOGISTICS_HAZ_MAT_HANDLER

  # Logistics - Import/Export
  LOGISTICS_IMPORT_EXPORT

  # Logistics - Inventory Management
  LOGISTICS_INVENTORY_MGMT

  # Logistics - Machine Operator
  LOGISTICS_MACHINE_OPERATOR

  # Logistics - Mail Carrier
  LOGISTICS_MAIL_CARRIER

  # Logistics - Mail Room
  LOGISTICS_MAIL_ROOM

  # Logistics - Others
  LOGISTICS_OTHERS

  # Logistics - Rail Operator
  LOGISTICS_RAIL_OPERATOR

  # Logistics - Ship Captain
  LOGISTICS_SHIP_CAPTAIN

  # Logistics - Shipper/Receiver
  LOGISTICS_SHIPPER_RECEIVER

  # Logistics - Vendor Management
  LOGISTICS_VENDOR_MGMT

  # Natural Resources - Arborist
  NAT_RESOURCES_ARBORIST

  # Natural Resources - Biologic Research
  NAT_RESOURCES_BIO_RESEARCH

  # Natural Resources - Chemist
  NAT_RESOURCES_CHEMIST

  # Natural Resources - Consultant
  NAT_RESOURCES_CONSULTANT

  # Natural Resources - Engineer
  NAT_RESOURCES_ENGINEER

  # Natural Resources - Environmental Analyst
  NAT_RESOURCES_ENVIRO_ANALYST

  # Natural Resources - Environmental Science
  NAT_RESOURCES_ENVIRO_SCIENCE

  # Natural Resources - Farmer
  NAT_RESOURCES_FARMER

  # Natural Resources - Fisherman
  NAT_RESOURCES_FISHERMAN

  # Natural Resources - Land Surveyor
  NAT_RESOURCES_LAND_SURVEYOR

  # Natural Resources - Logger
  NAT_RESOURCES_LOGGER

  # Natural Resources - Metallurgist
  NAT_RESOURCES_METALLURGIST

  # Natural Resources - Miner
  NAT_RESOURCES_MINER

  # Natural Resources - Oil Worker
  NAT_RESOURCES_OIL_WORKER

  # Natural Resources - Others
  NAT_RESOURCES_OTHERS

  # Natural Resources - Project Manager
  NAT_RESOURCES_PROJECT_MGR

  # Others
  OTHERS

  # Public Service - City Counselor
  PUBLIC_SVC_CITY_COUNSELOR

  # Public Service - Federal Member of Parliament
  PUBLIC_SVC_FEDERAL_MP

  # Public Service - Firefighter
  PUBLIC_SVC_FIREFIGHTER

  # Public Service - Imam
  PUBLIC_SVC_IMAM

  # Public Service - Municipal Clerk
  PUBLIC_SVC_MUNICIPAL_CLERK

  # Public Service - Nun
  PUBLIC_SVC_NUN

  # Public Service - Others
  PUBLIC_SVC_OTHERS

  # Public Service - Police Officer
  PUBLIC_SVC_POLICE_OFFICER

  # Public Service - Politician
  PUBLIC_SVC_POLITICIAN

  # Public Service - Priest
  PUBLIC_SVC_PRIEST

  # Public Service - Provincial MPP
  PUBLIC_SVC_PROVINCIAL_MPP

  # Public Service - Rabbi
  PUBLIC_SVC_RABBI

  # Public Service - Spiritual Leader
  PUBLIC_SVC_SPIRITUAL_LEADER

  # Public Service - Waste Removal
  PUBLIC_SVC_WASTE_REMOVAL

  # Retail - Buyer
  RETAIL_BUYER

  # Retail - Cashier
  RETAIL_CASHIER

  # Retail - Executive
  RETAIL_EXECUTIVE

  # Retail - Franchisee
  RETAIL_FRANCHISEE

  # Retail - Franchisor
  RETAIL_FRANCHISOR

  # Retail - Marketing
  RETAIL_MARKETING

  # Retail - Merchandiser
  RETAIL_MERCHANDISER

  # Retail - Night Crew
  RETAIL_NIGHT_CREW

  # Retail - Others
  RETAIL_OTHERS

  # Retail - Pharmacist
  RETAIL_PHARMACIST

  # Retail - Stock Room
  RETAIL_STOCK_ROOM

  # Retail - Store Manager
  RETAIL_STORE_MANAGER

  # Retail - Travel Agent
  RETAIL_TRAVEL_AGENT

  # Retired
  RETIRED

  # Technology - Chief Information Officer
  TECH_CIO

  # Technology - Code Developer
  TECH_CODE_DEVELOPER

  # Technology - Database Administrator
  TECH_DATABASE_ADMIN

  # Technology - Information Security
  TECH_INFORMATION_SECURITY

  # Technology - Infrastructure Administrator
  TECH_INFRASTRUCTURE_ADMIN

  # Technology - Network Architect
  TECH_NETWORK_ARCHITECT

  # Technology - Others
  TECH_OTHERS

  # Technology - Project Manager
  TECH_PROJECT_MANAGER

  # Technology - Quality Analyst
  TECH_QUALITY_ANALYST

  # Technology - Support Analyst
  TECH_SUPPORT_ANALYST

  # Technology - Systems Analyst
  TECH_SYSTEMS_ANALYST

  # Technology - Systems Architect
  TECH_SYSTEMS_ARCHITECT

  # Technology - Technical Writer
  TECH_TECHNICAL_WRITER

  # Technology - Telecom Administrator
  TECH_TELECOM_ADMIN

  # Technology - Website Developer
  TECH_WEBSITE_DEVELOPER

  # Unemployed
  UNEMPLOYED
}

# IdentityDocumentInput type represents an identification doc to be added to an account
input IdentityDocumentInput {
  # The type of id
  type: IdentityDocumentType!

  # The value of the identity document. Ex(S1234567)
  value: String!
}

# An enumeration of types that a Identification Type can be.
# DRIVERS_LICENSE,NATIONAL_ID, etc.al
enum IdentityDocumentType {
  # A CPF type of Identity Document (used in Brazil)
  CPF

  # A drivers license type of Identity Document
  DRIVERS_LICENSE

  # A medical insurance id type of Identity Document (used as secondary ID in Russia)
  MEDICAL_INSURANCE_ID

  # A national id type of Identity Document
  NATIONAL_ID

  # A passport number type of Identity Document
  PASSPORT_NUMBER

  # A pension fund id type of Identity Document (used as secondary ID in Russia)
  PENSION_FUND_ID

  # A tax identification number type of Identity Document (used as secondary ID in Russia)
  TAX_IDENTIFICATION_NUMBER

  # A temporary national id type of Identity Document
  TEMPORARY_NATIONAL_ID
}

# An enumeration of the gender of a user. This is based off of the ISO/IEC5218 standard.
enum Gender {
  # Not known
  NOT_KNOWN

  # Male
  MALE

  # Female
  FEMALE

  # Not applicable
  NOT_APPLICABLE
}

# Encapsulates all properties related to the Common Reporting Standards mandate.
# This new mandate requires PayPal to gather tax information from the user so PayPal can
# report that to the goverment.
input CommonReportingStandardsInput {
  # Whether or not the user pays taxes in a different country
  subjectToTaxOutsideLegalCountry: Boolean!

  # Encapsulates all additional information the user needs to present when paying taxes in another country
  taxDetails: [TaxDetailsInput]

  # Buyer's first name (Ex: 'John')
  firstName: String!

  # Buyer's last name (Ex: 'Smith')
  lastName: String!
}

# Encapsulates all additional information the user needs to present when paying taxes in another country
input TaxDetailsInput {
  # A two character country code -- Ex: AU
  countryCode: CountryCodes!

  # The value that is associated with the taxpayer ID -- Ex: SSN: 999-323-1234
  taxPayerIdValue: String

  # Reasons to why an user does not have a Taxpayer ID
  noTaxPayerIdReason: String
}

# Shipping methods to display to the buyer
input ShippingMethodInput {
  # Unique ID which represents this option
  id: String!

  # Type of shipping method (Ex: 'SHIPPING')
  type: ShippingMethodType!

  # Custom label to display to the buyer for this method
  label: String!

  # Amount value for this method
  amount: AmountInput!

  # Whether or not this is the selected method
  selected: Boolean!
}

# Shipping methods to display to the buyer
input CallbackShippingMethodInput {
  # Custom label to display to the buyer for this method
  label: String

  # Shipping Amount value for this method
  shippingAmount: AmountInput!

  # Whether or not this is the selected method
  selected: Boolean!

  # Default shipping method returned from cart/profile/callback url
  default: Boolean!

  # Insurance Amount value for this method
  insuranceAmount: AmountInput

  # Tax Amount value for this method
  taxAmount: AmountInput
}

# Shipping methods to display to the buyer
input ProfileShippingMethodInput {
  # Custom label to display to the buyer for this method
  label: String

  # Shipping Amount value for this method
  shippingAmount: AmountInput!

  # Whether or not this is the selected method
  selected: Boolean!

  # Default shipping method returned from cart/profile/callback url
  default: Boolean!

  # Tax Amount value for this method
  taxAmount: AmountInput

  # Shipping method that is mapped over to get the value passed to payload
  shippingMethodType: String
}

# Represents the desired data for confirming a credit card's cvv
input ConfirmCreditCardCvvInput {
  # An ecrypted credit card is as a String (Ex: 'CCA2NP3NVAPABBQ')
  encryptedId: String!

  # The last four digits of the user's credit card number as a String (Ex: '7062')
  lastFourDigits: String!

  # The credit card's cvv number as a String (Ex: '123')
  cvv: String!

  # The card issuer as a CardIssuerType(Ex: 'VISA')
  type: CardIssuerType!
}

# Card input type for adding a new card
#
# See: https://github.paypal.com/Checkout/xo-hermes-fi/blob/master/apis/addCard/inputSchema.js#L42
input AddCardInput {
  # The card issuer as a CardIssuerType (Ex: 'VISA', 'AMEX', 'MASTER', 'DISCOVER')
  type: CardIssuerType!

  # 13 to 19 digits number of a card. (Ex: '4111111111111111')
  number: String!

  # 3 or 4 digits security code of the given card (Ex: '123' or '3456') depends on the type of credit card
  securityCode: String

  # 2 digits code for expiration month for the given card (Ex: '01', '12', '10')
  expiryMonth: String

  # 4 digits code for the expiration year for the given card. (Ex, '2020')
  expiryYear: String

  # Starting month for the given card. (Ex: '01', '02', '12')
  startMonth: String

  # Starting year for the given card. (Ex: '2018')
  startYear: String

  # Some Debit Cards and Credit Cards have an Issue Number, which is normally `01`
  # unless the card has been replaced at any time.
  #
  # **Maestro cards**, for example, have an issue number.
  issueNumber: String
}

# User input type for adding a new card
#
# See: https://github.paypal.com/Checkout/xo-hermes-fi/blob/master/apis/addCard/inputSchema.js#L16
input AddCardUserInput {
  # User's first name (Ex: 'John')
  firstName: String!

  # User's last name (Ex: 'Greathouse')
  lastName: String!

  # 2 digits code for the actual date for user's birthday (Ex: '21', '05')
  dobDay: String

  # 2 digits code for the actual mnonth for user's birthday (Ex: '01', '10')
  dobMonth: String

  # 4 digits code for the actual year for user's birthady (Ex: '1988', '1963)
  dobYear: String
}

# Billing address input type for adding a new card
#
# See: https://github.paypal.com/Checkout/xo-hermes-fi/blob/master/apis/addCard/inputSchema.js#L81
input AddCardBillingAddressInput {
  # Existing billing address Id (Ex: '7100887737437037359')
  id: String

  # @Deprecated: Coarse format addresses are being phased out for portable format
  # addresses. Use addressLine1 instead for portable format.
  line1: String

  # @Deprecated: Coarse format addresses are being phased out for portable format
  # addresses. Use addressLine2 instead for portable format.
  line2: String

  # @Deprecated: Coarse format addresses are being phased out for portable format
  # addresses. Use adminArea2 instead for portable format.
  city: String

  # @Deprecated: Coarse format addresses are being phased out for portable format
  # addresses. Use adminArea1 instead for portable format.
  state: String

  # A billing address two-letter country code (Ex: 'US')
  country: String

  # @Deprecated: Coarse format addresses are being phased out for portable format
  # addresses. Use adminArea1 instead for portable format.
  postalCode: String

  # Portable address: An address first line street address
  addressLine1: String

  # Portable address: An address second line street address
  addressLine2: String

  # Portable address: An address third line street address
  addressLine3: String

  # Portable address: An address first line admin area
  adminArea1: String

  # Portable address: An address second line admin area
  adminArea2: String

  # Portable address: An address third line admin area
  adminArea3: String

  # Portable address: An address forth line admin area
  adminArea4: String

  # Portable address: An address two-letter country code
  countryCode: String
}

# PotentialCard input type represents a card to be added to an account
input PotentialCardInput {
  # potential card uuid  (Ex: 'uuid1234'). Unique identifier of the potential card.
  id: String!

  # 3 or 4 digits security code of the given card (Ex: '123' or '3456') depends on the type of credit card
  cardVerificationCode: String!
}

# Types of client config product code
# https://github.paypal.com/ApiSpecifications-R/CommonComponentsSpecification/blob/master/v4/schema/json/openapi-2.0/client_configuration.json#L9
enum ProductCodeType {
  # The payment acceptance solution is a billing agreement.
  BILLING_AGREEMENTS

  # Billing plan and subcription solution
  BILLING_SUBSCRIPTIONS

  # The payment acceptance solution is credit card.
  DIRECT_CREDIT_CARD

  # The payment acceptance solution is express checkout.
  EXPRESS_CHECKOUT

  # The payment acceptance solution is website payment standard.
  WEBSITE_PAYMENTS_STANDARD
}

# Types of client config integration artifact
enum IntegrationArtifactType {
  # Use this when Merchant has integrated with an old version of BRAINTREE_VZERO that does not ingest JS_V3 or V4.
  BRAINTREE_VZERO

  # Checkout.js v3
  JS_V3

  # Checkout.js v4
  JS_V4

  # Use this when Merchant has integrated using Future Payments Mobile Integration.
  NATIVE_SDK

  # Integration type is not defined
  NONE

  # PayPal Javascript SDK
  PAYPAL_JS_SDK
}

# Types of client config user experience
enum UserExperienceFlowType {
  # The consumer's browser does a 302 redirect to <a
  # href="https://www.paypal.com/us/home">paypal.com</a> from the third-party site.
  FULL_PAGE_REDIRECT

  # The flow is initated via Honey modal
  HONEY_MODAL

  # Incontext window
  INCONTEXT

  # Inline iframe
  INLINE

  # Native SDK
  NATIVE

  # The flow is initiated via Paypal Consumer app
  PAYPAL_CONSUMER_APP

  # Implicit login on web channel
  WEB_LLS
}

# Types of client config product flow
# https://github.paypal.com/ApiSpecifications-R/CommonComponentsSpecification/blob/master/v4/schema/json/openapi-2.0/product_experience.json#L305
enum ProductFlowType {
  # Accelerated Checkout Flow
  ACCELERATED_CHECKOUT

  # A buyer signing up for a billing agreement.
  BUYER_APPROVAL_BILLING_AGREEMENT_CREATE

  # A buyer signing up for a Subscription.
  BUYER_APPROVAL_SUBSCRIPTIONS_CREATE

  # A purchase flow which buyer also approves creation of a billing agreement.
  BUYER_APPROVAL_BILLING_AGREEMENT_WITH_PURCHASE

  # An applicant applies for a credit product from a checkout session.
  CREDIT_APPLIED_AT_CHECKOUT

  # Identifies transactions to a crowdfunded money pool.
  CROWDFUNDING_CAMPAIGNS

  # Flow identifier for donation collected as crowd funding for a charity.
  CROWDFUNDING_CAMPAIGNS_CHARITIES

  # Flow identifier to say donation flow from button code we share with merchant.
  DONATE_BUTTON

  # Flow identifier to say donation flow in regualar internal from button code shared with merchant.
  DONATE_BUTTON_RECURRING

  # Flow identifier to say crowd funding donation flow from button code we share with merchant.
  DONATE_BUTTON_CAMPAIGN

  # Flow identifier to say donation collected through PayPal Giving Fund.
  FUNDRAISER_DIRECT

  # Flow identifier to say donation collected through PayPal Giving Fund for a partner.
  FUNDRAISER_PARTNER

  # A purchase flow where buyer is redirected from Hosted Sole Solution checkout application
  HOSTED_SOLE_SOLUTION

  # A web application handles the user's checkout interaction.
  HERMES

  # The application handles the PayPal Plus flow.
  PAYPAL_PLUS

  # Smart Payment Buttons
  SMART_PAYMENT_BUTTONS
}

# Types of buyer intent
enum BuyerIntentType {
  # pay
  PAY

  # pay_with_different_account
  PAY_WITH_DIFFERENT_ACCOUNT

  # pay_with_different_funding_shipping
  PAY_WITH_DIFFERENT_FUNDING_SHIPPING
}

# The channel (type of browser/device) that the user is coming from
# https://github.paypal.com/ApiSpecifications-R/CommonComponentsSpecification/blob/master/v4/schema/json/openapi-2.0/product_experience.json#L232
enum ProductChannel {
  # A native app on a mobile device.
  MOBILE_APP

  # A browser on a mobile device.
  MOBILE_WEB

  # A browser on a PC.
  WEB
}

# Types of product feature
# https://github.paypal.com/ApiSpecifications-R/CommonComponentsSpecification/blob/master/v4/schema/json/openapi-2.0/client_configuration.json#L163
enum ProductFeatureType {
  # The payment product features a payment for donations.
  DONATION
}

# CCO Input
input ClientConfigInput {
  # Type of client config product code
  productCode: ProductCodeType

  # Type of client config button funding source
  fundingSource: ButtonFundingSourceType

  # Merchant integration (Ex: sdk, v3, v4..)
  integrationArtifact: IntegrationArtifactType

  # How the flow was initiated (Ex: Honey, redirect, inline iframe..)
  userExperienceFlow: UserExperienceFlowType

  # Flow type (Ex: buyer BA, suscription, hermes, SPB, Donation
  productFlow: ProductFlowType

  # Buyer pay intent type
  buyerIntent: BuyerIntentType

  # Channel (Ex: Web, app) If not provided, will attempt to be detected based on request info.
  channel: ProductChannel

  # ButtonSessionID
  buttonSessionID: String

  # The payment product features a payment for donations
  productFeature: ProductFeatureType
}

# Payment Source object to store in vault. Currently only supporting Card but will also accept paypal, venmo, and apple pay
input PaymentSource {
  # card
  card: Card
}

# Card
input Card {
  # number
  number: String!

  # expiry
  expiry: String!

  # name
  name: String

  # cvv
  securityCode: String

  # billing address
  billingAddress: BillingAddress
}

# BillingAddress
input BillingAddress {
  # postal code
  postalCode: String
}

# response object from the v3/vault/setup-token endpoint. This particular object is a token definition
type VaultSetupTokenResponse {
  # id of the setup token
  id: String

  # customer
  customer: Customer

  # status of token
  status: Status

  # links
  links: [Link]
}

# customer object, currently consists of only a customer id
type Customer {
  # id
  id: String
}

# status of token
enum Status {
  # A setup token is initialized with minimal information, more data must be added to the setup-token to be vaulted
  CREATED

  # buyer contingency
  PAYER_ACTION_REQUIRED

  # Setup token is ready to be vaulted. If a buyer approval contigency was returned, it is has been approved
  APPROVED

  # The payment token has been vaulted
  VAULTED

  # A vaulted payment method token has been tokenized for short term (one time) use
  TOKENIZED
}

# object that includes links to perform additional actions on a token
type Link {
  # href
  href: String

  # rel
  rel: String

  # method
  method: String

  # encType
  encType: String
}

# Credit Incentive Details
input CreditIncentiveDetailsInput {
  # Incentive offer ID
  offerProgramId: String

  # Incentive offer value
  offerValue: String

  # Incentive offer currency code
  offerCurrencyCode: String

  # Incentive offer program code
  offerProgramCode: String

  # Touchpoint of incentive offer
  touchpoint: String

  # Headline text
  headlineText: String

  # Offer text 1
  offerText1: String

  # Offer text 2
  offerText2: String

  # Terms link
  termsLink: String

  # Terms link text
  termsLinkText: String

  # Terms text
  termsText: String

  # Buy item ID, same as reference ID
  buyItemId: String
}

# Mayfly response from redirecting back from CAPE
type CreditRedirectMayflyResponse {
  # Credit decision
  credit_decision: String

  # Credit FI ID
  financial_instrument_id: String

  # Installment details
  financial_instrument_details: CreditRedirectFinancialInstrumentDetails

  # Is reuse
  is_reuse: Boolean

  # Login details
  login_details: CreditRedirectLoginDetails

  # User selected shipping address
  user_selected_address_id: String

  # User selected preferred shipping address
  user_selected_preferred_shipping_address_id: String
}

# Installment details
type CreditRedirectFinancialInstrumentDetails {
  # Financing code
  financing_code: String

  # APR
  apr: String

  # Terms
  term: Int

  # Credit type
  credit_type: String

  # PayPal subsidy
  paypal_subsidy: Boolean

  # Monthly percentage rate
  monthly_percentage_rate: String

  # Total cost
  total_cost: String

  # Total interest
  total_interest: String

  # Monthly payment
  monthly_payment: String

  # Currency
  currency: String
}

# User account details
type CreditRedirectLoginDetails {
  # Whether a new account was created
  new_account_created: Boolean

  # PP account number
  paypal_account_number: String
}

# Credit FI details
input CreditFinancialInstrumentDetailsInput {
  # Financing code
  financingCode: String

  # APR
  apr: String

  # Terms
  term: Int

  # Credit type
  creditType: String

  # PayPal subsidy
  paypalSubsidy: Boolean

  # Monthly percentage rate
  monthlyPercentageRate: String

  # Total cost
  totalCost: String

  # Total interest
  totalInterest: String

  # Monthly payment
  monthlyPayment: String

  # Currency
  currency: String
}

# The fiancing properties of selcted funding source
input FundingInstrumentFinancingInput {
  # Funding instrument's ID (Ex: 'BA8JUE35JC6JBU4')
  id: ID

  # Identifier of the financing option assocaited to the funding instrument
  financingCode: String
}

# An enumeration of confirmation methods in 3DS 2.0 stack.
# ONLINE_SECURE_AUTHENTICATION, ONE_RANDOM_CHARGE_CONFIRMATION, TWO_RANDOM_CHARGE_CONFIRMATION
enum ThreedsConfirmationMethod {
  # Used in all web flows - hermes xoon etc.
  ONLINE_SECURE_AUTHENTICATION

  # possible enum value, do not use for hermes, xoon
  ONE_RANDOM_CHARGE_CONFIRMATION

  # possible enum value, do not use for hermes, xoon
  TWO_RANDOM_CHARGE_CONFIRMATION
}

# 3DS new switch inbound service: sender context for 3ds FI create-confirmation call
input ThreedsSenderContextInput {
  # Indicates Header Information of the browser used during the transaction
  browserDetails: ThreedsBrowserDetailsInput!

  # Channel where 3DS is performed - MOBILE, COMPUTER, TABLET, UNKNOWN
  paymentMode: ThreedsPaymentDevice!

  # Indicates channel of the device - SDK,BROWSER,3RI
  deviceChannel: String!
}

# 3DS new switch inbound service: browser details for 3ds FI create-confirmation call
input ThreedsBrowserDetailsInput {
  # Indicates browser color used during the transaction -
  # UNKNOWN,1_BIT,4_BITS,8_BITS,15_BITS,16_BITS,24_BITS,32_BITS,48_BITS - getting
  # it as Int and form internally
  colorDepth: Int!

  # Indicates if browser is Java enabled or not
  javaEnabled: Boolean

  # Indicates browser language set during the transaction
  language: String

  # Indicates browser screen height set during the transaction
  screenHeight: Int!

  # Indicates browser screen width set during the transaction
  screenWidth: Int!

  # Indicates Time Zone used during the transaction
  timeZoneOffset: Int!

  # window size - FULL_PAGE
  windowSize: String

  # user  agent - used during transaction to override the header value
  userAgent: String
}

# An enumeration of paymentMode in 3DS 2.0 stack.
enum ThreedsPaymentDevice {
  # pass when the device is Mobile
  MOBILE

  # pass when the device is a Computer
  COMPUTER

  # pass when the device is a Tablet
  TABLET

  # pass when the device type is not known
  UNKNOWN
}

# 3DS new switch inbound service: Creates a confirmation resource for a given card
# URL: /v1/wallet/card-accounts/{card_account_id}/confirmations
# card-account.create-confirmation
type ThreedsCreateConfirmationResponse {
  # Brand of the Card
  brand: String

  # FI confirmation ID
  confirmationId: String

  # FI confirmation method - ONLINE_SECURE_AUTHENTICATION ONE_RANDOM_CHARGE_CONFIRMATION TWO_RANDOM_CHARGE_CONFIRMATION
  confirmationMethod: ThreedsConfirmationMethod

  # The encoded payment request generated by Centinel.
  payload: String

  # Indicates whether online authentication is required or not. Only applicable for 3DS
  redirectUrl: GenericURL

  # Unique ID generated by this API. This is populated only when 3DS is required
  # and request is not in transactional context. Only applicable for 3DS
  referenceId: String

  # Over all 3DS Status - SUCCESS, FAILED
  status: String

  # The fully qualified URL to redirect the Consumer to complete the Consumer
  # Authentication transaction using the Cardinal Cruise API integration.
  stepUpUrl: GenericURL

  # The ID of the transaction that is associated with this 3D Secure authentication. Only applicable for 3DS
  transactionId: String

  # 3DS version 1.0/2.0. Only applicable for 3DS
  version: String
}

# 3DS new switch inbound service: Updates a confirmation resource for a given card confirmation respource
# URL: /v1/wallet/card-accounts/{card_account_id}/confirmations/{confirmation_id}/update
# card-account.update-confirmation
type ThreedsUpdateConfirmationResponse {
  # 3DS version 1.0/2.0. Only applicable for 3DS
  version: String

  # FI confirmation method - ONLINE_SECURE_AUTHENTICATION ONE_RANDOM_CHARGE_CONFIRMATION TWO_RANDOM_CHARGE_CONFIRMATION
  confirmationMethod: ThreedsConfirmationMethod

  # Over all 3DS Status
  status: String
}

# Three DS LookUp payload
input threedsLookUpPayload {
  # reference ID for the 3DS of the Card
  threeDSReferenceId: String!

  # clients identification for downstream services. EX: HERMES, HELIOS, etc
  flowId: String!

  # encrypted card number that needs to be passed to ACE which is returned in 3DS contingency from post of checkoutsession
  encryptedCardNumber: String!

  # credit card Id - PayPal internal credit card id
  creditCardId: String

  # The card financial instrument (FI) brand.
  cardBrand: CardIssuerType

  # expiration month
  expirationMonth: String!

  # expiration year - 4 digit year
  expirationYear: String!

  # card usage - possible values CREDIT or DEBIT
  cardUsage: FundingInstrumentSubType

  # @Deprecated: This value is determined based on data in the checkout session
  cardTransactionCharacteristics: CardTransactionType

  # billing address of card
  billingAddress: AddressInput

  # merchant category code
  merchantCategoryCode: String

  # Reason for 3DS contingency
  threeDSContingencyReason: ThreedsContingencyReasonType

  # Source for 3DS contingency
  threeDSContingencySource: ThreedsContingencySourceType

  # Unbranded Payment Indicator
  unbrandedPaymentIndicator: Boolean
}

# An enumeration of card transaction characteristics. PRE_AUTH, FINAL_AUTH, RECURRING_PAYMENT, UNKNOWN
enum CardTransactionType {
  # The card characteristics is for Pre Auth
  PRE_AUTH

  # The card characteristics is for Final Auth
  FINAL_AUTH

  # The card characteristics is for RECURRING_PAYMENT
  RECURRING_PAYMENT

  # The card characteristics is for not known
  UNKNOWN
}

# Product Details
input ProductDetails {
  # Product code
  productCode: ThreedsProductCode

  # Product Feature
  productFeature: ThreedsProductFeature

  # Api
  api: Threedsapi

  # Integration Artifact
  integrationArtifact: ThreedsIntegrationArtifacts

  # Experience
  userExperienceFlow: ThreedsUserExperienceFlow

  # Entry Point
  entryPoint: ThreedsEntryPoint

  # Payment Method - reused  entry point
  paymentMethod: ThreedsEntryPoint

  # Product Flow
  productFlow: ThreedsProductFlow
}

# An enumeration of Product Code in 3DS 2.0 stack.
enum ThreedsProductCode {
  # Express Checkout
  EXPRESS_CHECKOUT

  # WPS
  WEBSITE_PAYMENT_STANDARD

  # DCC
  DIRECT_CREDIT_CARD

  # BA
  BILLING_AGREEMENTS

  # SUBSCRIPTIONS
  BILLING_SUBSCRIPTIONS

  # Masspay
  PAYOUTS
}

# An enumeration of Product feature in 3DS 2.0 stack.
enum ThreedsProductFeature {
  # Orders
  ORDERS

  # PayPal Complete Payments
  PAYPAL_COMPLETE_PAYMENTS

  # Direct Credit Card (DCC / UCC)
  DIRECT_CREDIT_CARD_API

  # None
  NONE
}

# An enumeration of Product api in 3DS 2.0 stack.
enum Threedsapi {
  # Payment V1
  PAYMENTS_V1

  # Order V1
  ORDER_V1

  # Order V2
  ORDER_V2

  # Legacy apis
  LEGACY_CHECKOUT_API

  # Billing V1
  BILLING_V1

  # Legacy Billing apis
  LEGACY_BILLING_API

  # Subscriptions V1
  SUBSCRIPTIONS_V1

  # RP
  RECURRING_PAYMENTS_V1

  # Legacy RP
  LEGACY_RECURRING_PAYMENTS

  # None
  NONE
}

# An enumeration of Product integration artifact in 3DS 2.0 stack.
enum ThreedsIntegrationArtifacts {
  # PayPal sdk
  PAYPAL_JS_SDK

  # SPB V3
  JS_V3

  # SPB V4
  JS_V4

  # BT VZERO
  BRAINTREE_VZERO

  # Native SDK
  NATIVE_SDK

  # None
  NONE
}

# An enumeration of Product experience flow in 3DS 2.0 stack.
enum ThreedsUserExperienceFlow {
  # Full Page - The consumer's browser does a 302 redirect to <a
  # href='https://www.paypal.com/us/home'>paypal.com</a> from the third-party site.
  FULL_PAGE_REDIRECT

  # InContext - The buyer interacts with <a
  # href='https://www.paypal.com/us/home'>paypal.com</a> in an iframe or pop up
  # window, which is a modal that is outside or hovers over the existing merchant experience.
  INCONTEXT

  # Inline - The buyer interacts with <a
  # href='https://www.paypal.com/us/home'>paypal.com</a> through an iframe on the
  # merchant site, and is in line with the existing merchant experience.
  INLINE

  # Native - The buyer interacts with PayPal through PayPal's native SDK.
  NATIVE

  # Full Page - The buyer interacts with PayPal by opening PayPal.com directly on browser
  FULL_PAGE
}

# An enumeration of Product entry point in 3DS 2.0 stack.
enum ThreedsEntryPoint {
  # Venmo - The transaction is initiated from Venmo.
  PAY_WITH_VENMO

  # Card - The transaction is initiated from a credit card.
  PAY_WITH_CARD

  # PayPal - The transaction is initiated from PayPal.
  PAY_WITH_PAYPAL

  # Credit - The transaction is initiated from PayPal credit.
  PAY_WITH_PAYPAL_CREDIT

  # Alternate Payment - The transaction is initiated from Alternative Payment AliPay.
  PAY_WITH_ALTPAY_ALIPAY

  # Alternate Payment - The transaction is initiated from Alternative Payment Bancontact.
  PAY_WITH_ALTPAY_BANCONTACT

  # Alternate Payment - The transaction is initiated from Alternative Payment Boleto.
  PAY_WITH_ALTPAY_BOLETO

  # Alternate Payment - The transaction is initiated from Alternative Payment Boletobancario.
  PAY_WITH_ALTPAY_BOLETOBANCARIO

  # Alternate Payment - The transaction is initiated from Alternative Payment EPS.
  PAY_WITH_ALTPAY_EPS

  # Alternate Payment - The transaction is initiated from Alternative Payment iDeal.
  PAY_WITH_ALTPAY_IDEAL

  # Alternate Payment - The transaction is initiated from Alternative Payment MyBank.
  PAY_WITH_ALTPAY_MYBANK

  # Alternate Payment - The transaction is initiated from Alternative Payment OXXO.
  PAY_WITH_ALTPAY_OXXO

  # Alternate Payment - The transaction is initiated from Alternative Payment P24.
  PAY_WITH_ALTPAY_P24

  # Alternate Payment - The transaction is initiated from Alternative Payment Sofort.
  PAY_WITH_ALTPAY_SOFORT

  # Alternate Payment - The transaction is initiated from Alternative Payment WeChatPay.
  PAY_WITH_ALTPAY_WECHATPAY

  # Alternate Payment - The transaction is initiated from Alternative Payment Zimpler.
  PAY_WITH_ALTPAY_ZIMPLER

  # Alternate Payment - The transaction is initiated from Alternative Payment Multibanco.
  PAY_WITH_ALTPAY_MULTIBANCO

  # Alternate Payment - The transaction is initiated from Alternative Payment Satispay.
  PAY_WITH_ALTPAY_SATISPAY

  # Alternate Payment - The transaction is initiated from Alternative Payment Paidy.
  PAY_WITH_ALTPAY_PAIDY

  # Unknown
  UNKNOWN
}

# An enumeration of Product flow in 3DS 2.0 stack.
enum ThreedsProductFlow {
  # Legacy Checkout API Flow
  LEGACY

  # Hermes - A web application handles the user's checkout interaction.
  HERMES

  # Prox - An eBay application handles the user's PayPal checkout experience.
  PROX

  # SPB
  SMART_PAYMENT_BUTTONS

  # HSS
  HOSTED_SOLE_SOLUTION

  # HSS Payflow
  HOSTED_SOLE_SOLUTION_PAY_FLOW

  # PP+
  PAYPAL_PLUS

  # BA Create - A buyer signing up for a billing agreement
  BUYER_APPROVAL_BILLING_AGREEMENT_CREATE

  # BA Modify - A billing agreement modification flow intiated by consumer on paypal.com
  CONSUMER_EXP_BILLING_AGREEMENT_MODIFY

  # BA with purchase - A purchase flow which buyer also approves creation of a billing agreement
  BUYER_APPROVAL_BILLING_AGREEMENT_WITH_PURCHASE

  # Subscriptions Create- A buyer signing up for a Subscription.
  BUYER_APPROVAL_SUBSCRIPTIONS_CREATE

  # Subscriptions Modify - A subscription modification flow intiated by consumer on paypal.com.
  CONSUMER_EXP_SUBSCRIPTIONS_MODIFY
}

# Partner Details
input PartnerDetails {
  # Partner / facilitator Account Number
  accountNumber: String

  # account status
  accountStatus: AccountStatus

  # is restricted account
  restrictedAccount: Boolean

  # account type
  accountType: AccountType

  # email address
  emailAddress: String

  # party id
  partyId: String

  # phone info
  phoneInfo: PhoneInput

  # Business information
  businessInformation: BusinessInformation
}

# An enumeration of user account status. (Ex: 'OPEN / CLOSED / LOCKED / UNKNOWN')
enum AccountStatus {
  # User account status is OPEN
  OPEN

  # User account status is CLOSED
  CLOSED

  # User account status is LOCKED
  LOCKED

  # User account status is UNKNOWN
  UNKNOWN
}

# An enumeration of user account type. (Ex: 'ANONYMOUS / GUEST / PERSONAL / BUSINESS')
enum AccountType {
  # User account is an anonymous account
  ANONYMOUS

  # User account is a guest account
  GUEST

  # User account is a personal account
  PERSONAL

  # User account is a business account
  BUSINESS
}

# Business Information
input BusinessInformation {
  # Business name
  businessName: String

  # Soft descriptor
  softDescriptor: String

  # Notify url
  notifyUrl: String

  # Merchant category code
  merchantCategoryCode: String

  # Business tagging id
  businessTaggingId: String
}

# Encapsulates all properties related to a ThreeDSLookUpResponse.
type ThreeDSLookUpResponse {
  # The transaction handle, transaction ID, and instruction ID.
  transactionId: String

  # The 3D Secure authentication version that was used to process the transaction.
  # (e.g. 1.0.2 or 2.1.0) It is usually an output from Cardinal authentication APIs.
  threeDSVersion: String

  # Status of authentication eligibility. If not Y, then the cardholder is not eligible for authentication.
  # Possible values are: Y: Enrolled N: Not enrolled U: Cardholder authentication unavailable.
  enrollmentStatus: EnrollmentStatusType

  # Indicates liability of 3DS transaction is shifted to issuer.
  liabilityShift: Boolean

  # This is the raw value received from the external source.
  # This should be passed on the authorization transaction to the Gateway/Processor.
  threeDSEcommerceIndicator: String

  # The card financial instrument (FI) brand.
  cardBrandProcessed: CardIssuerType

  # Transaction Signature status identifier.
  # Possible Enums values are
  #   "YES": "Indicates that the signature of the PARes has been validated
  # successfully and the message contents can be trusted"
  #   "NO": "Indicates that the PARes could not be validated."
  signatureVerificationStatus: SignatureVerificationStatus

  # Overall 3DS status of the transaction
  threeDSStatus: String

  # The payment authentication parameter to send to the third-party URL during redirect.
  paymentAuthenticationRequest: String

  # Clients embed access control server (ACS) URL in payload while redirecting to complete 3DS challenge with issuer.
  acsURL: GenericURL

  # The third-party URL to which to redirect the card holder to complete the 3D Secure authentication.
  redirectURL: GenericURL

  # The normalized description for the transaction status.
  transactionStatusCode: String

  # The response message.
  transactionStatusMessage: String

  # Unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
  threeDsServerTransactionId: String

  # Provides additional information as to why the transaction status result has the specific value.
  threeDsAuthenticationReason: String

  # Universal cardholder presence indicator (e.g. whether UCAF is supported, whether it is populated, etc.).
  threeDSUcafIndicator: String

  # The outcome of the issuer's authentication.
  authenticationThreeDSStatus: String

  # The processor trace number.
  threeDsProcessorTraceNumber: String

  # The CAVV value is a cryptographic value calculated by the issuer.
  # The CAVV is unique to the cardholder and to the transaction that was authenticated.
  # Also known as CAVV for Visa VbV and JCB JSecure.
  cavv: String

  # Indicates the algorithm used to generate the CAVV/AAV value.
  cavvAlgorithm: String

  # Xid field contains the vsec transaction ID (XID) that is a unique number
  # generated by the merchant server to identify the transaction.
  xid: String

  # The PayPal acquiring BIN to be used for authorization.
  paypalAcquiringBin: String

  # The PayPal acquiring MID to be used for authorization.
  paypalAcquiringMid: String

  # Unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction.
  accessControlServerTransactionId: String

  # Unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
  dsTransactionId: String

  # Pares Status
  paresStatus: String
}

# Supported Enrollment Status enum values
enum EnrollmentStatusType {
  # Bank is participating in 3-D Secure protocol and will return the ACSUrl
  YES

  # Bank is not participating in 3-D Secure protocol
  NO

  # The DS or ACS is not available for authentication at the time of the request
  UNAVAILABLE

  # Merchant authentication rule is triggered to bypass authentication in this use case
  BYPASS

  # Unknown
  UNKNOWN
}

# Lists possible transaction Signature status identifier.
enum SignatureVerificationStatus {
  # Indicates that the signature of the PARes (Payment Authentication Response)
  # has been validated successfully and the message contents can be trusted
  YES

  # Indicates that the PARes could not be validated.
  NO
}

# Encapsulates all properties related to a ThreeDSLookUp.
type ThreeDSAuthenticateResponse {
  # The Electronic Commerce Indicator (ECI).
  # MasterCard: 01: Merchant Liability 02: Issuer Liability Visa: 05: Issuer
  # Liability 06: Issuer Liability 07: Merchant Liability.
  # Possible Enums values are
  #   "NO_SECURITY": "No security. This matches the raw ECI flag of 00 or 07."
  #   "CHANNEL_ENCRYPTION": "Channel encryption."
  #   "RECURRING_TRANSACTION": "Recurring transaction."
  #   "APPROVED_AUTHENTICATION": "Approved authentication. This matches the raw ECI flag of 02 or 05."
  #   "SINGLE_PAYMENT_TRANSACTION": "Single payment transaction."
  #   "INSTALLMENT_PAYMENT": "Installment payment."
  #   "ATTEMPTED_AUTHENTICATION": "Attempted authentication. This matches the raw ECI flag of 01 or 06."
  #   "SECURITY_NO_AUTHENTICATION": "Security no authentication."
  eciIndicator: String

  # Universal cardholder presence indicator (e.g. whether UCAF is supported, whether it is populated, etc.).
  # Possible Enums values are
  #   "NOT_SUPPORTED": "Not supported."
  #   "SUPPORTED_NOT_POPULATED": "Supported, not populated."
  #   "SUPPORTED_POPULATED": "supported and populated."
  #   "SUPPORTED_STATIC_AVV_POPULATED": "Supported static avv populated."
  #   "ISSUER_RISK_DECISION": "Issuer risk decision."
  #   "MERCHANT_RISK_DECISION": "Merchant risk decision."
  #   "PARTIAL_SHIPMENT_OR_RECURRING_PAYMENT": "Partial shipment Or Recurring payment."
  ucafIndicator: String

  # The outcome of the issuer's authentication.
  # Possible values are: Y: Successful; merchant is protected. N: Failed; no protection.
  #   U: Unable to complete; no protection. A: Successful; merchant is protected.
  authenticationThreeDSStatus: String

  # The 3D Secure authentication version that was used to process the transaction.
  # (e.g. 1.0.2 or 2.1.0) It is usually an output from Cardinal authentication APIs.
  threeDSVersion: String

  # The transaction handle, transaction ID, and instruction ID.
  threeDSTransactionId: String

  # Indicates the type of authentication that was used to challenge the card holder.
  # Possible Enums values are
  #   "STATIC": "Indicates Fixed Password."
  #   "DYNAMIC": "Indicates One Time Password, could be single step or multi step."
  #   "OUT_OF_BAND": "Indicates Biometric, over the phone."
  #   "DECOUPLED": "Indicates decoupled authentication."
  authenticationType: String

  # Transaction Signature status identifier.
  # Possible Enums values are
  #   "YES": "Indicates that the signature of the PARes has been validated
  # successfully and the message contents can be trusted"
  #   "NO": "Indicates that the PARes could not be validated."
  signatureVerificationStatus: SignatureVerificationStatus

  # This flag is an indicator whether to throw 3DS contingency or not.
  skipThreeDSEnforcement: Boolean

  # The card financial instrument (FI) brand.
  cardBrandProcessed: CardIssuerType

  # This is the raw value received from the external source.
  # This should be passed on the authorization transaction to the Gateway/Processor.
  threeDSEcommerceIndicator: String

  # This is the raw value received from the external source. Transaction Signature status identifier.
  # Possible Enums values are
  #   "Y": "Successful - Signature validation is successful."
  #   "N": "Failed - Indicates that the payload could not be validated."
  threeDSSignatureStatus: String

  # This is the raw value received from the external source.
  # Universal Cardholder Authentication Field (UCAF) Indicator value provided by the issuer.
  # Possible Enums values are
  #   "0": "Non-SecureCode transaction, bypassed by the Merchant."
  #   "1": "Merchant-Only SecureCode transaction."
  #   "2": "Fully authenticated SecureCode transaction."
  threeDSUcafIndicator: String

  # Indicates liability of 3DS transaction is shifted to issuer.
  liabilityShift: Boolean

  # Overall 3DS status of the transaction.
  # Possible Enums values are
  #   "UNKNOWN": "The 3DS transaction status is unknown."
  #   "SUCCESS": "The 3DS transaction is approved or accepted."
  #   "DECLINE": "The 3DS transaction is declined by external entity or per internal business rules."
  #   "SYSTEM_ERROR": "The 3DS transaction is error due to external or internal system issues."
  #   "CHALLENGE_REQUIRED": "Indicates 3DS challenge required."
  threeDSStatus: String

  # Status of authentication eligibility. If not Y, then the cardholder is not eligible for authentication.
  # Possible values are: Y: Enrolled N: Not enrolled U: Cardholder authentication unavailable.
  enrollmentStatus: EnrollmentStatusType

  # Provides additional information as to why the transaction status result has the specific value.
  threeDsAuthenticationReason: String

  # The CAVV value is a cryptographic value calculated by the issuer.
  # The CAVV is unique to the cardholder and to the transaction that was authenticated.
  # Also known as CAVV for Visa VbV and JCB JSecure.
  cavv: String

  # Indicates the algorithm used to generate the CAVV/AAV value.
  cavvAlgorithm: String

  # Xid field contains the vsec transaction ID (XID) that is a unique number
  # generated by the merchant server to identify the transaction.
  xid: String

  # The PayPal acquiring BIN to be used for authorization.
  paypalAcquiringBin: String

  # The PayPal acquiring MID to be used for authorization.
  paypalAcquiringMid: String

  # Unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction.
  accessControlServerTransactionId: String

  # Unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
  dsTransactionId: String

  # Pares Status
  paresStatus: String
}

# Allowed statuses for resolveThreeDsContingency status
enum ResolveThreeDsContingencyStatus {
  # 3DS resolution flow was successful
  SUCCESS

  # 3DS resolution flow failed due to error or decline
  FAILURE
}

# Bank Account Beneficiary Input
input BankAccountBeneficiaryInput {
  # The first name of the bank account's beneficiary.
  firstName: String

  # The last name of the bank account's beneficiary.
  lastName: String

  # The birth date of the bank account's beneficiary
  birthDate: DateOfBirth

  # Phone number of the bank account's beneficiary
  phone: PhoneInput
}

# Extra arguments needed for Add Bank flow.
input BankAccountAuthorizationsInput {
  # Indicates whether the bank has to resolve sepa authorization
  acceptSepa: Boolean
}

# Encapsulates the status of initiate otp confirmation response.
type InitiateOtpConfirmationResponse {
  # Overall Status of initiate otp call
  status: String
}

# Complete card otp confirmation input for otp verification for a new card.
input CompleteCardOtpConfirmationInput {
  # 3 or 4 digits security code of a card (Ex: '123')
  securityCode: String

  # Expiration date of a card (Ex: '02/2021')
  expirationDate: String

  # one time password code entered by the user (Ex: 1234)
  otpCode: String!
}

# Encapsulates the status of complete otp confirmation response.
type CompleteOtpConfirmationResponse {
  # Overall status of complete otp call
  status: String
}

# Phone confirmation response
type PhoneConfirmationResponse {
  # Verification ID from identity2faserv
  id: String

  # Phone confirmation state
  state: PhoneConfirmationState

  # Expiry of the phone confirmation session
  validUntil: GenericDate
}

# Phone confirmation state
enum PhoneConfirmationState {
  # PENDING
  PENDING

  # CONFIRMED
  CONFIRMED

  # UNKNOWN
  UNKNOWN
}

# Venmo Shadow Guest account details needed for Checkout
type VenmoGuestUser {
  # Venmo User's full name
  name: PersonName

  # Venmo User's email as shown on ther Venmo app profile
  email: Email

  # The digital CVV of an Open Loop Token instrument
  dcvv: String

  # The paypal Instrument ID associated to the Venmo Guest Account
  instrumentID: String

  # Venmo Guest Account Access Token
  accessToken: String
}

# Schema for Apple Pay payment token
input ApplePayPaymentToken {
  # Payment method: 'debit' | 'credit' | 'prepaid' | 'store'
  paymentMethod: ApplePayPaymentMethod

  # Transaction identifier
  transactionIdentifier: String

  # Payment data
  paymentData: JSON
}

# Schema for Apple Pay payment method
input ApplePayPaymentMethod {
  # A string, suitable for display, that describes the card.
  displayName: String

  # Name of the payment network backing the card
  network: String

  # A value representing the card's type of payment.
  type: String

  # The payment pass object currently selected to complete the payment.
  paymentPass: ApplePayPaymentPass

  # Billing contact associated with the card.
  billingContact: ApplePayPaymentContact
}

# Schema for Apple Pay payment method
input ApplePayPaymentPass {
  # The unique identifier for the primary account number for the payment card.
  primaryAccountIdentifier: String

  # A version of the primary account number suitable for display in your UI.
  primaryAccountNumberSuffix: String

  # The unique identifier for the device-specific account number.
  deviceAccountIdentifier: String

  # A version of the device account number suitable for display in your UI.
  deviceAccountNumberSuffix: String

  # Activation state: activated | requiresActivation | activating | suspended | deactivated
  activationState: String
}

# Schema for Apple Pay contact
input ApplePayPaymentContact {
  # Phone number from Apple
  phoneNumber: String

  # Email address from Apple
  emailAddress: String

  # First name from Apple
  givenName: String

  # Last name from Apple
  familyName: String

  # Phonetic first name from Apple
  phoneticGivenName: String

  # Phonetic last name from Apple
  phoneticFamilyName: String

  # Address from Apple
  addressLines: [String]

  # Township from Apple
  subLocality: String

  # City from Apple
  locality: String

  # Postal code from Apple
  postalCode: String

  # County from Apple
  subAdministrativeArea: String

  # State from Apple
  administrativeArea: String

  # Country from Apple
  country: String

  # Country code from Apple
  countryCode: CountryCodes
}

# Google Pay Payment Method Data
# See: https://developers.google.com/pay/api/web/reference/response-objects#PaymentMethodData
input GooglePayPaymentMethodData {
  # Description: User-facing message to describe the payment method that funds this transaction.
  description: String

  # Tokenization Data: Payment tokenization data for the selected payment method.
  tokenizationData: GooglePayTokenizationData

  # Type: PaymentMethod type selected in the Google Pay payment sheet.
  type: String

  # Info: The value of this property depends on the payment method type returned. For CARD will be CardInfo.
  info: GooglePayPaymentMethodDataInfo
}

# Google Pay Payment Tokenization Data
# See: https://developers.google.com/pay/api/web/reference/response-objects#PaymentMethodTokenizationData
input GooglePayTokenizationData {
  # The type of tokenization to be applied to the selected payment method. This
  # value matches the type set in PaymentMethodTokenizationSpecification.
  type: String

  # Tokenization Data: Payment tokenization data for the selected payment method.
  token: String
}

# Google Pay Payment Method Data > Info
# The value of the info property depends on the payment method type returned. For CARD type the value will be CardInfo.
# https://developers.google.com/pay/api/web/reference/response-objects#CardInfo
input GooglePayPaymentMethodDataInfo {
  # Card Details: The details about the card. This value is commonly the last four
  # digits of the selected payment account number.
  cardDetails: String

  # Assurance Details: This object provides information about the validation
  # performed on the returned payment data if assuranceDetailsRequired is set to
  # true in the CardParameters.
  assuranceDetails: JSON

  # Card Network: The payment card network of the selected payment.
  cardNetwork: String

  # Billing Address: The billing address associated with the provided payment
  # method, if billingAddressRequired is set to true in CardParameters.
  billingAddress: GooglePayPaymentContact
}

# Schema for Google Pay contact
# https://developers.google.com/pay/api/web/reference/response-objects#Address
input GooglePayPaymentContact {
  # The full name of the addressee.
  name: String

  # The postal or ZIP code.
  postalCode: String

  # ISO 3166-1 alpha-2 country code.
  countryCode: String

  # A telephone number, if phoneNumberRequired is set to true in the PaymentDataRequest.
  phoneNumber: String

  # The first line of the address.
  address1: String

  # The second line of the address.
  address2: String

  # The third line of the address.
  address3: String

  # City, town, neighborhood, or suburb.
  locality: String

  # A country subdivision, such as a state or province.
  administrativeArea: String

  # The sorting code.
  sortingCode: String
}
